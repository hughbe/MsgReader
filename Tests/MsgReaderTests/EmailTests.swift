import XCTest
import CompressedRtf
import MAPI
@testable import MsgReader

final class EmailTests: XCTestCase {
    func testReadTeamMsgExtractor1() throws {
        let data = try getData(name: "TeamMsgExtractor/msg-extractor/unicode")
        let msg = try MsgFile(data: data)
        XCTAssertEqual("SMTP", msg.sentRepresentingAddressType!)
        XCTAssertEqual("brianzhou@me.com", msg.receivedRepresentingEmailAddress!)
        XCTAssertTrue(msg.conversationIndexTracking!)
        XCTAssertEqual("", msg.displayBcc!)
        XCTAssertEqual("<CADtJ4eNjQSkGcBtVteCiTF+YFG89+AcHxK3QZ=-Mt48xygkvdQ@mail.gmail.com>", (msg.getProperty(id: .tagInternetMessageId) as String?)!)
        XCTAssertEqual(1384763184.0, msg.clientSubmitTime!.timeIntervalSince1970)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x42, 0x52, 0x49, 0x5A, 0x48, 0x4F, 0x55, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.senderSearchKey!))
        XCTAssertEqual("SMTP", msg.receivedByAddressType!)
        XCTAssertTrue(msg.hasAttachments!)
        XCTAssertEqual(0x00000000, (msg.receivedByEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.receivedByEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.receivedByEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.unicode], (msg.receivedByEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("Brian Zhou", (msg.receivedByEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.receivedByEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("brianzhou@me.com", (msg.receivedByEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual("brianzhou@me.com\u{00}", msg.displayTo!)
        XCTAssertEqual("Brian Zhou", msg.receivedRepresentingName!)
        XCTAssertEqual("Brian Zhou", msg.sentRepresentingName!)
        XCTAssertEqual("This is a test email to experiment with the MS Outlook MSG Extractor\r\n\r\n\r\n-- \r\n\r\n\r\nKind regards\r\n\r\n\r\n\r\n\r\nBrian Zhou\r\n\r\n", msg.body!)
        XCTAssertEqual(0x00000000, (msg.sentRepresentingEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.sentRepresentingEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.sentRepresentingEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.sentRepresentingEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("Brian Zhou", (msg.sentRepresentingEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.sentRepresentingEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("brizhou@gmail.com", (msg.sentRepresentingEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual([.read], msg.access)
        XCTAssertEqual("Brian Zhou\u{00}", msg.displayCc!)
        XCTAssertEqual("SMTP", msg.receivedRepresentingAddressType!)
        XCTAssertEqual("brizhou@gmail.com", msg.originalMessageId!)
        XCTAssertNotNil(msg.rtfCompressed)
        XCTAssertEqual([0x29, 0x09, 0xCD, 0xAA, 0x44, 0xCA, 0x3B, 0x47, 0xAC, 0x80, 0xAC, 0xC4, 0x1D, 0xC0, 0xE3, 0xCA], [UInt8](msg.searchKey!))
        XCTAssertEqual("brizhou@gmail.com", msg.senderEmailAddress!)
        XCTAssertEqual("Brian Zhou", msg.receivedByName!)
        XCTAssertEqual("multipart/mixed; boundary=\"001a113392ecbd7a5404eb6f4d6a\"; charset=\"Windows-1252\"", (msg.getProperty(set: .internetHeaders, name: "content-type") as String?)!)
        XCTAssertEqual("", msg.subjectPrefix!)
        XCTAssertEqual("rfc822;brianzhou@me.com", (msg.getProperty(id: .tagReportOriginalSender) as String?)!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x42, 0x52, 0x49, 0x41, 0x4E, 0x5A, 0x48, 0x4F, 0x55, 0x40, 0x4D, 0x45, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.receivedBySearchKey!))
        XCTAssertEqual(.readOnly, msg.accessLevel!)
        XCTAssertEqual(0x00000000, (msg.receivedRepresentingEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.receivedRepresentingEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.receivedRepresentingEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.unicode], (msg.receivedRepresentingEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("Brian Zhou", (msg.receivedRepresentingEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.receivedRepresentingEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("brianzhou@me.com", (msg.receivedRepresentingEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual(1384763548.0, msg.lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual("brizhou@gmail.com", msg.sentRepresentingEmailAddress!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x42, 0x52, 0x49, 0x5A, 0x48, 0x4F, 0x55, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.sentRepresentingSearchKey!))
        XCTAssertEqual(1384763548.0, msg.creationTime!.timeIntervalSince1970)
        XCTAssertEqual(0x01, msg.conversationIndex!.header.reserved)
        XCTAssertEqual(0x02, msg.conversationIndex!.header.currentFileTime.0)
        XCTAssertEqual(0x1A, msg.conversationIndex!.header.currentFileTime.1)
        XCTAssertEqual(0x17, msg.conversationIndex!.header.currentFileTime.2)
        XCTAssertEqual(0x07, msg.conversationIndex!.header.currentFileTime.3)
        XCTAssertEqual(0x04, msg.conversationIndex!.header.currentFileTime.4)
        XCTAssertEqual(UUID(uuidString: "43290378-8667-EC3D-AE49-A04D7733109D"), msg.conversationIndex!.header.guid)
        XCTAssertEqual(0, msg.conversationIndex!.responseLevels.count)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x42, 0x52, 0x49, 0x41, 0x4E, 0x5A, 0x48, 0x4F, 0x55, 0x40, 0x4D, 0x45, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.receivedRepresentingSearchKey!))
        XCTAssertEqual(0x00000000, (msg.senderEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.senderEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.senderEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.senderEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("Brian Zhou", (msg.senderEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.senderEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("brizhou@gmail.com", (msg.senderEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual("SMTP", (msg.getProperty(id: .tagSenderAddressType) as String?)!)
        XCTAssertEqual("Test for TIF files", msg.conversationTopic!)
        XCTAssertEqual(28591, msg.internetCodepage!)
        XCTAssertEqual("Test for TIF files", msg.normalizedSubject!)
        XCTAssertEqual("brianzhou@me.com", msg.internetAccountName!)
        XCTAssertEqual("Brian Zhou", (msg.getProperty(id: .tagSenderName) as String?)!)
        XCTAssertEqual(1, (msg.getProperty(set: .common, lid: 0x000085D7) as UInt32?)!)
        XCTAssertEqual("00000001\u{01}brianzhou", msg.internetAccountStamp!)
        XCTAssertEqual(.normal, msg.importance!)
        XCTAssertTrue(msg.rtfInSync!)
        XCTAssertEqual(1384763189.0, msg.messageDeliveryTime!.timeIntervalSince1970)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.storeSupportMask)
        XCTAssertEqual("Test for TIF files", msg.subject!)
        XCTAssertEqual([.read, .hasAttachment, MessageFlags(rawValue: 0x00030000)], msg.messageFlags)
        XCTAssertEqual("IPM.Note", msg.messageClass!)
        XCTAssertEqual("brianzhou@me.com", msg.receivedByEmailAddress!)
        XCTAssertNotNil(msg.transportMessageHeaders)

        XCTAssertEqual(2, msg.recipients.count)
        XCTAssertEqual("brianzhou@me.com", msg.recipients[0].displayName!)
        XCTAssertEqual(0, msg.recipients[0].rowid!)
        XCTAssertEqual(0x00000000, (msg.recipients[0].entryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.recipients[0].entryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.recipients[0].entryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.recipients[0].entryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("brianzhou@me.com", (msg.recipients[0].entryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.recipients[0].entryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("brianzhou@me.com", (msg.recipients[0].entryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual(.primaryRecipient, msg.recipients[0].recipientType!)
        XCTAssertEqual("brianzhou@me.com", msg.recipients[0].emailAddress!)
        XCTAssertEqual([0x00, 0x00, 0x09, 0xEC], [UInt8](msg.recipients[0].instanceKey!))
        XCTAssertEqual("SMTP", msg.recipients[0].addressType!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x42, 0x52, 0x49, 0x41, 0x4E, 0x5A, 0x48, 0x4F, 0x55, 0x40, 0x4D, 0x45, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.recipients[0].searchKey!))
        XCTAssertEqual("Brian Zhou", msg.recipients[1].displayName!)
        XCTAssertEqual(1, msg.recipients[1].rowid!)
        XCTAssertEqual(0x00000000, (msg.recipients[1].entryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.recipients[1].entryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.recipients[1].entryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.recipients[1].entryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("Brian Zhou", (msg.recipients[1].entryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.recipients[1].entryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("brizhou@gmail.com", (msg.recipients[1].entryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual(.ccRecipient, msg.recipients[1].recipientType!)
        XCTAssertEqual("brizhou@gmail.com", msg.recipients[1].emailAddress!)
        XCTAssertEqual([0x00, 0x00, 0x09, 0xEF], [UInt8](msg.recipients[1].instanceKey!))
        XCTAssertEqual("SMTP", msg.recipients[1].addressType!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x42, 0x52, 0x49, 0x5A, 0x48, 0x4F, 0x55, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.recipients[1].searchKey!))

        XCTAssertEqual(2, msg.attachments.count)
        XCTAssertEqual([.read], msg.attachments[0].access)
        XCTAssertEqual([0x2A, 0x86, 0x48, 0x86, 0xF7, 0x14, 0x03, 0x0A, 0x04], [UInt8](msg.attachments[0].attachTag!))
        XCTAssertEqual(.byValue, msg.attachments[0].attachMethod!)
        XCTAssertEqual(.attachment, msg.attachments[0].objectType!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[0].storeSupportMask)
        XCTAssertEqual(0, (msg.attachments[0].getProperty(id: .tagAttachMimeSequence) as UInt32?)!)
        XCTAssertNotNil(msg.attachments[0].attachDataBinary)
        XCTAssertEqual([0x00, 0x00, 0x00, 0x00], [UInt8](msg.attachments[0].recordKey!))
        XCTAssertEqual("image/tiff", msg.attachments[0].attachMimeTag!)
        XCTAssertEqual("import OleFileIO.tif", msg.attachments[0].attachLongFilename!)
        XCTAssertEqual(.readOnly, msg.attachments[0].accessLevel!)
        XCTAssertEqual(0, msg.attachments[0].attachNumber!)
        XCTAssertEqual(4294967295, msg.attachments[0].renderingPosition!)
        XCTAssertEqual("importOl.tif", msg.attachments[0].attachFilename!)

        XCTAssertEqual([.read], msg.attachments[1].access)
        XCTAssertEqual([0x2A, 0x86, 0x48, 0x86, 0xF7, 0x14, 0x03, 0x0A, 0x04], [UInt8](msg.attachments[1].attachTag!))
        XCTAssertEqual(.byValue, msg.attachments[1].attachMethod!)
        XCTAssertEqual(.attachment, msg.attachments[1].objectType!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[1].storeSupportMask)
        XCTAssertEqual(1, (msg.attachments[1].getProperty(id: .tagAttachMimeSequence) as UInt32?)!)
        XCTAssertNotNil(msg.attachments[1].attachDataBinary)
        XCTAssertEqual([0x01, 0x00, 0x00, 0x00], [UInt8](msg.attachments[1].recordKey!))
        XCTAssertEqual("image/tiff", msg.attachments[1].attachMimeTag!)
        XCTAssertEqual("raised value error.tif", msg.attachments[1].attachLongFilename!)
        XCTAssertEqual(.readOnly, msg.attachments[1].accessLevel!)
        XCTAssertEqual(1, msg.attachments[1].attachNumber!)
        XCTAssertEqual(4294967295, msg.attachments[1].renderingPosition!)
        XCTAssertEqual("raisedva.tif", msg.attachments[1].attachFilename!)
    }

    func testReadTeamMsgExtractor2() throws {
        let data = try getData(name: "TeamMsgExtractor/msg-extractor/strangeDate")
        let msg = try MsgFile(data: data)

        XCTAssertEqual(4294967295, msg.iconIndex!)
        XCTAssertEqual(1033, (msg.getProperty(set: .common, lid: 0x000085EB) as UInt32?)!)
        XCTAssertEqual(0, msg.reminderDelta!)
        XCTAssertEqual("MSG Test File", msg.normalizedSubject!)
        XCTAssertEqual(.notAssigned, msg.taskMode!)
        XCTAssertEqual([0xA9, 0xED, 0x18, 0x77, 0x63, 0x5C, 0x5F, 0x4E, 0x82, 0xBD, 0xFF, 0x1F, 0x38, 0x84, 0x76, 0xDA], [UInt8](msg.searchKey!))
        XCTAssertNotNil(msg.rtfCompressed)
        XCTAssertEqual(154783, msg.currentVersion!)
        XCTAssertEqual(.normal, msg.priority!)
        XCTAssertEqual([0x3C, 0x3F, 0x78, 0x6D, 0x6C, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x3D, 0x22, 0x31, 0x2E, 0x30, 0x22, 0x20, 0x65, 0x6E, 0x63, 0x6F, 0x64, 0x69, 0x6E, 0x67, 0x3D, 0x22, 0x55, 0x54, 0x46, 0x2D, 0x38, 0x22, 0x20, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x61, 0x6C, 0x6F, 0x6E, 0x65, 0x3D, 0x22, 0x79, 0x65, 0x73, 0x22, 0x3F, 0x3E, 0x0D, 0x0A, 0x3C, 0x61, 0x3A, 0x63, 0x6C, 0x72, 0x4D, 0x61, 0x70, 0x20, 0x78, 0x6D, 0x6C, 0x6E, 0x73, 0x3A, 0x61, 0x3D, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x73, 0x63, 0x68, 0x65, 0x6D, 0x61, 0x73, 0x2E, 0x6F, 0x70, 0x65, 0x6E, 0x78, 0x6D, 0x6C, 0x66, 0x6F, 0x72, 0x6D, 0x61, 0x74, 0x73, 0x2E, 0x6F, 0x72, 0x67, 0x2F, 0x64, 0x72, 0x61, 0x77, 0x69, 0x6E, 0x67, 0x6D, 0x6C, 0x2F, 0x32, 0x30, 0x30, 0x36, 0x2F, 0x6D, 0x61, 0x69, 0x6E, 0x22, 0x20, 0x62, 0x67, 0x31, 0x3D, 0x22, 0x6C, 0x74, 0x31, 0x22, 0x20, 0x74, 0x78, 0x31, 0x3D, 0x22, 0x64, 0x6B, 0x31, 0x22, 0x20, 0x62, 0x67, 0x32, 0x3D, 0x22, 0x6C, 0x74, 0x32, 0x22, 0x20, 0x74, 0x78, 0x32, 0x3D, 0x22, 0x64, 0x6B, 0x32, 0x22, 0x20, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x31, 0x3D, 0x22, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x31, 0x22, 0x20, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x32, 0x3D, 0x22, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x32, 0x22, 0x20, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x33, 0x3D, 0x22, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x33, 0x22, 0x20, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x34, 0x3D, 0x22, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x34, 0x22, 0x20, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x35, 0x3D, 0x22, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x35, 0x22, 0x20, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x36, 0x3D, 0x22, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x36, 0x22, 0x20, 0x68, 0x6C, 0x69, 0x6E, 0x6B, 0x3D, 0x22, 0x68, 0x6C, 0x69, 0x6E, 0x6B, 0x22, 0x20, 0x66, 0x6F, 0x6C, 0x48, 0x6C, 0x69, 0x6E, 0x6B, 0x3D, 0x22, 0x66, 0x6F, 0x6C, 0x48, 0x6C, 0x69, 0x6E, 0x6B, 0x22, 0x2F, 0x3E], [UInt8]((msg.getProperty(set: .common, lid: 0x000085C3) as Data?)!))
        XCTAssertEqual(0x01, msg.conversationIndex!.header.reserved)
        XCTAssertEqual(0xD1, msg.conversationIndex!.header.currentFileTime.0)
        XCTAssertEqual(0x6E, msg.conversationIndex!.header.currentFileTime.1)
        XCTAssertEqual(0x4A, msg.conversationIndex!.header.currentFileTime.2)
        XCTAssertEqual(0x85, msg.conversationIndex!.header.currentFileTime.3)
        XCTAssertEqual(0x6E, msg.conversationIndex!.header.currentFileTime.4)
        XCTAssertEqual(UUID(uuidString: "55272F7F-9CA0-4AE3-8A0F-F778094D6DB8"), msg.conversationIndex!.header.guid)
        XCTAssertEqual(0, msg.conversationIndex!.responseLevels.count)
        XCTAssertFalse(msg.reminderSet!)
        XCTAssertEqual("time2talk@online-convert.com\u{00}", msg.displayTo!)
        XCTAssertEqual("IPM.Note", msg.messageClass!)
        XCTAssertEqual(.normal, msg.importance!)
        XCTAssertEqual(1456239470.0, msg.creationTime!.timeIntervalSince1970)
        XCTAssertEqual([.unsent], msg.messageFlags)
        XCTAssertEqual([], msg.sideEffects)
        XCTAssertFalse(msg.deleteAfterSubmit!)
        XCTAssertEqual([.read], msg.access)
        XCTAssertEqual(20127, msg.internetCodepage!)
        XCTAssertEqual("MSG test file\r\nPurpose: Provide example of this file type\r\nDocument file type: MSG\r\nVersion: 1.0\r\nRemark:\r\n\r\nExample content:\r\nThe names \"John Doe\" for males, \"Jane Doe\" or \"Jane Roe\" for females,\r\nor \"Jonnie Doe\" and \"Janie Doe\" for children, or just \"Doe\"\r\nnon-gender-specifically are used as placeholder names for a party whose\r\ntrue identity is unknown or must be withheld in a legal action, case, or\r\ndiscussion. The names are also used to refer to acorpse or hospital\r\npatient whose identity is unknown. This practice is widely used in the\r\nUnited States and Canada, but is rarely used in other English-speaking\r\ncountries including the United Kingdom itself, from where the use of\r\n\"John Doe\" in a legal context originates. The names Joe Bloggs or John\r\nSmith are used in the UK instead, as well as in Australia and New\r\nZealand. \r\n\r\nJohn Doe is sometimes used to refer to a typical male in other contexts\r\nas well, in a similar manner to John Q. Public, known in Great Britain\r\nas Joe Public, John Smith or Joe Bloggs. For example, the first name\r\nlisted on a form is often John Doe, along with a fictional address or\r\nother fictional information to provide an example of how to fill in the\r\nform. The name is also used frequently in popular culture, for example\r\nin the Frank Capra film Meet John Doe. John Doe was also the name of a\r\n2002 American television series. \r\n\r\nSimilarly, a child or baby whose identity is unknown may be referred to\r\nas Baby Doe. A notorious murder case in Kansas City, Missouri, referred\r\nto the baby victim as Precious Doe. Other unidentified female murder\r\nvictims are Cali Doe and Princess Doe. Additional persons may be called\r\nJames Doe, Judy Doe, etc. However, to avoid possible confusion, if two\r\nanonymous or unknown parties are cited in a specific case or action, the\r\nsurnames Doe and Roe may be used simultaneously; for example, \"John Doe\r\nv. Jane Roe\". If several anonymous parties are referenced, they may\r\nsimply be labelled John Doe #1, John Doe #2, etc. (the U.S. Operation\r\nDelego cited 21 (numbered) \"John Doe\"s) or labelled with other variants\r\nof Doe / Roe / Poe / etc. Other early alternatives such as John Stiles\r\nand Richard Miles are now rarely used, and Mary Major has been used in\r\nsome American federal cases. \r\n\r\nFile created by http://www.online-convert.com\r\n<http://www.online-convert.com> \r\nMore example files: http://www.online-convert.com/file-type\r\n<http://www.online-convert.com/file-type> \r\nText of Example content: Wikipedia\r\n<http://en.wikipedia.org/wiki/John_Doe> \r\nLicense: Attribution-ShareAlike 3.0 Unported\r\n<http://creativecommons.org/licenses/by-sa/3.0/> \r\n\r\nFeel free to use and share the file according to the license above.\r\n", msg.body!)
        XCTAssertFalse(msg.`private`!)
        XCTAssertEqual("MSG Test File", msg.conversationTopic!)
        XCTAssertFalse(msg.readReceiptRequested!)
        XCTAssertEqual("", msg.displayBcc!)
        XCTAssertEqual(.normal, msg.sensitivity!)
        XCTAssertEqual(1456239470.0, msg.lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual("15.0", msg.currentVersionName!)
        XCTAssertEqual("", msg.displayCc!)
        XCTAssertFalse(msg.originatorDeliveryReportRequested!)
        XCTAssertEqual(1033, msg.messageLocaleId!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.storeSupportMask)
        XCTAssertEqual(.readOnly, msg.accessLevel!)
        XCTAssertTrue(msg.rtfInSync!)
        XCTAssertTrue(msg.alternateRecipientAllowed!)
        XCTAssertEqual([0x50, 0x4B, 0x03, 0x04, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0xE9, 0xDE, 0x0F, 0xBF, 0xFF, 0x00, 0x00, 0x00, 0x1C, 0x02, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x5B, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x5F, 0x54, 0x79, 0x70, 0x65, 0x73, 0x5D, 0x2E, 0x78, 0x6D, 0x6C, 0xAC, 0x91, 0xCB, 0x4E, 0xC3, 0x30, 0x10, 0x45, 0xF7, 0x48, 0xFC, 0x83, 0xE5, 0x2D, 0x4A, 0x9C, 0xB2, 0x40, 0x08, 0x25, 0xE9, 0x82, 0xC7, 0x8E, 0xC7, 0xA2, 0x7C, 0xC0, 0xC8, 0x99, 0x24, 0x16, 0xC9, 0xD8, 0xB2, 0xA7, 0x55, 0xFB, 0xF7, 0x4C, 0xD2, 0x54, 0x42, 0xA8, 0x20, 0x16, 0x6C, 0x2C, 0xD9, 0x33, 0xF7, 0x9E, 0x3B, 0xE3, 0x72, 0xBD, 0x1F, 0x07, 0xB5, 0xC3, 0x98, 0x9C, 0xA7, 0x4A, 0xAF, 0xF2, 0x42, 0x2B, 0x24, 0xEB, 0x1B, 0x47, 0x5D, 0xA5, 0xDF, 0x37, 0x4F, 0xD9, 0xAD, 0x56, 0x89, 0x81, 0x1A, 0x18, 0x3C, 0x61, 0xA5, 0x0F, 0x98, 0xF4, 0xBA, 0xBE, 0xBC, 0x28, 0x37, 0x87, 0x80, 0x49, 0x89, 0x9A, 0x52, 0xA5, 0x7B, 0xE6, 0x70, 0x67, 0x4C, 0xB2, 0x3D, 0x8E, 0x90, 0x72, 0x1F, 0x90, 0xA4, 0xD2, 0xFA, 0x38, 0x02, 0xCB, 0x35, 0x76, 0x26, 0x80, 0xFD, 0x80, 0x0E, 0xCD, 0x75, 0x51, 0xDC, 0x18, 0xEB, 0x89, 0x91, 0x38, 0xE3, 0xC9, 0x43, 0xD7, 0xE5, 0x03, 0xB6, 0xB0, 0x1D, 0x58, 0x3D, 0xEE, 0xE5, 0xF9, 0x98, 0x24, 0xE2, 0x90, 0xB4, 0xBA, 0x3F, 0x36, 0x4E, 0xAC, 0x4A, 0x43, 0x08, 0x83, 0xB3, 0xC0, 0x92, 0xD4, 0xEC, 0xA8, 0xF9, 0x46, 0xC9, 0x16, 0x42, 0x2E, 0xCA, 0xB9, 0x27, 0xF5, 0x2E, 0xA4, 0x2B, 0x89, 0xA1, 0xCD, 0x59, 0xC2, 0x54, 0xF9, 0x19, 0xB0, 0xE8, 0x5E, 0x65, 0x35, 0xD1, 0x35, 0xA8, 0xDE, 0x20, 0xF2, 0x0B, 0x8C, 0x12, 0xC3, 0xB0, 0x0C, 0x89, 0x5F, 0xCF, 0x67, 0x20, 0x19, 0x2D, 0xE6, 0xBF, 0x3B, 0x9E, 0x89, 0xEC, 0xDB, 0xD6, 0x59, 0x6C, 0xBC, 0xDD, 0x8E, 0xB2, 0x8E, 0x7C, 0x36, 0x5E, 0xCC, 0x4E, 0xC1, 0xFF, 0x14, 0x60, 0xF5, 0x3F, 0xE8, 0x13, 0xD3, 0xCC, 0x7F, 0x5B, 0x7F, 0x02, 0x00, 0x00, 0xFF, 0xFF, 0x03, 0x00, 0x50, 0x4B, 0x03, 0x04, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0xA5, 0xD6, 0xA7, 0xE7, 0xC0, 0x00, 0x00, 0x00, 0x36, 0x01, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x5F, 0x72, 0x65, 0x6C, 0x73, 0x2F, 0x2E, 0x72, 0x65, 0x6C, 0x73, 0x84, 0x8F, 0xCF, 0x6A, 0xC3, 0x30, 0x0C, 0x87, 0xEF, 0x85, 0xBD, 0x83, 0xD1, 0x7D, 0x51, 0xD2, 0xC3, 0x18, 0x25, 0x76, 0x2F, 0xA5, 0x90, 0x43, 0x2F, 0xA3, 0x7D, 0x00, 0xE1, 0x28, 0x7F, 0x68, 0x22, 0x1B, 0xDB, 0x1B, 0xEB, 0xDB, 0x4F, 0xC7, 0x06, 0x0A, 0xBB, 0x08, 0x84, 0xA4, 0xEF, 0xF7, 0xA9, 0x3D, 0xFE, 0xAE, 0x8B, 0xF9, 0xE1, 0x94, 0xE7, 0x20, 0x16, 0x9A, 0xAA, 0x06, 0xC3, 0xE2, 0x43, 0x3F, 0xCB, 0x68, 0xE1, 0x76, 0x3D, 0xBF, 0x7F, 0x82, 0xC9, 0x85, 0xA4, 0xA7, 0x25, 0x08, 0x5B, 0x78, 0x70, 0x86, 0xA3, 0x7B, 0xDB, 0xB5, 0x5F, 0xBC, 0x50, 0xD1, 0xA3, 0x3C, 0xCD, 0x31, 0x1B, 0xA5, 0x48, 0xB6, 0x30, 0x95, 0x12, 0x0F, 0x88, 0xD9, 0x4F, 0xBC, 0x52, 0xAE, 0x42, 0x64, 0xD1, 0xC9, 0x10, 0xD2, 0x4A, 0x45, 0xDB, 0x34, 0x62, 0x24, 0x7F, 0xA7, 0x91, 0x71, 0x5F, 0xD7, 0x1F, 0x98, 0x9E, 0x19, 0xE0, 0x36, 0x4C, 0xD3, 0xF5, 0x16, 0x52, 0xD7, 0x37, 0x60, 0xAE, 0x8F, 0xA8, 0xC9, 0xFF, 0xB3, 0xC3, 0x30, 0xCC, 0x9E, 0x4F, 0xC1, 0x7F, 0xAF, 0x2C, 0xE5, 0x45, 0x04, 0x6E, 0x37, 0x94, 0x4C, 0x69, 0xE4, 0x62, 0xA1, 0xA8, 0x2F, 0xE3, 0x53, 0xBD, 0x90, 0xA8, 0x65, 0xAA, 0xD4, 0x1E, 0xD0, 0xB5, 0xB8, 0xF9, 0xD6, 0xFD, 0x01, 0x00, 0x00, 0xFF, 0xFF, 0x03, 0x00, 0x50, 0x4B, 0x03, 0x04, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0x6B, 0x79, 0x96, 0x16, 0x83, 0x00, 0x00, 0x00, 0x8A, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x4D, 0x61, 0x6E, 0x61, 0x67, 0x65, 0x72, 0x2E, 0x78, 0x6D, 0x6C, 0x0C, 0xCC, 0x4D, 0x0A, 0xC3, 0x20, 0x10, 0x40, 0xE1, 0x7D, 0xA1, 0x77, 0x90, 0xD9, 0x37, 0x63, 0xBB, 0x28, 0x45, 0x62, 0xB2, 0xCB, 0xAE, 0xBB, 0xF6, 0x00, 0x43, 0x9C, 0x1A, 0x41, 0xC7, 0xA0, 0xD2, 0x9F, 0xDB, 0xD7, 0xE5, 0xE3, 0x83, 0x37, 0xCE, 0xDF, 0x14, 0xD5, 0x9B, 0x4B, 0x0D, 0x59, 0x2C, 0x9C, 0x07, 0x0D, 0x8A, 0x65, 0xCD, 0x2E, 0x88, 0xB7, 0xF0, 0x7C, 0x2C, 0xA7, 0x1B, 0xA8, 0xDA, 0x48, 0x1C, 0xC5, 0x2C, 0x6C, 0xE1, 0xC7, 0x15, 0xE6, 0xE9, 0x78, 0x18, 0xC9, 0xB4, 0x8D, 0x13, 0xDF, 0x49, 0xC8, 0x73, 0x51, 0x7D, 0x23, 0xD5, 0x90, 0x85, 0xAD, 0xB5, 0xDD, 0x20, 0xD6, 0xB5, 0x2B, 0xD5, 0x21, 0xEF, 0x2C, 0xDD, 0x5E, 0xB9, 0x24, 0x6A, 0x3D, 0x8B, 0x47, 0x57, 0xE8, 0xD3, 0xF7, 0x29, 0xE2, 0x45, 0xEB, 0x2B, 0x26, 0x0A, 0x02, 0x38, 0xFD, 0x01, 0x00, 0x00, 0xFF, 0xFF, 0x03, 0x00, 0x50, 0x4B, 0x03, 0x04, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0xAA, 0x52, 0x25, 0xDF, 0xC6, 0x06, 0x00, 0x00, 0x8B, 0x1A, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x31, 0x2E, 0x78, 0x6D, 0x6C, 0xEC, 0x59, 0x5D, 0x8B, 0xDB, 0x46, 0x14, 0x7D, 0x2F, 0xF4, 0x3F, 0x08, 0xBD, 0x3B, 0xFE, 0x92, 0xFC, 0xB1, 0xC4, 0x1B, 0x6C, 0xD9, 0xCE, 0xB6, 0xD9, 0x4D, 0x42, 0xEC, 0xA4, 0xE4, 0x71, 0x6C, 0x8F, 0xAD, 0xC9, 0x8E, 0x34, 0x46, 0x33, 0xDE, 0x8D, 0x09, 0x81, 0x92, 0x3C, 0x16, 0x0A, 0xA5, 0x69, 0xE9, 0x43, 0x03, 0x7D, 0xEB, 0x43, 0x69, 0x1B, 0x48, 0xA0, 0x2F, 0xE9, 0xAF, 0xD9, 0x36, 0xA5, 0x4D, 0x21, 0x7F, 0xA1, 0x77, 0x46, 0xB6, 0x3C, 0x63, 0x8F, 0xBB, 0x9B, 0x25, 0x85, 0xA5, 0x64, 0x0D, 0x8B, 0x34, 0x3A, 0xF7, 0xCE, 0x99, 0x7B, 0xAF, 0xCE, 0x1D, 0x49, 0x97, 0xAF, 0xDC, 0x8F, 0xA8, 0x73, 0x84, 0x13, 0x4E, 0x58, 0xDC, 0x70, 0x8B, 0x97, 0x0A, 0xAE, 0x83, 0xE3, 0x21, 0x1B, 0x91, 0x78, 0xD2, 0x70, 0x6F, 0xF7, 0xBB, 0xB9, 0x9A, 0xEB, 0x70, 0x81, 0xE2, 0x11, 0xA2, 0x2C, 0xC6, 0x0D, 0x77, 0x8E, 0xB9, 0x7B, 0x65, 0xF7, 0xC3, 0x0F, 0x2E, 0xA3, 0x1D, 0x11, 0xE2, 0x08, 0x3B, 0x60, 0x1F, 0xF3, 0x1D, 0xD4, 0x70, 0x43, 0x21, 0xA6, 0x3B, 0xF9, 0x3C, 0x1F, 0xC2, 0x30, 0xE2, 0x97, 0xD8, 0x14, 0xC7, 0x70, 0x6D, 0xCC, 0x92, 0x08, 0x09, 0x38, 0x4D, 0x26, 0xF9, 0x51, 0x82, 0x8E, 0xC1, 0x6F, 0x44, 0xF3, 0xA5, 0x42, 0xA1, 0x92, 0x8F, 0x10, 0x89, 0x5D, 0x27, 0x46, 0x11, 0xB8, 0xBD, 0x31, 0x1E, 0x93, 0x21, 0x76, 0xFA, 0xD2, 0xA5, 0xBB, 0xBB, 0x74, 0xDE, 0xA1, 0x70, 0x1A, 0x0B, 0x2E, 0x07, 0x86, 0x34, 0xE9, 0x49, 0xD7, 0xD8, 0xB0, 0x50, 0xD8, 0xD1, 0x61, 0x51, 0x22, 0xF8, 0x9C, 0x07, 0x34, 0x71, 0x8E, 0x10, 0x6D, 0xB8, 0x30, 0xCF, 0x88, 0x1D, 0xF7, 0xF1, 0x7D, 0xE1, 0x3A, 0x14, 0x71, 0x01, 0x17, 0x1A, 0x6E, 0x41, 0xFD, 0xB9, 0xF9, 0xDD, 0xCB, 0x79, 0xB4, 0xB3, 0x30, 0xA2, 0x62, 0x8B, 0xAD, 0x66, 0xD7, 0x55, 0x7F, 0x0B, 0xBB, 0x85, 0xC1, 0xE8, 0xB0, 0xA4, 0xE6, 0x4C, 0x26, 0x83, 0x6C, 0x52, 0xCF, 0xF3, 0xBD, 0x4A, 0x33, 0xF3, 0xAF, 0x00, 0x54, 0x6C, 0xE2, 0x3A, 0xD5, 0x4E, 0xA5, 0x53, 0xC9, 0xFC, 0x29, 0x00, 0x1A, 0x0E, 0x61, 0xA5, 0x29, 0x17, 0xDD, 0xA7, 0xDF, 0xAA, 0xB7, 0xDA, 0xFE, 0x02, 0xAB, 0x81, 0xD2, 0x43, 0x8B, 0xEF, 0x76, 0xB5, 0x5D, 0x2E, 0x1A, 0x78, 0xCD, 0x7F, 0x79, 0x83, 0x73, 0xD3, 0x97, 0x3F, 0x03, 0xAF, 0x40, 0xA9, 0x7F, 0x6F, 0x03, 0xDF, 0xED, 0x06, 0x10, 0x45, 0x03, 0xAF, 0x40, 0x29, 0xDE, 0xDF, 0xC0, 0x7B, 0x5E, 0xB5, 0x14, 0x78, 0x06, 0x5E, 0x81, 0x52, 0x7C, 0x65, 0x03, 0x5F, 0x2D, 0x34, 0xDB, 0x5E, 0xD5, 0xC0, 0x2B, 0x50, 0x48, 0x49, 0x7C, 0xB8, 0x81, 0x2E, 0xF8, 0x95, 0x72, 0xB0, 0x5C, 0x6D, 0x06, 0x19, 0x33, 0xBA, 0x67, 0x85, 0xD7, 0x7D, 0xAF, 0x5B, 0x2D, 0x2D, 0x9C, 0xAF, 0x50, 0x50, 0x0D, 0x59, 0x75, 0xC9, 0x29, 0xC6, 0x2C, 0x16, 0xDB, 0x6A, 0x2D, 0x42, 0xF7, 0x58, 0xD2, 0x05, 0x80, 0x04, 0x52, 0x24, 0x48, 0xEC, 0x88, 0xF9, 0x14, 0x8F, 0xD1, 0x10, 0xAA, 0x38, 0x40, 0x94, 0x0C, 0x12, 0xE2, 0xEC, 0x93, 0x49, 0x08, 0x85, 0x37, 0x45, 0x31, 0xE3, 0x30, 0x5C, 0x28, 0x15, 0xBA, 0x85, 0x32, 0xFC, 0x97, 0x3F, 0x4F, 0x1D, 0xA9, 0x88, 0xA0, 0x1D, 0x8C, 0x34, 0x6B, 0xC9, 0x0B, 0x98, 0xF0, 0x8D, 0x21, 0xC9, 0xC7, 0xE1, 0xC3, 0x84, 0x4C, 0x45, 0xC3, 0xFD, 0x18, 0xBC, 0xBA, 0x1A, 0xE4, 0xCD, 0xCB, 0x1F, 0xDF, 0xBC, 0x7C, 0xEE, 0x9C, 0x3C, 0x7A, 0x71, 0xF2, 0xE8, 0x97, 0x93, 0xC7, 0x8F, 0x4F, 0x1E, 0xFD, 0x9C, 0x3A, 0x32, 0xAC, 0xF6, 0x50, 0x3C, 0xD1, 0xAD, 0x5E, 0x7F, 0xFF, 0xC5, 0xDF, 0x4F, 0x3F, 0x75, 0xFE, 0x7A, 0xFE, 0xDD, 0xEB, 0x27, 0x5F, 0xD9, 0xF1, 0x5C, 0xC7, 0xFF, 0xFE, 0xD3, 0x67, 0xBF, 0xFD, 0xFA, 0xA5, 0x1D, 0x08, 0x2B, 0x5D, 0x85, 0xE0, 0xD5, 0xD7, 0xCF, 0xFE, 0x78, 0xF1, 0xEC, 0xD5, 0x37, 0x9F, 0xFF, 0xF9, 0xC3, 0x13, 0x0B, 0xBC, 0x99, 0xA0, 0x81, 0x0E, 0xEF, 0x93, 0x08, 0x73, 0xE7, 0x3A, 0x3E, 0x76, 0x6E, 0xB1, 0x08, 0x16, 0xA6, 0x42, 0x60, 0x32, 0xC7, 0x83, 0xE4, 0xED, 0x2C, 0xFA, 0x21, 0x22, 0xBA, 0x45, 0x33, 0x9E, 0x70, 0x14, 0x23, 0x39, 0x8B, 0xC5, 0x7F, 0x47, 0x84, 0x06, 0xFA, 0xFA, 0x1C, 0x51, 0x64, 0xC1, 0xB5, 0xB0, 0x19, 0xC1, 0x3B, 0x09, 0x48, 0x8C, 0x0D, 0x78, 0x75, 0x76, 0xCF, 0x20, 0xDC, 0x0B, 0x93, 0x99, 0x20, 0x16, 0x8F, 0xD7, 0xC2, 0xC8, 0x00, 0x1E, 0x30, 0x46, 0x5B, 0x2C, 0xB1, 0x46, 0xE1, 0x9A, 0x9C, 0x4B, 0x0B, 0x73, 0x7F, 0x16, 0x4F, 0xEC, 0x93, 0x27, 0x33, 0x1D, 0x77, 0x0B, 0xA1, 0x23, 0xDB, 0xDC, 0x01, 0x8A, 0x8D, 0xFC, 0x76, 0x66, 0x53, 0xD0, 0x56, 0x62, 0x73, 0x19, 0x84, 0xD8, 0xA0, 0x79, 0x93, 0xA2, 0x58, 0xA0, 0x09, 0x8E, 0xB1, 0x70, 0xE4, 0x35, 0x76, 0x88, 0xB1, 0x65, 0x75, 0x77, 0x09, 0x31, 0xE2, 0x7A, 0x40, 0x86, 0x09, 0xE3, 0x6C, 0x2C, 0x9C, 0xBB, 0xC4, 0x69, 0x21, 0x62, 0x0D, 0x49, 0x9F, 0x0C, 0x8C, 0x6A, 0x5A, 0x19, 0xED, 0x91, 0x08, 0xF2, 0x32, 0xB7, 0x11, 0x84, 0x7C, 0x1B, 0xB1, 0x39, 0xB8, 0xE3, 0xB4, 0x18, 0xB5, 0xAD, 0xBA, 0x8D, 0x8F, 0x4C, 0x24, 0xDC, 0x15, 0x88, 0x5A, 0xC8, 0xF7, 0x31, 0x35, 0xC2, 0x78, 0x15, 0xCD, 0x04, 0x8A, 0x6C, 0x2E, 0xFB, 0x28, 0xA2, 0x7A, 0xC0, 0xF7, 0x91, 0x08, 0x6D, 0x24, 0x7B, 0xF3, 0x64, 0xA8, 0xE3, 0x3A, 0x5C, 0x40, 0xA6, 0x27, 0x98, 0x32, 0xA7, 0x33, 0xC2, 0x9C, 0xDB, 0x6C, 0x6E, 0x24, 0xB0, 0x5E, 0x2D, 0xE9, 0xD7, 0x40, 0x5E, 0xEC, 0x69, 0x3F, 0xA0, 0xF3, 0xC8, 0x44, 0x26, 0x82, 0x1C, 0xDA, 0x7C, 0xEE, 0x23, 0xC6, 0x74, 0x64, 0x9B, 0x1D, 0x06, 0x21, 0x8A, 0xA6, 0x36, 0x6C, 0x8F, 0xC4, 0xA1, 0x8E, 0xFD, 0x88, 0x1F, 0x42, 0x89, 0x22, 0xE7, 0x26, 0x13, 0x36, 0xF8, 0x01, 0x33, 0xEF, 0x10, 0x79, 0x0E, 0x79, 0x40, 0xF1, 0xD6, 0x74, 0xDF, 0x21, 0xD8, 0x48, 0xF7, 0xE9, 0x6A, 0x70, 0x1B, 0x94, 0x55, 0xA7, 0xB4, 0x2A, 0x10, 0x79, 0x65, 0x96, 0x58, 0x72, 0x79, 0x15, 0x33, 0xA3, 0x7E, 0x7B, 0x73, 0x3A, 0x46, 0x58, 0x49, 0x0D, 0x08, 0xBF, 0xA1, 0xE7, 0x11, 0x89, 0x4F, 0x15, 0xF7, 0x35, 0x59, 0xF7, 0xFF, 0x5B, 0x59, 0x07, 0x21, 0x7D, 0xF5, 0xED, 0x53, 0xCB, 0xAA, 0x2E, 0xAA, 0xA0, 0x37, 0x13, 0x62, 0xBD, 0xA3, 0xF6, 0xD6, 0x64, 0x7C, 0x1B, 0x6E, 0x5D, 0xBC, 0x03, 0x96, 0x8C, 0xC8, 0xC5, 0xD7, 0xEE, 0x36, 0x9A, 0xC5, 0x37, 0x31, 0xDC, 0x2E, 0x9B, 0x0D, 0xEC, 0xBD, 0x74, 0xBF, 0x97, 0x6E, 0xF7, 0x7F, 0x2F, 0xDD, 0xDB, 0xEE, 0xE7, 0x77, 0x2F, 0xD8, 0x2B, 0x8D, 0x06, 0xF9, 0x96, 0x5B, 0xC5, 0x74, 0xAB, 0xAE, 0x36, 0xEE, 0xD1, 0xD6, 0x7D, 0xFB, 0x98, 0x50, 0xDA, 0x13, 0x73, 0x8A, 0xF7, 0xB9, 0xDA, 0xBA, 0x73, 0xE8, 0x4C, 0xA3, 0x2E, 0x0C, 0x4A, 0x3B, 0xF5, 0xCC, 0x8A, 0xB3, 0xE7, 0xB8, 0x69, 0x08, 0x87, 0xF2, 0x4E, 0x86, 0x09, 0x0C, 0xDC, 0x24, 0x41, 0xCA, 0xC6, 0x49, 0x98, 0xF8, 0x84, 0x88, 0xB0, 0x17, 0xA2, 0x29, 0xEC, 0xEF, 0x8B, 0xAE, 0x74, 0x32, 0xE1, 0x0B, 0xD7, 0x13, 0xEE, 0x4C, 0x19, 0x87, 0x6D, 0xBF, 0x1A, 0xB6, 0xFA, 0x96, 0x78, 0x3A, 0x8B, 0x0E, 0xD8, 0x28, 0x7D, 0x5C, 0x2D, 0x16, 0xE5, 0xA3, 0x69, 0x2A, 0x1E, 0x1C, 0x89, 0xD5, 0x78, 0xC1, 0xCF, 0xC6, 0xE1, 0x51, 0x43, 0xA4, 0xE8, 0x4A, 0x75, 0xF5, 0x08, 0x96, 0xB9, 0x57, 0x6C, 0x27, 0xEA, 0x51, 0x79, 0x49, 0x40, 0xDA, 0xBE, 0x0D, 0x09, 0x6D, 0x32, 0x93, 0x44, 0xD9, 0x42, 0xA2, 0xBA, 0x1C, 0x94, 0x41, 0x52, 0x0F, 0xE6, 0x10, 0x34, 0x0B, 0x09, 0xB5, 0xB2, 0x77, 0xC2, 0xA2, 0x6E, 0x61, 0x51, 0x93, 0xEE, 0x97, 0xA9, 0xDA, 0x60, 0x01, 0xD4, 0xB2, 0xAC, 0xC0, 0xD6, 0xC9, 0x81, 0x0D, 0x57, 0xC3, 0xF5, 0x3D, 0x30, 0x01, 0x23, 0x78, 0xA2, 0x42, 0x14, 0x8F, 0x64, 0x9E, 0xD2, 0x54, 0x2F, 0xB3, 0xAB, 0x92, 0xF9, 0x2E, 0x33, 0xBD, 0x2D, 0x98, 0x46, 0x05, 0xC0, 0x3E, 0x62, 0x59, 0x01, 0xAB, 0x4C, 0xD7, 0x25, 0xD7, 0xAD, 0xCB, 0x93, 0xAB, 0x4B, 0x4B, 0xED, 0x0C, 0x99, 0x36, 0x48, 0x68, 0xE5, 0x66, 0x92, 0x50, 0x91, 0x51, 0x3D, 0x8C, 0x87, 0x68, 0x84, 0x17, 0xD5, 0x29, 0x47, 0xCF, 0x42, 0xE3, 0x6D, 0x73, 0x5D, 0x5F, 0xA5, 0xD4, 0xA0, 0x27, 0x43, 0xA1, 0xE6, 0x83, 0xD2, 0x5A, 0xD1, 0xA8, 0xD6, 0xFE, 0x8D, 0xC5, 0x79, 0x73, 0x0D, 0x76, 0xEB, 0xDA, 0x40, 0x63, 0x5D, 0x29, 0x68, 0xEC, 0x1C, 0x37, 0xDC, 0x4A, 0xD9, 0x87, 0x92, 0x19, 0xA2, 0x69, 0xC3, 0x1D, 0xC3, 0x63, 0x3F, 0x1C, 0x46, 0x53, 0xA8, 0x1D, 0x2E, 0xB7, 0xBC, 0x88, 0x4E, 0xE0, 0xDD, 0xD9, 0x50, 0x24, 0xE9, 0x0D, 0x7F, 0x1E, 0x65, 0x99, 0x26, 0x5C, 0xB4, 0x11, 0x0F, 0xD3, 0x80, 0x2B, 0xD1, 0x49, 0xD5, 0x20, 0x22, 0x02, 0x27, 0x0E, 0x25, 0x51, 0xC3, 0x95, 0xCB, 0xCF, 0xD2, 0x40, 0x63, 0xA5, 0x21, 0x8A, 0x5B, 0xB1, 0x04, 0x82, 0x70, 0x61, 0xC9, 0xD5, 0x41, 0x56, 0x2E, 0x1A, 0x39, 0x48, 0xBA, 0x99, 0x64, 0x3C, 0x1E, 0xE3, 0xA1, 0xD0, 0xD3, 0xAE, 0x8D, 0xC8, 0x48, 0xA7, 0xA7, 0xA0, 0xF0, 0xA9, 0x56, 0x58, 0xAF, 0x2A, 0xF3, 0xF3, 0x83, 0xA5, 0x25, 0x9B, 0x41, 0xBA, 0x7B, 0xE1, 0xE8, 0xD8, 0x19, 0xD0, 0x59, 0x72, 0x0B, 0x41, 0x89, 0xF9, 0xD5, 0xA2, 0x0C, 0xE0, 0x88, 0x70, 0x78, 0xFB, 0x53, 0x4C, 0xA3, 0x39, 0x22, 0xF0, 0x3A, 0x33, 0x13, 0xB2, 0x55, 0xFD, 0xAD, 0x35, 0xA6, 0x85, 0xEC, 0xEA, 0xEF, 0x13, 0x55, 0x0D, 0xA5, 0xE3, 0x88, 0x4E, 0x43, 0xB4, 0xE8, 0x28, 0xBA, 0x98, 0xA7, 0x70, 0x25, 0xE5, 0x19, 0x1D, 0x75, 0x96, 0xC5, 0x40, 0x3B, 0x5B, 0xAC, 0x19, 0x02, 0xAA, 0x85, 0x64, 0xD1, 0x08, 0x07, 0x13, 0xD9, 0x60, 0xF5, 0xA0, 0x1A, 0xDD, 0x34, 0xEB, 0x1A, 0x29, 0x87, 0xAD, 0x5D, 0xF7, 0x74, 0x23, 0x19, 0x39, 0x4D, 0x34, 0x57, 0x3D, 0xD3, 0x50, 0x15, 0xD9, 0x35, 0xED, 0x2A, 0x66, 0xCC, 0xB0, 0x6C, 0x03, 0x6B, 0xB1, 0x3C, 0x5F, 0x93, 0xD7, 0x58, 0x2D, 0x43, 0x0C, 0x9A, 0xA6, 0x77, 0xF8, 0x54, 0xBA, 0xD7, 0x25, 0xB7, 0xBE, 0xD4, 0xBA, 0xB5, 0x7D, 0x42, 0xD6, 0x25, 0x20, 0xE0, 0x59, 0xFC, 0x2C, 0x5D, 0xF7, 0x0C, 0x0D, 0x41, 0xA3, 0xB6, 0x9A, 0xCC, 0xA0, 0x26, 0x19, 0x6F, 0xCA, 0xB0, 0xD4, 0xEC, 0xC5, 0xA8, 0xD9, 0x3B, 0x96, 0x0B, 0x3C, 0x85, 0xDA, 0x59, 0x9A, 0x84, 0xA6, 0xFA, 0x95, 0xA5, 0xDB, 0xB5, 0xB8, 0x65, 0x3D, 0xC2, 0x3A, 0x1D, 0x0C, 0x9E, 0xAB, 0xF3, 0x83, 0xDD, 0x7A, 0xD5, 0xC2, 0xD0, 0x78, 0xB9, 0xAF, 0x54, 0x91, 0x56, 0xDF, 0x3D, 0xF4, 0x4F, 0x13, 0x6C, 0x70, 0x0F, 0xC4, 0xA3, 0x0D, 0x2F, 0x81, 0x67, 0x54, 0x70, 0x95, 0x4A, 0xF8, 0xF0, 0x90, 0x20, 0xD8, 0x10, 0xF5, 0xD4, 0x9E, 0x24, 0x95, 0x0D, 0xB8, 0x45, 0xEE, 0x8B, 0xC5, 0xAD, 0x01, 0x47, 0xCE, 0x2C, 0x21, 0x0D, 0xF7, 0x41, 0xC1, 0x6F, 0x7A, 0x41, 0xC9, 0x0F, 0x72, 0x85, 0x9A, 0xDF, 0xC9, 0x79, 0x65, 0xAF, 0x90, 0xAB, 0xF9, 0xCD, 0x72, 0xAE, 0xE9, 0xFB, 0xE5, 0x62, 0xC7, 0x2F, 0x16, 0xDA, 0xAD, 0xD2, 0x43, 0x68, 0x2C, 0x22, 0x8C, 0x8A, 0x7E, 0xFA, 0xCD, 0xA5, 0x0B, 0xAF, 0xA2, 0xE8, 0x7C, 0xF1, 0xE5, 0x45, 0x8D, 0x6F, 0x7C, 0x7D, 0x89, 0x96, 0x6F, 0xDB, 0x2E, 0x0D, 0x59, 0x94, 0x67, 0xEA, 0xEB, 0x4A, 0x5E, 0x11, 0x57, 0x5F, 0x5F, 0x8A, 0xA5, 0xED, 0x5F, 0x5F, 0x1C, 0x02, 0xA2, 0xF3, 0xA0, 0x52, 0xEA, 0xD6, 0xCB, 0xF5, 0x56, 0x25, 0x57, 0x2F, 0x37, 0xBB, 0x39, 0xAF, 0xDD, 0xAA, 0xE5, 0xEA, 0x41, 0xA5, 0x95, 0x6B, 0x57, 0x82, 0x6A, 0xBB, 0xDB, 0x0E, 0xFC, 0x5A, 0xBD, 0xFB, 0xD0, 0x75, 0x8E, 0x14, 0xD8, 0x6B, 0x96, 0x03, 0xAF, 0xD2, 0xA9, 0xE5, 0x2A, 0xC5, 0x20, 0xC8, 0x79, 0x95, 0x82, 0xA4, 0x5F, 0xAB, 0xE7, 0xAA, 0x5E, 0xA9, 0xD4, 0xF4, 0xAA, 0xCD, 0x5A, 0xC7, 0x6B, 0x3E, 0x5C, 0x6C, 0x63, 0x60, 0xE5, 0xA9, 0x7C, 0x2C, 0x62, 0x01, 0xE1, 0x55, 0xBC, 0x76, 0xFF, 0x01, 0x00, 0x00, 0xFF, 0xFF, 0x03, 0x00, 0x50, 0x4B, 0x03, 0x04, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0x0D, 0xD1, 0x90, 0x9F, 0xB6, 0x00, 0x00, 0x00, 0x1B, 0x01, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x5F, 0x72, 0x65, 0x6C, 0x73, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x4D, 0x61, 0x6E, 0x61, 0x67, 0x65, 0x72, 0x2E, 0x78, 0x6D, 0x6C, 0x2E, 0x72, 0x65, 0x6C, 0x73, 0x84, 0x8F, 0x4D, 0x0A, 0xC2, 0x30, 0x14, 0x84, 0xF7, 0x82, 0x77, 0x08, 0x6F, 0x6F, 0xD3, 0xBA, 0x10, 0x91, 0x26, 0xDD, 0x88, 0xD0, 0xAD, 0xD4, 0x03, 0x84, 0xE4, 0x35, 0x0D, 0x36, 0x3F, 0x24, 0x51, 0xEC, 0xED, 0x0D, 0xAE, 0x2C, 0x08, 0x2E, 0x87, 0x61, 0xBE, 0x99, 0x69, 0xBB, 0x97, 0x9D, 0xC9, 0x13, 0x63, 0x32, 0xDE, 0x31, 0x68, 0xAA, 0x1A, 0x08, 0x3A, 0xE9, 0x95, 0x71, 0x9A, 0xC1, 0x6D, 0xB8, 0xEC, 0x8E, 0x40, 0x52, 0x16, 0x4E, 0x89, 0xD9, 0x3B, 0x64, 0xB0, 0x60, 0x82, 0x8E, 0x6F, 0x37, 0xED, 0x15, 0x67, 0x91, 0x4B, 0x28, 0x4D, 0x26, 0x24, 0x52, 0x28, 0x2E, 0x31, 0x98, 0x72, 0x0E, 0x27, 0x4A, 0x93, 0x9C, 0xD0, 0x8A, 0x54, 0xF9, 0x80, 0xAE, 0x38, 0xA3, 0x8F, 0x56, 0xE4, 0x22, 0xA3, 0xA6, 0x41, 0xC8, 0xBB, 0xD0, 0x48, 0xF7, 0x75, 0x7D, 0xA0, 0xF1, 0x9B, 0x01, 0x7C, 0xC5, 0x24, 0xBD, 0x62, 0x10, 0x7B, 0xD5, 0x00, 0x19, 0x96, 0x50, 0x9A, 0xFF, 0xB3, 0xFD, 0x38, 0x1A, 0x89, 0x67, 0x2F, 0x1F, 0x16, 0x5D, 0xFE, 0x51, 0x41, 0x73, 0xD9, 0x85, 0x05, 0x28, 0xA2, 0xC6, 0xCC, 0xE0, 0x23, 0x9B, 0xAA, 0x4C, 0x04, 0xCA, 0x5B, 0xBA, 0xBA, 0xC4, 0xDF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x03, 0x00, 0x50, 0x4B, 0x01, 0x02, 0x2D, 0x00, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0xE9, 0xDE, 0x0F, 0xBF, 0xFF, 0x00, 0x00, 0x00, 0x1C, 0x02, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5B, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x5F, 0x54, 0x79, 0x70, 0x65, 0x73, 0x5D, 0x2E, 0x78, 0x6D, 0x6C, 0x50, 0x4B, 0x01, 0x02, 0x2D, 0x00, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0xA5, 0xD6, 0xA7, 0xE7, 0xC0, 0x00, 0x00, 0x00, 0x36, 0x01, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x01, 0x00, 0x00, 0x5F, 0x72, 0x65, 0x6C, 0x73, 0x2F, 0x2E, 0x72, 0x65, 0x6C, 0x73, 0x50, 0x4B, 0x01, 0x02, 0x2D, 0x00, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0x6B, 0x79, 0x96, 0x16, 0x83, 0x00, 0x00, 0x00, 0x8A, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x02, 0x00, 0x00, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x4D, 0x61, 0x6E, 0x61, 0x67, 0x65, 0x72, 0x2E, 0x78, 0x6D, 0x6C, 0x50, 0x4B, 0x01, 0x02, 0x2D, 0x00, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0xAA, 0x52, 0x25, 0xDF, 0xC6, 0x06, 0x00, 0x00, 0x8B, 0x1A, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD6, 0x02, 0x00, 0x00, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x31, 0x2E, 0x78, 0x6D, 0x6C, 0x50, 0x4B, 0x01, 0x02, 0x2D, 0x00, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0x0D, 0xD1, 0x90, 0x9F, 0xB6, 0x00, 0x00, 0x00, 0x1B, 0x01, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD0, 0x09, 0x00, 0x00, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x5F, 0x72, 0x65, 0x6C, 0x73, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x4D, 0x61, 0x6E, 0x61, 0x67, 0x65, 0x72, 0x2E, 0x78, 0x6D, 0x6C, 0x2E, 0x72, 0x65, 0x6C, 0x73, 0x50, 0x4B, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x5D, 0x01, 0x00, 0x00, 0xCB, 0x0A, 0x00, 0x00, 0x00, 0x00], [UInt8]((msg.getProperty(set: .common, lid: 0x000085C2) as Data?)!))
        XCTAssertFalse(msg.agingDontAgeMe!)
        XCTAssertEqual("", msg.subjectPrefix!)
        XCTAssertEqual("MSG Test File", msg.subject!)

        XCTAssertEqual(1, msg.recipients.count)
        XCTAssertEqual(0x00000000, (msg.recipients[0].entryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.recipients[0].entryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.recipients[0].entryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.recipients[0].entryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("time2talk@online-convert.com", (msg.recipients[0].entryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.recipients[0].entryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("time2talk@online-convert.com", (msg.recipients[0].entryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual("SMTP", msg.recipients[0].addressType!)
        XCTAssertEqual(.none, msg.recipients[0].recipientTrackStatus!)
        XCTAssertEqual(.mailUser, msg.recipients[0].objectType!)
        XCTAssertEqual(0, msg.recipients[0].recipientOrder!)
        XCTAssertEqual(.primaryRecipient, msg.recipients[0].recipientType!)
        XCTAssertFalse(msg.recipients[0].sendRichInfo!)
        XCTAssertEqual([0x00, 0x00, 0x00, 0x6F], [UInt8](msg.recipients[0].instanceKey!))
        XCTAssertEqual("time2talk@online-convert.com", msg.recipients[0].emailAddress!)
        XCTAssertEqual(.sendable, msg.recipients[0].recipientFlags!)
        XCTAssertEqual(0, (msg.recipients[0].getProperty(id: .tagRecipientResourceState) as UInt32?)!)
        XCTAssertEqual(0, msg.recipients[0].rowid!)
        XCTAssertEqual(0x00000000, (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("time2talk@online-convert.com", (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("time2talk@online-convert.com", (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual(0, msg.recipients[0].sendInternetEncoding!)
        XCTAssertEqual("time2talk@online-convert.com", msg.recipients[0].displayName!)
        XCTAssertEqual("time2talk@online-convert.com", msg.recipients[0].recipientDisplayName!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x54, 0x49, 0x4D, 0x45, 0x32, 0x54, 0x41, 0x4C, 0x4B, 0x40, 0x4F, 0x4E, 0x4C, 0x49, 0x4E, 0x45, 0x2D, 0x43, 0x4F, 0x4E, 0x56, 0x45, 0x52, 0x54, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.recipients[0].searchKey!))
        XCTAssertEqual([0x00, 0x00, 0x00, 0x00, 0x81, 0x2B, 0x1F, 0xA4, 0xBE, 0xA3, 0x10, 0x19, 0x9D, 0x6E, 0x00, 0xDD, 0x01, 0x0F, 0x54, 0x02, 0x00, 0x00, 0x01, 0x90, 0x74, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x32, 0x00, 0x74, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x6B, 0x00, 0x40, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x2D, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x74, 0x00, 0x2E, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x00, 0x00, 0x53, 0x00, 0x4D, 0x00, 0x54, 0x00, 0x50, 0x00, 0x00, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x32, 0x00, 0x74, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x6B, 0x00, 0x40, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x2D, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x74, 0x00, 0x2E, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x00, 0x00], [UInt8](msg.recipients[0].recordKey!))
        XCTAssertEqual(.mailUser, msg.recipients[0].displayType!)

        XCTAssertEqual(0, msg.attachments.count)
    }

    func testReadVikramarsid1() throws {
        let data = try getData(name: "vikramarsid/msg_parser/complete")
        let msg = try MsgFile(data: data)

        XCTAssertTrue(msg.readReceiptRequested!)
        XCTAssertEqual("Vikram Arsid", msg.sentRepresentingName!)
        XCTAssertEqual(1540836749.0, msg.clientSubmitTime!.timeIntervalSince1970)
        XCTAssertEqual("quarantine@hiddenfire.onmicrosoft.com;abuse@hiddenfire.onmicrosoft.com", msg.displayCc!)
        XCTAssertNotNil(msg.bodyHtml)
        XCTAssertEqual("😇😇😇😇Nokia Health is now Withings. Learn more [https://media.withings.com/email/permanent/withings-template/plus-white.png] <https://reallygoodemails.com/us/en/nokia>\r\n\r\n\r\n        [Withings]\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nSteel HR Sport\r\nFor serious sports & superior style\r\n[Steel HR Sport]<https://reallygoodemails.com/us/en/steel-hr-sport?utm_campaign=event_201809_steel-hr-sport_launch&utm_content=hero&utm_medium=email&utm_source=crm>\r\nOur newest hybrid smartwatch is here, and it comes with brand-new features dedicated to your workout, and the same incredible battery life of up to 25 days that you’ve come to expect from our heart rate tracking watches.\r\nSee it all<https://reallygoodemails.com/us/en/steel-hr-sport?utm_campaign=event_201809_steel-hr-sport_launch&utm_content=main&utm_medium=email&utm_source=crm>\r\n\r\n\r\n\r\n[Connected GPS]<https://reallygoodemails.com/us/en/steel-hr-sport?utm_campaign=event_201809_steel-hr-sport_launch&utm_content=gps&utm_medium=email&utm_source=crm>\r\nFollow your path\r\nWant to get a better idea of your adventures? Using your smartphone, Steel HR Sport can retrace your route on a map using connected GPS.\r\n\r\n\r\n\r\n\r\n[Heart Rate]<https://reallygoodemails.com/us/en/steel-hr-sport?utm_campaign=event_201809_steel-hr-sport_launch&utm_content=gps&utm_medium=email&utm_source=crm>\r\n[Heart Rate]<https://reallygoodemails.com/us/en/steel-hr-sport?utm_campaign=event_201809_steel-hr-sport_launch&utm_content=gps&utm_medium=email&utm_source=crm>\r\nGet in the zone\r\nDuring workouts you can monitor continuous heart-rate right on the watch screen, and then find the time spent in each heart-rate zone in the app.\r\n\r\n\r\n\r\n\r\n[Multi Sport]<https://reallygoodemails.com/us/en/steel-hr-sport?utm_campaign=event_201809_steel-hr-sport_launch&utm_content=gps&utm_medium=email&utm_source=crm>\r\nMultisport ready\r\nChoose from 30 activities right on the watch when you activate training mode.\r\n\r\n\r\n\r\n\r\n[Fitness level]<https://reallygoodemails.com/us/en/steel-hr-sport?utm_campaign=event_201809_steel-hr-sport_launch&utm_content=gps&utm_medium=email&utm_source=crm>\r\nAssess yourself\r\nIf you want more insights into your cardiovascular capacity, Steel HR Sport delivers a Fitness Level score via VO2 max estimation.\r\n\r\n\r\n\r\n\r\nMake it yours\r\nSteel HR Sport is available right now in black or white, and comes with a drilled silicone wristband. But if you want to level up your style, you may want to consider adding an additional band in premium curved leather.\r\nStarting at $199.95\r\nBuy now<https://reallygoodemails.com/us/en/steel-hr-sport/shop?utm_campaign=event_201809_steel-hr-sport_launch&utm_content=second&utm_medium=email&utm_source=crm>\r\n\r\n[feature]<https://withings.com/steel-hr-sport/shop?utm_source=crm&utm_medium=email&utm_campaign=event_201809_steel-hr-sport_launch&utm_content=watches>\r\n\r\n\r\n\r\nYou have received this email because you have a Withings account.\r\nThis is an email related to the news of the brand. To unsubscribe from similar emails, click here.<https://reallygoodemails.com/wp-content/uploads/steel-hr-sport-is-here.html#>\r\nTo manage your email preferences, please visit our notification center.<https://reallygoodemails.com/wp-content/uploads/steel-hr-sport-is-here.html#>\r\nTerms and Conditions<https://reallygoodemails.com/us/en/legal/services-terms-and-conditions> | Privacy<https://reallygoodemails.com/us/en/legal/privacy>\r\nWithings\r\n2, rue Maurice Hartmann\r\n92130 Issy-Les-Moulineaux\r\nFRANCE\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n[ace hotel] <http://www.acehotel.com/>\r\n\r\n\r\n\r\n[Poster Image] <http://www.acehotel.com/about/mattymatheson>\r\n\r\n\r\n\r\nLobster dinner. Prime rib. \"French foods.\" Schnitzel. Some but not all of the things you'll encounter at The Greatest Cookbook Tour of All Time, a five-city gastronomic tour with Chef Matty Matheson in celebration of his first cookbook, Matty Matheson: A Cookbook<http://www.abramsbooks.com/mattymatheson/>.\r\n\r\nChef Matty will be making stops at an Ace Hotel near you for a smorgasbord of delights, including: book signings, DJ sets, cocktail parties and five glorious dinners.\r\n\r\nWe were lucky enough to talk to Matty about eating clubhouse sandwiches. Eating clam chowder. Eating clubhouse sandwiches. Read the interview on the Ace Blog<http://blog.acehotel.com/post/178317611883/interview-matty-matheson> and find full tour details here<http://www.acehotel.com/about/mattymatheson?utm_campaign=PAN+-+2018+-+Matty+Matheson&utm_medium=shortlink&utm_source=&utm_content=www.acehotel.com%2Fmattymatheson>.\r\n\r\n\r\n[Pittsburgh Image] <http://www.acehotel.com/calendar/pittsburgh/sunday-supper-matty-matheson-cookbook-release-party>    [New York Image]  <https://www.acehotel.com/calendar/newyork/tagged/mattymatheson>\r\n\r\n\r\n\r\n[Chicago Image] <https://www.acehotel.com/calendar/chicago/evening-matty-matheson-chicago>      [http://d31hzlhk6di2h5.cloudfront.net/20180921/12/8c/be/36/582f0ce4b5e2f1910eaf6ae3_630x630.png]  <http://www.acehotel.com/calendar/neworleans/matty-matheson-x-ace-new-orleans>\r\n\r\n\r\n\r\n[Los Angeles Image] <https://www.acehotel.com/calendar/losangeles/tagged/mattymatheson>         [Ace Hotel Image]  <http://blog.acehotel.com/post/178317611883/interview-matty-matheson>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nInstagram<https://www.instagram.com/acehotel/>\r\nFacebook<https://www.facebook.com/acehotel>\r\nTwitter<https://twitter.com/acehotel>\r\n        Ace Hotel<http://www.acehotel.com/>\r\nContact<http://www.acehotel.com/contact>\r\nShop<https://shop.acehotel.com/>\r\nBlog<http://blog.acehotel.com/>\r\n\r\nKyoto<http://www.acehotel.com/kyoto>\r\nChicago<http://www.acehotel.com/chicago>\r\nNew Orleans<http://www.acehotel.com/neworleans>\r\nPittsburgh<http://www.acehotel.com/pittsburgh>\r\nLos Angeles<http://www.acehotel.com/losangeles>\r\n        London<http://www.acehotel.com/london>\r\nPalm Springs<http://www.acehotel.com/palmsprings>\r\nNew York<http://www.acehotel.com/newyork>\r\nPortland<http://www.acehotel.com/portland>\r\nSeattle<http://www.acehotel.com/seattle>\r\n\r\n\r\n[Atelier Ace]\r\n3191 Casitas Ave #165 | Los Angeles, CA 90039<https://reallygoodemails.com/wp-content/uploads/ace-hotel-x-matty-matheson-the-greatest-cookbook-tour-of-all-time.html#>\r\nAdd us to your address book<mailto:hello@acehotel.com>\r\nThis message was intended for hello@SmilesDavis.yeah<https://reallygoodemails.com/wp-content/uploads/ace-hotel-x-matty-matheson-the-greatest-cookbook-tour-of-all-time.html#>\r\nYou're receiving this email because you opted-in to stay abreast about Ace Hotel phenomena, happenings and curiosities.\r\n\r\nCustomize<https://reallygoodemails.com/wp-content/uploads/ace-hotel-x-matty-matheson-the-greatest-cookbook-tour-of-all-time.html#>     Forward<https://reallygoodemails.com/wp-content/uploads/ace-hotel-x-matty-matheson-the-greatest-cookbook-tour-of-all-time.html#>     Unsubscribe<https://reallygoodemails.com/wp-content/uploads/ace-hotel-x-matty-matheson-the-greatest-cookbook-tour-of-all-time.html#>\r\nEMAIL DISPLAYED INCORRECTLY? OPEN IT IN YOUR BROWSER<https://reallygoodemails.com/wp-content/uploads/ace-hotel-x-matty-matheson-the-greatest-cookbook-tour-of-all-time.html#>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        [cid:cec29daa-4b5f-4f70-b975-9f2a4b2e9e04]\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        🌋\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        😃\r\n\r\n\r\n", msg.body!)
        XCTAssertEqual(1540837011.0, msg.creationTime!.timeIntervalSince1970)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x40, 0x46, 0x45, 0x47, 0x52, 0x41, 0x50, 0x48, 0x2E, 0x4F, 0x4E, 0x4D, 0x49, 0x43, 0x52, 0x4F, 0x53, 0x4F, 0x46, 0x54, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.senderSearchKey!))
        XCTAssertEqual("", msg.subjectPrefix!)
        XCTAssertEqual("Test Multiple attachments complete email!!", msg.normalizedSubject!)
        XCTAssertEqual("<BL0PR1701MB26411CF32259103CC8B78AD8EEF30@BL0PR1701MB2641.namprd17.prod.outlook.com>", (msg.getProperty(id: .tagInternetMessageId) as String?)!)
        XCTAssertTrue(msg.originatorDeliveryReportRequested!)
        XCTAssertEqual("Vikram Arsid", (msg.getProperty(id: .tagSenderName) as String?)!)
        XCTAssertEqual("SMTP", (msg.getProperty(id: .tagSenderAddressType) as String?)!)
        XCTAssertEqual("Test Multiple attachments complete email!!", msg.conversationTopic!)
        XCTAssertTrue(msg.hasAttachments!)
        XCTAssertEqual("qademo@hiddenfire.onmicrosoft.com;invotas.cnb@gmail.com", msg.displayTo!)
        XCTAssertEqual(.normal, msg.sensitivity!)
        XCTAssertNotNil(msg.transportMessageHeaders)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x40, 0x46, 0x45, 0x47, 0x52, 0x41, 0x50, 0x48, 0x2E, 0x4F, 0x4E, 0x4D, 0x49, 0x43, 0x52, 0x4F, 0x53, 0x4F, 0x46, 0x54, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.sentRepresentingSearchKey!))
        XCTAssertEqual(.high, msg.importance!)
        XCTAssertEqual([0x76, 0xB2, 0x11, 0xB4, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE4, 0x84, 0x16, 0xCA, 0x3D, 0xD6, 0x08], [UInt8](msg.searchKey!))
        XCTAssertEqual("", msg.sentRepresentingAddressType!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00010E79)], msg.storeSupportMask)
        XCTAssertEqual("admin@fegraph.onmicrosoft.com", msg.senderEmailAddress!)
        XCTAssertNil(msg.agingDontAgeMe)
        XCTAssertEqual("Test Multiple attachments complete email!!", msg.subject!)
        XCTAssertEqual("admin@fegraph.onmicrosoft.com", msg.sentRepresentingEmailAddress!)
        XCTAssertNotNil(msg.rtfCompressed)
        XCTAssertEqual(1540836802.0, msg.messageDeliveryTime!.timeIntervalSince1970)
        XCTAssertEqual(1540837011.0, msg.lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual(0x00000000, (msg.senderEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.senderEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.senderEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.senderEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("admin@fegraph.onmicrosoft.com", (msg.senderEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.senderEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("admin@fegraph.onmicrosoft.com", (msg.senderEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual(65001, msg.internetCodepage!)
        XCTAssertEqual([.read, .hasAttachment], msg.messageFlags)
        XCTAssertTrue(msg.rtfInSync!)
        XCTAssertEqual("IPM.Note", msg.messageClass!)
        XCTAssertEqual([.read], msg.access)
        XCTAssertEqual("", msg.displayBcc!)
        XCTAssertEqual(.readOnly, msg.accessLevel!)

        XCTAssertEqual(4, msg.recipients.count)
        XCTAssertEqual("qademo@hiddenfire.onmicrosoft.com", msg.recipients[0].displayName!)
        XCTAssertEqual(0x00000000, (msg.recipients[0].entryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.recipients[0].entryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.recipients[0].entryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.recipients[0].entryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("qademo@hiddenfire.onmicrosoft.com", (msg.recipients[0].entryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.recipients[0].entryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("qademo@hiddenfire.onmicrosoft.com", (msg.recipients[0].entryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual([0x00, 0x00, 0x00, 0x8F], [UInt8](msg.recipients[0].instanceKey!))
        XCTAssertEqual(0, msg.recipients[0].rowid!)
        XCTAssertEqual(.primaryRecipient, msg.recipients[0].recipientType!)
        XCTAssertEqual("SMTP", msg.recipients[0].addressType!)
        XCTAssertEqual("qademo@hiddenfire.onmicrosoft.com", msg.recipients[0].emailAddress!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x51, 0x41, 0x44, 0x45, 0x4D, 0x4F, 0x40, 0x48, 0x49, 0x44, 0x44, 0x45, 0x4E, 0x46, 0x49, 0x52, 0x45, 0x2E, 0x4F, 0x4E, 0x4D, 0x49, 0x43, 0x52, 0x4F, 0x53, 0x4F, 0x46, 0x54, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.recipients[0].searchKey!))

        XCTAssertEqual("SMTP", msg.recipients[1].addressType!)
        XCTAssertEqual([0x03, 0x00, 0x00, 0x8F], [UInt8](msg.recipients[1].instanceKey!))
        XCTAssertEqual(1, msg.recipients[1].rowid!)
        XCTAssertEqual(0x00000000, (msg.recipients[1].entryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.recipients[1].entryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.recipients[1].entryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.recipients[1].entryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("invotas.cnb@gmail.com", (msg.recipients[1].entryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.recipients[1].entryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("invotas.cnb@gmail.com", (msg.recipients[1].entryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual(.primaryRecipient, msg.recipients[1].recipientType!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x49, 0x4E, 0x56, 0x4F, 0x54, 0x41, 0x53, 0x2E, 0x43, 0x4E, 0x42, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.recipients[1].searchKey!))
        XCTAssertEqual("invotas.cnb@gmail.com", msg.recipients[1].emailAddress!)
        XCTAssertEqual("invotas.cnb@gmail.com", msg.recipients[1].displayName!)

        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x51, 0x55, 0x41, 0x52, 0x41, 0x4E, 0x54, 0x49, 0x4E, 0x45, 0x40, 0x48, 0x49, 0x44, 0x44, 0x45, 0x4E, 0x46, 0x49, 0x52, 0x45, 0x2E, 0x4F, 0x4E, 0x4D, 0x49, 0x43, 0x52, 0x4F, 0x53, 0x4F, 0x46, 0x54, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.recipients[2].searchKey!))
        XCTAssertEqual("SMTP", msg.recipients[2].addressType!)
        XCTAssertEqual(0x00000000, (msg.recipients[2].entryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.recipients[2].entryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.recipients[2].entryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.recipients[2].entryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("quarantine@hiddenfire.onmicrosoft.com", (msg.recipients[2].entryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.recipients[2].entryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("quarantine@hiddenfire.onmicrosoft.com", (msg.recipients[2].entryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual(2, msg.recipients[2].rowid!)
        XCTAssertEqual(.ccRecipient, msg.recipients[2].recipientType!)
        XCTAssertEqual([0x06, 0x00, 0x00, 0x8F], [UInt8](msg.recipients[2].instanceKey!))
        XCTAssertEqual("quarantine@hiddenfire.onmicrosoft.com", msg.recipients[2].emailAddress!)
        XCTAssertEqual("quarantine@hiddenfire.onmicrosoft.com", msg.recipients[2].displayName!)

        XCTAssertEqual("abuse@hiddenfire.onmicrosoft.com", msg.recipients[3].emailAddress!)
        XCTAssertEqual("SMTP", msg.recipients[3].addressType!)
        XCTAssertEqual([0x09, 0x00, 0x00, 0x8F], [UInt8](msg.recipients[3].instanceKey!))
        XCTAssertEqual(.ccRecipient, msg.recipients[3].recipientType!)
        XCTAssertEqual(3, msg.recipients[3].rowid!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x41, 0x42, 0x55, 0x53, 0x45, 0x40, 0x48, 0x49, 0x44, 0x44, 0x45, 0x4E, 0x46, 0x49, 0x52, 0x45, 0x2E, 0x4F, 0x4E, 0x4D, 0x49, 0x43, 0x52, 0x4F, 0x53, 0x4F, 0x46, 0x54, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.recipients[3].searchKey!))
        XCTAssertEqual("abuse@hiddenfire.onmicrosoft.com", msg.recipients[3].displayName!)
        XCTAssertEqual(0x00000000, (msg.recipients[3].entryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.recipients[3].entryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.recipients[3].entryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.recipients[3].entryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("abuse@hiddenfire.onmicrosoft.com", (msg.recipients[3].entryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.recipients[3].entryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("abuse@hiddenfire.onmicrosoft.com", (msg.recipients[3].entryId as? OneOffEntryID)!.emailAddress)

        XCTAssertEqual(10, msg.attachments.count)
        XCTAssertEqual(0, msg.attachments[0].attachmentLinkId!)
        XCTAssertEqual("Create a database on Azure in 90 seconds", msg.attachments[0].attachFilename!)
        XCTAssertEqual("Create a database on Azure in 90 seconds", msg.attachments[0].displayName!)
        XCTAssertEqual(.readOnly, msg.attachments[0].accessLevel!)
        XCTAssertEqual("message/rfc822", msg.attachments[0].attachMimeTag!)
        XCTAssertEqual(1540837011.0, msg.attachments[0].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual(1540837011.0, msg.attachments[0].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual([0x00, 0x00, 0x00, 0x00], [UInt8](msg.attachments[0].recordKey!))
        XCTAssertNotNil(msg.attachments[0].attachDataBinary)
        XCTAssertEqual(.embeddedMessage, msg.attachments[0].attachMethod!)
        XCTAssertEqual([.read], msg.attachments[0].access)
        XCTAssertEqual(4294967295, msg.attachments[0].renderingPosition!)
        XCTAssertEqual(0, msg.attachments[0].attachNumber!)
        XCTAssertEqual(0x00000000, msg.attachments[0].attachmentFlags!)
        XCTAssertEqual(245276, msg.attachments[0].attachSize!)
        XCTAssertEqual(1540837011.0, msg.attachments[0].lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[0].storeSupportMask)
        XCTAssertEqual(.attachment, msg.attachments[0].objectType!)
        XCTAssertEqual([], msg.attachments[0].attachFlags)
        XCTAssertEqual(1540837011.0, msg.attachments[0].creationTime!.timeIntervalSince1970)

        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[1].storeSupportMask)
        XCTAssertEqual("How fast can you deploy a web app?", msg.attachments[1].displayName!)
        XCTAssertNotNil(msg.attachments[1].attachDataBinary)
        XCTAssertEqual(1540837011.0, msg.attachments[1].creationTime!.timeIntervalSince1970)
        XCTAssertEqual(1, msg.attachments[1].attachNumber!)
        XCTAssertEqual(.embeddedMessage, msg.attachments[1].attachMethod!)
        XCTAssertEqual([.read], msg.attachments[1].access)
        XCTAssertEqual(0x00000000, msg.attachments[1].attachmentFlags!)
        XCTAssertEqual(1540837011.0, msg.attachments[1].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual(.attachment, msg.attachments[1].objectType!)
        XCTAssertEqual(.readOnly, msg.attachments[1].accessLevel!)
        XCTAssertEqual([], msg.attachments[1].attachFlags)
        XCTAssertEqual("How fast can you deploy a web app?", msg.attachments[1].attachFilename!)
        XCTAssertEqual("message/rfc822", msg.attachments[1].attachMimeTag!)
        XCTAssertEqual(1540837011.0, msg.attachments[1].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual([0x01, 0x00, 0x00, 0x00], [UInt8](msg.attachments[1].recordKey!))
        XCTAssertEqual(232988, msg.attachments[1].attachSize!)
        XCTAssertEqual(4294967295, msg.attachments[1].renderingPosition!)
        XCTAssertEqual(1540837011.0, msg.attachments[1].lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual(0, msg.attachments[1].attachmentLinkId!)

        XCTAssertEqual(1540837011.0, msg.attachments[2].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual("Virtual machines for any scenario", msg.attachments[2].attachFilename!)
        XCTAssertEqual([0x02, 0x00, 0x00, 0x00], [UInt8](msg.attachments[2].recordKey!))
        XCTAssertEqual(1540837011.0, msg.attachments[2].lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual([.read], msg.attachments[2].access)
        XCTAssertEqual(.embeddedMessage, msg.attachments[2].attachMethod!)
        XCTAssertEqual(4294967295, msg.attachments[2].renderingPosition!)
        XCTAssertEqual(247324, msg.attachments[2].attachSize!)
        XCTAssertEqual(.attachment, msg.attachments[2].objectType!)
        XCTAssertEqual("message/rfc822", msg.attachments[2].attachMimeTag!)
        XCTAssertEqual(0, msg.attachments[2].attachmentLinkId!)
        XCTAssertEqual(1540837011.0, msg.attachments[2].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual(.readOnly, msg.attachments[2].accessLevel!)
        XCTAssertEqual("Virtual machines for any scenario", msg.attachments[2].displayName!)
        XCTAssertNotNil(msg.attachments[2].attachDataBinary)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[2].storeSupportMask)
        XCTAssertEqual(1540837011.0, msg.attachments[2].creationTime!.timeIntervalSince1970)
        XCTAssertEqual([], msg.attachments[2].attachFlags)
        XCTAssertEqual(2, msg.attachments[2].attachNumber!)
        XCTAssertEqual(0x00000000, msg.attachments[2].attachmentFlags!)

        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[3].storeSupportMask)
        XCTAssertEqual("A few ways to get started with Azure", msg.attachments[3].displayName!)
        XCTAssertNotNil(msg.attachments[3].attachDataBinary)
        XCTAssertEqual(1540837011.0, msg.attachments[3].creationTime!.timeIntervalSince1970)
        XCTAssertEqual(.embeddedMessage, msg.attachments[3].attachMethod!)
        XCTAssertEqual(3, msg.attachments[3].attachNumber!)
        XCTAssertEqual([.read], msg.attachments[3].access)
        XCTAssertEqual([], msg.attachments[3].attachFlags)
        XCTAssertEqual(1540837011.0, msg.attachments[3].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual(0x00000000, msg.attachments[3].attachmentFlags!)
        XCTAssertEqual(.readOnly, msg.attachments[3].accessLevel!)
        XCTAssertEqual(.attachment, msg.attachments[3].objectType!)
        XCTAssertEqual("A few ways to get started with Azure", msg.attachments[3].attachFilename!)
        XCTAssertEqual("message/rfc822", msg.attachments[3].attachMimeTag!)
        XCTAssertEqual(1540837011.0, msg.attachments[3].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual([0x03, 0x00, 0x00, 0x00], [UInt8](msg.attachments[3].recordKey!))
        XCTAssertEqual(260124, msg.attachments[3].attachSize!)
        XCTAssertEqual(4294967295, msg.attachments[3].renderingPosition!)
        XCTAssertEqual(1540837011.0, msg.attachments[3].lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual(0, msg.attachments[3].attachmentLinkId!)

        XCTAssertEqual(1540837011.0, msg.attachments[4].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual("Welcome to Azure Security Center", msg.attachments[4].attachFilename!)
        XCTAssertEqual([0x04, 0x00, 0x00, 0x00], [UInt8](msg.attachments[4].recordKey!))
        XCTAssertEqual(1540837011.0, msg.attachments[4].lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual([.read], msg.attachments[4].access)
        XCTAssertEqual(.embeddedMessage, msg.attachments[4].attachMethod!)
        XCTAssertEqual(4294967295, msg.attachments[4].renderingPosition!)
        XCTAssertEqual(173084, msg.attachments[4].attachSize!)
        XCTAssertEqual(.attachment, msg.attachments[4].objectType!)
        XCTAssertEqual("message/rfc822", msg.attachments[4].attachMimeTag!)
        XCTAssertEqual(0, msg.attachments[4].attachmentLinkId!)
        XCTAssertEqual(1540837011.0, msg.attachments[4].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual(.readOnly, msg.attachments[4].accessLevel!)
        XCTAssertEqual("Welcome to Azure Security Center", msg.attachments[4].displayName!)
        XCTAssertNotNil(msg.attachments[4].attachDataBinary)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[4].storeSupportMask)
        XCTAssertEqual(1540837011.0, msg.attachments[4].creationTime!.timeIntervalSince1970)
        XCTAssertEqual([], msg.attachments[4].attachFlags)
        XCTAssertEqual(4, msg.attachments[4].attachNumber!)
        XCTAssertEqual(0x00000000, msg.attachments[4].attachmentFlags!)

        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[5].storeSupportMask)
        XCTAssertEqual("Welcome to your Azure free account", msg.attachments[5].displayName!)
        XCTAssertNotNil(msg.attachments[5].attachDataBinary)
        XCTAssertEqual(1540837011.0, msg.attachments[5].creationTime!.timeIntervalSince1970)
        XCTAssertEqual(.embeddedMessage, msg.attachments[5].attachMethod!)
        XCTAssertEqual(5, msg.attachments[5].attachNumber!)
        XCTAssertEqual([.read], msg.attachments[5].access)
        XCTAssertEqual([], msg.attachments[5].attachFlags)
        XCTAssertEqual(1540837011.0, msg.attachments[5].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual(0x00000000, msg.attachments[5].attachmentFlags!)
        XCTAssertEqual(.readOnly, msg.attachments[5].accessLevel!)
        XCTAssertEqual(.attachment, msg.attachments[5].objectType!)
        XCTAssertEqual("Welcome to your Azure free account", msg.attachments[5].attachFilename!)
        XCTAssertEqual("message/rfc822", msg.attachments[5].attachMimeTag!)
        XCTAssertEqual(1540837011.0, msg.attachments[5].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual([0x05, 0x00, 0x00, 0x00], [UInt8](msg.attachments[5].recordKey!))
        XCTAssertEqual(226332, msg.attachments[5].attachSize!)
        XCTAssertEqual(4294967295, msg.attachments[5].renderingPosition!)
        XCTAssertEqual(1540837011.0, msg.attachments[5].lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual(0, msg.attachments[5].attachmentLinkId!)

        XCTAssertEqual(1540837011.0, msg.attachments[6].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual(0x00000000, msg.attachments[6].attachmentFlags!)
        XCTAssertEqual("[MS-OXP.docx", msg.attachments[6].attachFilename!)
        XCTAssertEqual([0x06, 0x00, 0x00, 0x00], [UInt8](msg.attachments[6].recordKey!))
        XCTAssertEqual(1540837011.0, msg.attachments[6].lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual([.read], msg.attachments[6].access)
        XCTAssertEqual(.byValue, msg.attachments[6].attachMethod!)
        XCTAssertEqual(4294967295, msg.attachments[6].renderingPosition!)
        XCTAssertEqual(319382, msg.attachments[6].attachSize!)
        XCTAssertEqual(.attachment, msg.attachments[6].objectType!)
        XCTAssertEqual("application/vnd.openxmlformats-officedocument.wordprocessingml.document", msg.attachments[6].attachMimeTag!)
        XCTAssertEqual(0, msg.attachments[6].attachmentLinkId!)
        XCTAssertEqual(1540837011.0, msg.attachments[6].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual(.readOnly, msg.attachments[6].accessLevel!)
        XCTAssertEqual("[MS-OXPROPS]-181001.docx", msg.attachments[6].attachLongFilename!)
        XCTAssertEqual("[MS-OXPROPS]-181001.docx", msg.attachments[6].displayName!)
        XCTAssertNotNil(msg.attachments[6].attachDataBinary)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[6].storeSupportMask)
        XCTAssertEqual(1540837011.0, msg.attachments[6].creationTime!.timeIntervalSince1970)
        XCTAssertEqual([], msg.attachments[6].attachFlags)
        XCTAssertEqual(6, msg.attachments[6].attachNumber!)
        XCTAssertEqual(".docx", msg.attachments[6].attachExtension!)

        XCTAssertEqual(".txt", msg.attachments[7].attachExtension!)
        XCTAssertEqual(1540837011.0, msg.attachments[7].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual(1540837011.0, msg.attachments[7].creationTime!.timeIntervalSince1970)
        XCTAssertEqual([], msg.attachments[7].attachFlags)
        XCTAssertEqual(1540837011.0, msg.attachments[7].lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual([.read], msg.attachments[7].access)
        XCTAssertEqual(.byValue, msg.attachments[7].attachMethod!)
        XCTAssertEqual(4294967295, msg.attachments[7].renderingPosition!)
        XCTAssertEqual(688157, msg.attachments[7].attachSize!)
        XCTAssertEqual(.attachment, msg.attachments[7].objectType!)
        XCTAssertEqual("text/plain", msg.attachments[7].attachMimeTag!)
        XCTAssertEqual(0, msg.attachments[7].attachmentLinkId!)
        XCTAssertEqual(1540837011.0, msg.attachments[7].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual(.readOnly, msg.attachments[7].accessLevel!)
        XCTAssertEqual("[MS-OXPROPS].txt", msg.attachments[7].attachLongFilename!)
        XCTAssertEqual("[MS-OXPR.txt", msg.attachments[7].attachFilename!)
        XCTAssertEqual("[MS-OXPROPS].txt", msg.attachments[7].displayName!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[7].storeSupportMask)
        XCTAssertNotNil(msg.attachments[7].attachDataBinary)
        XCTAssertEqual([0x07, 0x00, 0x00, 0x00], [UInt8](msg.attachments[7].recordKey!))
        XCTAssertEqual(7, msg.attachments[7].attachNumber!)
        XCTAssertEqual(0x00000000, msg.attachments[7].attachmentFlags!)

        XCTAssertNotNil(msg.attachments[8].attachDataBinary)
        XCTAssertEqual(.byValue, msg.attachments[8].attachMethod!)
        XCTAssertEqual(.readOnly, msg.attachments[8].accessLevel!)
        XCTAssertEqual(1540837011.0, msg.attachments[8].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual(.attachment, msg.attachments[8].objectType!)
        XCTAssertEqual(6934371, msg.attachments[8].attachSize!)
        XCTAssertEqual(0, msg.attachments[8].attachmentLinkId!)
        XCTAssertEqual([.read], msg.attachments[8].access)
        XCTAssertEqual(8, msg.attachments[8].attachNumber!)
        XCTAssertEqual("[MS-OXPR.pdf", msg.attachments[8].attachFilename!)
        XCTAssertEqual(1540837011.0, msg.attachments[8].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[8].storeSupportMask)
        XCTAssertEqual(0x00000000, msg.attachments[8].attachmentFlags!)
        XCTAssertEqual(".pdf", msg.attachments[8].attachExtension!)
        XCTAssertEqual([0x08, 0x00, 0x00, 0x00], [UInt8](msg.attachments[8].recordKey!))
        XCTAssertEqual(1540837011.0, msg.attachments[8].creationTime!.timeIntervalSince1970)
        XCTAssertEqual("[MS-OXPROPS].pdf", msg.attachments[8].displayName!)
        XCTAssertEqual(1540837011.0, msg.attachments[8].lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual("[MS-OXPROPS].pdf", msg.attachments[8].attachLongFilename!)
        XCTAssertEqual(4294967295, msg.attachments[8].renderingPosition!)
        XCTAssertEqual("application/pdf", msg.attachments[8].attachMimeTag!)
        XCTAssertEqual([], msg.attachments[8].attachFlags)

        XCTAssertEqual([.renderedInBody], msg.attachments[9].attachFlags)
        XCTAssertNotNil(msg.attachments[9].attachDataBinary)
        XCTAssertEqual(.readOnly, msg.attachments[9].accessLevel!)
        XCTAssertEqual("hugues-de-buyer-mimeure-313867-unsplash.jpg", msg.attachments[9].displayName!)
        XCTAssertEqual("image/jpeg", msg.attachments[9].attachMimeTag!)
        XCTAssertEqual(1540837011.0, msg.attachments[9].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual("cec29daa-4b5f-4f70-b975-9f2a4b2e9e04", msg.attachments[9].attachContentId!)
        XCTAssertEqual("hugues-de-buyer-mimeure-313867-unsplash.jpg", msg.attachments[9].attachLongFilename!)
        XCTAssertEqual(1540837011.0, msg.attachments[9].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual([0x09, 0x00, 0x00, 0x00], [UInt8](msg.attachments[9].recordKey!))
        XCTAssertEqual(1540837011.0, msg.attachments[9].lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual(.byValue, msg.attachments[9].attachMethod!)
        XCTAssertEqual(.attachment, msg.attachments[9].objectType!)
        XCTAssertEqual(4294967295, msg.attachments[9].renderingPosition!)
        XCTAssertEqual(6136385, msg.attachments[9].attachSize!)
        XCTAssertEqual([.read], msg.attachments[9].access)
        XCTAssertEqual(0, msg.attachments[9].attachmentLinkId!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[9].storeSupportMask)
        XCTAssertEqual(0x00000000, msg.attachments[9].attachmentFlags!)
        XCTAssertEqual(9, msg.attachments[9].attachNumber!)
        XCTAssertEqual(1540837011.0, msg.attachments[9].creationTime!.timeIntervalSince1970)
        XCTAssertEqual([], [UInt8](msg.attachments[9].attachEncoding!))
    }

    func testReadVikramarsid2() throws {
        let data = try getData(name: "vikramarsid/msg_parser/other")
        let msg = try MsgFile(data: data)
    
        XCTAssertEqual("Mail Delivery Subsystem", msg.sentRepresentingName!)
        XCTAssertEqual(0x00000000, (msg.sentRepresentingEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.sentRepresentingEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.sentRepresentingEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.sentRepresentingEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("Mail Delivery Subsystem", (msg.sentRepresentingEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.sentRepresentingEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("mailer-daemon@tjdpf.org.cn", (msg.sentRepresentingEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual("Hergenroder, Christi", (msg.getProperty(id: .tagCreatorSimpleDisplayName) as String?)!)
        XCTAssertEqual("投递状态通知 (Failure Notice)", msg.conversationTopic!)
        XCTAssertEqual([0x5F, 0x79, 0xDA, 0xD2, 0xAD, 0xF7, 0x7F, 0x49, 0xB1, 0x08, 0xDC, 0x91, 0xE2, 0xAF, 0x7E, 0x22], [UInt8]((msg.getProperty(id: .unknown0x0E4C) as Data?)!))
        XCTAssertEqual("Hergenroder, Christi", (msg.getProperty(id: .tagLastModifierSimpleDisplayName) as String?)!)
        XCTAssertEqual("mailer-daemon@tjdpf.org.cn", msg.sentRepresentingSmtpAddress!)
        XCTAssertEqual(0x00000000, (msg.senderEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.senderEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.senderEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.senderEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("Mail Delivery Subsystem", (msg.senderEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.senderEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("mailer-daemon@tjdpf.org.cn", (msg.senderEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x4D, 0x41, 0x49, 0x4C, 0x45, 0x52, 0x2D, 0x44, 0x41, 0x45, 0x4D, 0x4F, 0x4E, 0x40, 0x54, 0x4A, 0x44, 0x50, 0x46, 0x2E, 0x4F, 0x52, 0x47, 0x2E, 0x43, 0x4E, 0x00], [UInt8](msg.sentRepresentingSearchKey!))
        XCTAssertEqual("Hi. This is an automatically generated Delivery Status Notification at\r\ntjdpf.org.cn\r\n\r\nI'm afraid I was not able to deliver your message to the following\r\nrecipient: \r\nhp_lsz@tjdpf.org.cn\r\n\r\nThis is a permanent error, I've given up. Sorry it did not work out.\r\n\r\nThe error that the other server returned was:\r\nThe recipients is locked. (User Locked)\r\n\r\n---- Attachment is a copy of the message.\r\n\r\n【这是服务器 tjdpf.org.cn 自动产生的投递状态通知】 \r\n\r\n到以下收信人地址的邮件投递失败： \r\nhp_lsz@tjdpf.org.cn\r\n\r\n对方服务器无法正常接收或者拒绝接收这封邮件。 \r\n这是一个永久性的错误，服务器已经放弃投递。 \r\n\r\n对方服务器返回的错误提示： \r\nThe recipients is locked. (User Locked)\r\n\r\n---- 【附件是您所发邮件的原件】 \r\n\r\n\r\n", msg.body!)
        XCTAssertEqual("<99d78a$k8gjl@esa2.mentor.iphmx.com>", (msg.getProperty(id: .tagInternetMessageId) as String?)!)
        XCTAssertEqual("christi_hergenroder@mentor.com", msg.internetAccountName!)
        XCTAssertEqual("mailer-daemon@tjdpf.org.cn", msg.sentRepresentingEmailAddress!)
        XCTAssertEqual([0x0B, 0xEB, 0xE8, 0xCF, 0x49, 0xAE, 0xB3, 0x4A, 0xAE, 0xA0, 0x6F, 0x82, 0x94, 0x4B, 0xCF, 0x8A], [UInt8](msg.searchKey!))
        XCTAssertEqual(.normal, msg.importance!)
        XCTAssertEqual("IPM.Note", msg.messageClass!)
        XCTAssertEqual(936, msg.messageCodepage!)
        XCTAssertEqual("SMTP", (msg.getProperty(id: .tagSenderAddressType) as String?)!)
        XCTAssertEqual(0, (msg.getProperty(id: .PR_CREATOR_FLAG) as UInt32?)!)
        XCTAssertEqual("", msg.displayBcc!)
        XCTAssertEqual("true", (msg.getProperty(set: .internetHeaders, name: "x-ironport-anti-spam-filtered") as String?)!)
        XCTAssertEqual("投递状态通知 (Failure Notice)", msg.normalizedSubject!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.storeSupportMask)
        XCTAssertEqual(.normal, msg.sensitivity!)
        XCTAssertEqual("E=Sophos;i=\"5.44,464,1505808000\";    d=\"eml'208?scan'208,208,217?pdf'208,208,217\";a=\"21250673\"", (msg.getProperty(set: .internetHeaders, name: "x-ironport-av") as String?)!)
        XCTAssertEqual(.readOnly, msg.accessLevel!)
        XCTAssertEqual("/O=MGC/OU=MGC-NA/CN=AMERICAS/CN=MOBILE/CN=CHERGENR", (msg.getProperty(id: .tagCreatorEmailAddress) as String?)!)
        XCTAssertEqual(0x00000000, (msg.lastModifierEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.lastModifierEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.lastModifierEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.lastModifierEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=MGC/OU=MGC-NA/CN=AMERICAS/CN=MOBILE/CN=CHERGENR\u{00}", (msg.lastModifierEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual("yosipnps@model.com\u{00}", msg.displayTo!)
        XCTAssertEqual(936, msg.internetCodepage!)
        XCTAssertEqual([0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x15, 0x00, 0x00, 0x00, 0xB1, 0xF5, 0x70, 0xD2, 0xCA, 0x9B, 0x2E, 0xF6, 0xE1, 0x04, 0xBE, 0x43, 0x58, 0xDE, 0x00, 0x00], [UInt8]((msg.getProperty(id: .PR_CREATOR_SID) as Data?)!))
        XCTAssertEqual("Mail Delivery Subsystem", (msg.getProperty(id: .tagSenderSimpleDisplayName) as String?)!)
        XCTAssertFalse(msg.nonReceiptNotificationRequested!)
        XCTAssertEqual(1511775873.0, msg.messageDeliveryTime!.timeIntervalSince1970)
        XCTAssertEqual(0x01, msg.conversationIndex!.header.reserved)
        XCTAssertEqual(0x01, msg.conversationIndex!.header.currentFileTime.0)
        XCTAssertEqual(0xD3, msg.conversationIndex!.header.currentFileTime.1)
        XCTAssertEqual(0x67, msg.conversationIndex!.header.currentFileTime.2)
        XCTAssertEqual(0x9E, msg.conversationIndex!.header.currentFileTime.3)
        XCTAssertEqual(0x07, msg.conversationIndex!.header.currentFileTime.4)
        XCTAssertEqual(UUID(uuidString: "53704B2C-00D2-264E-8BBC-6ED71B54C94E"), msg.conversationIndex!.header.guid)
        XCTAssertEqual(0, msg.conversationIndex!.responseLevels.count)
        XCTAssertTrue(msg.rtfInSync!)
        XCTAssertEqual(0, (msg.getProperty(id: .PR_MODIFIER_FLAG) as UInt32?)!)
        XCTAssertEqual("/O=MGC/OU=MGC-NA/CN=AMERICAS/CN=MOBILE/CN=CHERGENR", (msg.getProperty(id: .unknown0x4025) as String?)!)
        XCTAssertEqual("mailer-daemon@tjdpf.org.cn", msg.senderEmailAddress!)
        XCTAssertEqual("SMTP", msg.sentRepresentingAddressType!)
        XCTAssertEqual("mailer-daemon@tjdpf.org.cn", (msg.getProperty(id: .tagSenderSmtpAddress) as String?)!)
        XCTAssertEqual(1511800751.0, msg.creationTime!.timeIntervalSince1970)
        XCTAssertEqual([.read], msg.access)
        XCTAssertEqual(0x00000000, (msg.creatorEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.creatorEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.creatorEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.creatorEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=MGC/OU=MGC-NA/CN=AMERICAS/CN=MOBILE/CN=CHERGENR\u{00}", (msg.creatorEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual("EX", (msg.getProperty(id: .unknown0x4024) as String?)!)
        XCTAssertNotNil(msg.rtfCompressed)
        XCTAssertEqual(1511800751.0, msg.lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual("", msg.subjectPrefix!)
        XCTAssertEqual([0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x15, 0x00, 0x00, 0x00, 0xB1, 0xF5, 0x70, 0xD2, 0xCA, 0x9B, 0x2E, 0xF6, 0xE1, 0x04, 0xBE, 0x43, 0x58, 0xDE, 0x00, 0x00], [UInt8]((msg.getProperty(id: .PR_LAST_MODIFIER_SID) as Data?)!))
        XCTAssertFalse(msg.smartNoAttach!)
        XCTAssertEqual("Mail Delivery Subsystem", (msg.getProperty(id: .tagSenderName) as String?)!)
        XCTAssertEqual("A0GxZABW3Rta/zrMHjwOCAIBAQE4IgEBAQEBAgEBAQEIAQEBAYJKgVhuJ4N/ixSSPwGWWwcBFQgPgQSECQICHDOEXBQBAQEBAQEBAQEBAmgogkQBBAEBAQEBAQEBAQEDAQEHAYEqW2UiTQYBPQIEGCoIJAiJNWRzhVGCJQGdZQYCgiWIHj2CQQ8JgzGBEIxXDy01gkUEgmiKN4gQQo8rEgKER4IogQGHUYN8gU2CNkKQVoJRj3gBhSo2I4FQgiABAYFECYJJHDKBQjQ2iWgBAQE", (msg.getProperty(set: .internetHeaders, name: "x-ironport-anti-spam-result") as String?)!)
        XCTAssertFalse(msg.readReceiptRequested!)
        XCTAssertEqual("27CE24F74A79BC498FDFA753CBE667BA@mentor.com", msg.bodyContentId!)
        XCTAssertEqual("Hergenroder, Christi", msg.creatorName!)
        XCTAssertEqual("00000002\u{01}/o=MGC/ou=MGC-NA/cn=Americas/cn=Mobile/cn=chergenr", msg.internetAccountStamp!)
        XCTAssertEqual(.html, msg.nativeBody!)
        XCTAssertEqual("EX", (msg.getProperty(id: .tagCreatorAddressType) as String?)!)
        XCTAssertEqual("", msg.displayCc!)
        XCTAssertEqual("Hergenroder, Christi", msg.lastModifierName!)
        XCTAssertTrue(msg.hasAttachments!)
        XCTAssertNotNil(msg.mimeSkeleton)
        XCTAssertEqual([.read, .hasAttachment, MessageFlags(rawValue: 0x00040000)], msg.messageFlags)
        XCTAssertEqual("投递状态通知 (Failure Notice)", msg.subject!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x4D, 0x41, 0x49, 0x4C, 0x45, 0x52, 0x2D, 0x44, 0x41, 0x45, 0x4D, 0x4F, 0x4E, 0x40, 0x54, 0x4A, 0x44, 0x50, 0x46, 0x2E, 0x4F, 0x52, 0x47, 0x2E, 0x43, 0x4E, 0x00], [UInt8](msg.senderSearchKey!))
        XCTAssertEqual(1511775870.0, msg.clientSubmitTime!.timeIntervalSince1970)
        XCTAssertEqual([0x5F, 0x79, 0xDA, 0xD2, 0xAD, 0xF7, 0x7F, 0x49, 0xB1, 0x08, 0xDC, 0x91, 0xE2, 0xAF, 0x7E, 0x22], [UInt8]((msg.getProperty(id: .unknown0x0E4B) as Data?)!))
        XCTAssertEqual("eYou MTA Subsystem", (msg.getProperty(set: .internetHeaders, name: "x-mailer") as String?)!)
        XCTAssertEqual("Mail Delivery Subsystem", (msg.getProperty(id: .tagSentRepresentingSimpleDisplayName) as String?)!)
        XCTAssertNotNil(msg.transportMessageHeaders)

        XCTAssertEqual(1, msg.recipients.count)
        XCTAssertEqual([0x00, 0x2B, 0x03, 0xAA], [UInt8](msg.recipients[0].instanceKey!))
        XCTAssertEqual("yosipnps@model.com", msg.recipients[0].transmittableDisplayName!)
        XCTAssertTrue(msg.recipients[0].responsibility!)
        XCTAssertEqual(0x00000000, (msg.recipients[0].entryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.recipients[0].entryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.recipients[0].entryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.recipients[0].entryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("yosipnps@model.com", (msg.recipients[0].entryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.recipients[0].entryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("yosipnps@model.com", (msg.recipients[0].entryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x59, 0x4F, 0x53, 0x49, 0x50, 0x4E, 0x50, 0x53, 0x40, 0x4D, 0x4F, 0x44, 0x45, 0x4C, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.recipients[0].searchKey!))
        XCTAssertEqual(.mailUser, msg.recipients[0].objectType!)
        XCTAssertEqual("yosipnps@model.com", msg.recipients[0].smtpAddress!)
        XCTAssertEqual(.mailUser, msg.recipients[0].displayType!)
        XCTAssertEqual(.sendable, msg.recipients[0].recipientFlags!)
        XCTAssertEqual(0, msg.recipients[0].rowid!)
        XCTAssertEqual("yosipnps@model.com", msg.recipients[0].displayName!)
        XCTAssertEqual([0x00, 0x00, 0x00, 0x00, 0x81, 0x2B, 0x1F, 0xA4, 0xBE, 0xA3, 0x10, 0x19, 0x9D, 0x6E, 0x00, 0xDD, 0x01, 0x0F, 0x54, 0x02, 0x00, 0x00, 0x01, 0x80, 0x79, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x69, 0x00, 0x70, 0x00, 0x6E, 0x00, 0x70, 0x00, 0x73, 0x00, 0x40, 0x00, 0x6D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x2E, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x00, 0x00, 0x53, 0x00, 0x4D, 0x00, 0x54, 0x00, 0x50, 0x00, 0x00, 0x00, 0x79, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x69, 0x00, 0x70, 0x00, 0x6E, 0x00, 0x70, 0x00, 0x73, 0x00, 0x40, 0x00, 0x6D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x2E, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x00, 0x00], [UInt8](msg.recipients[0].recordKey!))
        XCTAssertEqual("yosipnps@model.com", msg.recipients[0].emailAddress!)
        XCTAssertEqual(.primaryRecipient, msg.recipients[0].recipientType!)
        XCTAssertEqual("SMTP", msg.recipients[0].addressType!)
        XCTAssertFalse(msg.recipients[0].sendRichInfo!)
        XCTAssertEqual(0x00000000, (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("yosipnps@model.com", (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("yosipnps@model.com", (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.emailAddress)

        XCTAssertEqual(1, msg.attachments.count)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[0].storeSupportMask)
        XCTAssertEqual(1511800654.0, msg.attachments[0].lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual(.embeddedMessage, msg.attachments[0].attachMethod!)
        XCTAssertEqual(4294967295, msg.attachments[0].renderingPosition!)
        XCTAssertNotNil(msg.attachments[0].attachDataBinary)
        XCTAssertEqual([0x29, 0x18, 0xE5, 0xA3, 0x80, 0x06, 0xBE, 0x48, 0xBA, 0x5D, 0x15, 0x67, 0x16, 0x29, 0xCE, 0xC9], [UInt8]((msg.attachments[0].getProperty(id: .unknown0x371D) as Data?)!))
        XCTAssertEqual("25F04A6D33AEC848AF8CB2B4AE1FADFF@mentor.com", msg.attachments[0].attachContentId!)
        XCTAssertEqual(.attachment, msg.attachments[0].objectType!)
        XCTAssertEqual("EnUs", msg.attachments[0].language!)
        XCTAssertEqual("message/rfc822", msg.attachments[0].attachMimeTag!)
        XCTAssertEqual(".eml", msg.attachments[0].attachExtension!)
        XCTAssertEqual(.readOnly, msg.attachments[0].accessLevel!)
        XCTAssertEqual([0x00, 0x00, 0x00, 0x00], [UInt8](msg.attachments[0].recordKey!))
        XCTAssertEqual("default_attachment.eml", msg.attachments[0].displayName!)
        XCTAssertEqual(0, msg.attachments[0].attachNumber!)
        XCTAssertEqual("default_attachment.eml", msg.attachments[0].attachLongFilename!)
        XCTAssertEqual(1511800654.0, msg.attachments[0].creationTime!.timeIntervalSince1970)
        XCTAssertEqual([.read], msg.attachments[0].access)
        XCTAssertEqual("defaul~1.eml", msg.attachments[0].attachFilename!)
    }

    func testReadVikramarsid3() throws {
        let data = try getData(name: "vikramarsid/msg_parser/outer")
        let msg = try MsgFile(data: data)

        XCTAssertEqual("", msg.displayBcc!)
        XCTAssertEqual([.read], msg.access)
        XCTAssertEqual(0, msg.reminderDelta!)
        XCTAssertEqual([], msg.sideEffects)
        XCTAssertEqual("16.0", msg.currentVersionName!)
        XCTAssertEqual([0x50, 0x4B, 0x03, 0x04, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0xE9, 0xDE, 0x0F, 0xBF, 0xFF, 0x00, 0x00, 0x00, 0x1C, 0x02, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x5B, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x5F, 0x54, 0x79, 0x70, 0x65, 0x73, 0x5D, 0x2E, 0x78, 0x6D, 0x6C, 0xAC, 0x91, 0xCB, 0x4E, 0xC3, 0x30, 0x10, 0x45, 0xF7, 0x48, 0xFC, 0x83, 0xE5, 0x2D, 0x4A, 0x9C, 0xB2, 0x40, 0x08, 0x25, 0xE9, 0x82, 0xC7, 0x8E, 0xC7, 0xA2, 0x7C, 0xC0, 0xC8, 0x99, 0x24, 0x16, 0xC9, 0xD8, 0xB2, 0xA7, 0x55, 0xFB, 0xF7, 0x4C, 0xD2, 0x54, 0x42, 0xA8, 0x20, 0x16, 0x6C, 0x2C, 0xD9, 0x33, 0xF7, 0x9E, 0x3B, 0xE3, 0x72, 0xBD, 0x1F, 0x07, 0xB5, 0xC3, 0x98, 0x9C, 0xA7, 0x4A, 0xAF, 0xF2, 0x42, 0x2B, 0x24, 0xEB, 0x1B, 0x47, 0x5D, 0xA5, 0xDF, 0x37, 0x4F, 0xD9, 0xAD, 0x56, 0x89, 0x81, 0x1A, 0x18, 0x3C, 0x61, 0xA5, 0x0F, 0x98, 0xF4, 0xBA, 0xBE, 0xBC, 0x28, 0x37, 0x87, 0x80, 0x49, 0x89, 0x9A, 0x52, 0xA5, 0x7B, 0xE6, 0x70, 0x67, 0x4C, 0xB2, 0x3D, 0x8E, 0x90, 0x72, 0x1F, 0x90, 0xA4, 0xD2, 0xFA, 0x38, 0x02, 0xCB, 0x35, 0x76, 0x26, 0x80, 0xFD, 0x80, 0x0E, 0xCD, 0x75, 0x51, 0xDC, 0x18, 0xEB, 0x89, 0x91, 0x38, 0xE3, 0xC9, 0x43, 0xD7, 0xE5, 0x03, 0xB6, 0xB0, 0x1D, 0x58, 0x3D, 0xEE, 0xE5, 0xF9, 0x98, 0x24, 0xE2, 0x90, 0xB4, 0xBA, 0x3F, 0x36, 0x4E, 0xAC, 0x4A, 0x43, 0x08, 0x83, 0xB3, 0xC0, 0x92, 0xD4, 0xEC, 0xA8, 0xF9, 0x46, 0xC9, 0x16, 0x42, 0x2E, 0xCA, 0xB9, 0x27, 0xF5, 0x2E, 0xA4, 0x2B, 0x89, 0xA1, 0xCD, 0x59, 0xC2, 0x54, 0xF9, 0x19, 0xB0, 0xE8, 0x5E, 0x65, 0x35, 0xD1, 0x35, 0xA8, 0xDE, 0x20, 0xF2, 0x0B, 0x8C, 0x12, 0xC3, 0xB0, 0x0C, 0x89, 0x5F, 0xCF, 0x67, 0x20, 0x19, 0x2D, 0xE6, 0xBF, 0x3B, 0x9E, 0x89, 0xEC, 0xDB, 0xD6, 0x59, 0x6C, 0xBC, 0xDD, 0x8E, 0xB2, 0x8E, 0x7C, 0x36, 0x5E, 0xCC, 0x4E, 0xC1, 0xFF, 0x14, 0x60, 0xF5, 0x3F, 0xE8, 0x13, 0xD3, 0xCC, 0x7F, 0x5B, 0x7F, 0x02, 0x00, 0x00, 0xFF, 0xFF, 0x03, 0x00, 0x50, 0x4B, 0x03, 0x04, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0xA5, 0xD6, 0xA7, 0xE7, 0xC0, 0x00, 0x00, 0x00, 0x36, 0x01, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x5F, 0x72, 0x65, 0x6C, 0x73, 0x2F, 0x2E, 0x72, 0x65, 0x6C, 0x73, 0x84, 0x8F, 0xCF, 0x6A, 0xC3, 0x30, 0x0C, 0x87, 0xEF, 0x85, 0xBD, 0x83, 0xD1, 0x7D, 0x51, 0xD2, 0xC3, 0x18, 0x25, 0x76, 0x2F, 0xA5, 0x90, 0x43, 0x2F, 0xA3, 0x7D, 0x00, 0xE1, 0x28, 0x7F, 0x68, 0x22, 0x1B, 0xDB, 0x1B, 0xEB, 0xDB, 0x4F, 0xC7, 0x06, 0x0A, 0xBB, 0x08, 0x84, 0xA4, 0xEF, 0xF7, 0xA9, 0x3D, 0xFE, 0xAE, 0x8B, 0xF9, 0xE1, 0x94, 0xE7, 0x20, 0x16, 0x9A, 0xAA, 0x06, 0xC3, 0xE2, 0x43, 0x3F, 0xCB, 0x68, 0xE1, 0x76, 0x3D, 0xBF, 0x7F, 0x82, 0xC9, 0x85, 0xA4, 0xA7, 0x25, 0x08, 0x5B, 0x78, 0x70, 0x86, 0xA3, 0x7B, 0xDB, 0xB5, 0x5F, 0xBC, 0x50, 0xD1, 0xA3, 0x3C, 0xCD, 0x31, 0x1B, 0xA5, 0x48, 0xB6, 0x30, 0x95, 0x12, 0x0F, 0x88, 0xD9, 0x4F, 0xBC, 0x52, 0xAE, 0x42, 0x64, 0xD1, 0xC9, 0x10, 0xD2, 0x4A, 0x45, 0xDB, 0x34, 0x62, 0x24, 0x7F, 0xA7, 0x91, 0x71, 0x5F, 0xD7, 0x1F, 0x98, 0x9E, 0x19, 0xE0, 0x36, 0x4C, 0xD3, 0xF5, 0x16, 0x52, 0xD7, 0x37, 0x60, 0xAE, 0x8F, 0xA8, 0xC9, 0xFF, 0xB3, 0xC3, 0x30, 0xCC, 0x9E, 0x4F, 0xC1, 0x7F, 0xAF, 0x2C, 0xE5, 0x45, 0x04, 0x6E, 0x37, 0x94, 0x4C, 0x69, 0xE4, 0x62, 0xA1, 0xA8, 0x2F, 0xE3, 0x53, 0xBD, 0x90, 0xA8, 0x65, 0xAA, 0xD4, 0x1E, 0xD0, 0xB5, 0xB8, 0xF9, 0xD6, 0xFD, 0x01, 0x00, 0x00, 0xFF, 0xFF, 0x03, 0x00, 0x50, 0x4B, 0x03, 0x04, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0x6B, 0x79, 0x96, 0x16, 0x83, 0x00, 0x00, 0x00, 0x8A, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x4D, 0x61, 0x6E, 0x61, 0x67, 0x65, 0x72, 0x2E, 0x78, 0x6D, 0x6C, 0x0C, 0xCC, 0x4D, 0x0A, 0xC3, 0x20, 0x10, 0x40, 0xE1, 0x7D, 0xA1, 0x77, 0x90, 0xD9, 0x37, 0x63, 0xBB, 0x28, 0x45, 0x62, 0xB2, 0xCB, 0xAE, 0xBB, 0xF6, 0x00, 0x43, 0x9C, 0x1A, 0x41, 0xC7, 0xA0, 0xD2, 0x9F, 0xDB, 0xD7, 0xE5, 0xE3, 0x83, 0x37, 0xCE, 0xDF, 0x14, 0xD5, 0x9B, 0x4B, 0x0D, 0x59, 0x2C, 0x9C, 0x07, 0x0D, 0x8A, 0x65, 0xCD, 0x2E, 0x88, 0xB7, 0xF0, 0x7C, 0x2C, 0xA7, 0x1B, 0xA8, 0xDA, 0x48, 0x1C, 0xC5, 0x2C, 0x6C, 0xE1, 0xC7, 0x15, 0xE6, 0xE9, 0x78, 0x18, 0xC9, 0xB4, 0x8D, 0x13, 0xDF, 0x49, 0xC8, 0x73, 0x51, 0x7D, 0x23, 0xD5, 0x90, 0x85, 0xAD, 0xB5, 0xDD, 0x20, 0xD6, 0xB5, 0x2B, 0xD5, 0x21, 0xEF, 0x2C, 0xDD, 0x5E, 0xB9, 0x24, 0x6A, 0x3D, 0x8B, 0x47, 0x57, 0xE8, 0xD3, 0xF7, 0x29, 0xE2, 0x45, 0xEB, 0x2B, 0x26, 0x0A, 0x02, 0x38, 0xFD, 0x01, 0x00, 0x00, 0xFF, 0xFF, 0x03, 0x00, 0x50, 0x4B, 0x03, 0x04, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0x94, 0xB8, 0x22, 0x45, 0xC4, 0x06, 0x00, 0x00, 0x95, 0x1A, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x31, 0x2E, 0x78, 0x6D, 0x6C, 0xEC, 0x59, 0x5B, 0x8B, 0xDB, 0x46, 0x14, 0x7E, 0x2F, 0xF4, 0x3F, 0x08, 0xBD, 0x3B, 0xBE, 0x49, 0xBE, 0x2C, 0xF1, 0x06, 0x5B, 0xB6, 0xB3, 0x6D, 0x76, 0x93, 0x10, 0x3B, 0x29, 0x79, 0x9C, 0xB5, 0xC7, 0xD6, 0x64, 0x47, 0x1A, 0xA3, 0x19, 0xEF, 0xC6, 0x84, 0x40, 0x49, 0x9E, 0xFA, 0x52, 0x28, 0xA4, 0xA5, 0x2F, 0x85, 0xBE, 0xF5, 0xA1, 0x94, 0x06, 0x1A, 0x68, 0xE8, 0x4B, 0x7F, 0xCC, 0x42, 0x42, 0x9B, 0xFE, 0x88, 0x9E, 0x19, 0xC9, 0xF2, 0x8C, 0x3D, 0xCE, 0x5E, 0x58, 0x4A, 0x28, 0x59, 0xC3, 0x22, 0x8D, 0xBE, 0x73, 0xE6, 0x9B, 0x73, 0x8E, 0xBE, 0x33, 0x92, 0xAE, 0xDF, 0x78, 0x1C, 0x51, 0xE7, 0x18, 0x27, 0x9C, 0xB0, 0xB8, 0xE5, 0x96, 0xAF, 0x95, 0x5C, 0x07, 0xC7, 0x23, 0x36, 0x26, 0xF1, 0xB4, 0xE5, 0xDE, 0x1F, 0xF6, 0x0B, 0x0D, 0xD7, 0xE1, 0x02, 0xC5, 0x63, 0x44, 0x59, 0x8C, 0x5B, 0xEE, 0x02, 0x73, 0xF7, 0xC6, 0xEE, 0xA7, 0x9F, 0x5C, 0x47, 0x3B, 0x22, 0xC4, 0x11, 0x76, 0xC0, 0x3E, 0xE6, 0x3B, 0xA8, 0xE5, 0x86, 0x42, 0xCC, 0x76, 0x8A, 0x45, 0x3E, 0x82, 0x61, 0xC4, 0xAF, 0xB1, 0x19, 0x8E, 0xE1, 0xDA, 0x84, 0x25, 0x11, 0x12, 0x70, 0x9A, 0x4C, 0x8B, 0xE3, 0x04, 0x9D, 0x80, 0xDF, 0x88, 0x16, 0x2B, 0xA5, 0x52, 0xAD, 0x18, 0x21, 0x12, 0xBB, 0x4E, 0x8C, 0x22, 0x70, 0x7B, 0x67, 0x32, 0x21, 0x23, 0xEC, 0x0C, 0xA5, 0x4B, 0x77, 0x77, 0xE9, 0xBC, 0x47, 0xE1, 0x34, 0x16, 0x5C, 0x0E, 0x8C, 0x68, 0x32, 0x90, 0xAE, 0xB1, 0x61, 0xA1, 0xB0, 0xE3, 0xA3, 0xB2, 0x44, 0xF0, 0x05, 0x0F, 0x68, 0xE2, 0x1C, 0x23, 0xDA, 0x72, 0x61, 0x9E, 0x31, 0x3B, 0x19, 0xE2, 0xC7, 0xC2, 0x75, 0x28, 0xE2, 0x02, 0x2E, 0xB4, 0xDC, 0x92, 0xFA, 0x73, 0x8B, 0xBB, 0xD7, 0x8B, 0x68, 0x27, 0x33, 0xA2, 0x62, 0x8B, 0xAD, 0x66, 0xD7, 0x57, 0x7F, 0x99, 0x5D, 0x66, 0x30, 0x3E, 0xAA, 0xA8, 0x39, 0x93, 0xE9, 0x61, 0x3E, 0xA9, 0xE7, 0xF9, 0x5E, 0xAD, 0x9D, 0xFB, 0x57, 0x00, 0x2A, 0x36, 0x71, 0xBD, 0x7A, 0xAF, 0xD6, 0xAB, 0xE5, 0xFE, 0x14, 0x00, 0x8D, 0x46, 0xB0, 0xD2, 0x94, 0x8B, 0xEE, 0xD3, 0xEF, 0x34, 0x3B, 0x5D, 0x3F, 0xC3, 0x6A, 0xA0, 0xF4, 0xD0, 0xE2, 0xBB, 0x5B, 0xEF, 0x56, 0xCB, 0x06, 0x5E, 0xF3, 0x5F, 0xDD, 0xE0, 0xDC, 0xF6, 0xE5, 0xCF, 0xC0, 0x2B, 0x50, 0xEA, 0xDF, 0xDB, 0xC0, 0xF7, 0xFB, 0x01, 0x44, 0xD1, 0xC0, 0x2B, 0x50, 0x8A, 0xF7, 0x37, 0xF0, 0x9E, 0x57, 0xAF, 0x04, 0x9E, 0x81, 0x57, 0xA0, 0x14, 0x5F, 0xDB, 0xC0, 0xD7, 0x4B, 0xED, 0xAE, 0x57, 0x37, 0xF0, 0x0A, 0x14, 0x52, 0x12, 0x1F, 0x6D, 0xA0, 0x4B, 0x7E, 0xAD, 0x1A, 0x2C, 0x57, 0x9B, 0x43, 0x26, 0x8C, 0xEE, 0x59, 0xE1, 0x4D, 0xDF, 0xEB, 0xD7, 0x2B, 0x99, 0xF3, 0x15, 0x0A, 0xAA, 0x21, 0xAF, 0x2E, 0x39, 0xC5, 0x84, 0xC5, 0x62, 0x5B, 0xAD, 0x45, 0xE8, 0x11, 0x4B, 0xFA, 0x00, 0x90, 0x40, 0x8A, 0x04, 0x89, 0x1D, 0xB1, 0x98, 0xE1, 0x09, 0x1A, 0x41, 0x15, 0x07, 0x88, 0x92, 0xC3, 0x84, 0x38, 0xFB, 0x64, 0x1A, 0x42, 0xE1, 0xCD, 0x50, 0xCC, 0x38, 0x0C, 0x97, 0x2A, 0xA5, 0x7E, 0xA9, 0x0A, 0xFF, 0xE5, 0xCF, 0x53, 0x47, 0x2A, 0x22, 0x68, 0x07, 0x23, 0xCD, 0x5A, 0xF2, 0x02, 0x26, 0x7C, 0x63, 0x48, 0xF2, 0x71, 0xF8, 0x28, 0x21, 0x33, 0xD1, 0x72, 0x3F, 0x07, 0xAF, 0xAE, 0x06, 0x79, 0xF3, 0xFA, 0xF5, 0xE9, 0xB3, 0x57, 0xA7, 0xCF, 0x7E, 0x3F, 0x7D, 0xFE, 0xFC, 0xF4, 0xD9, 0xAF, 0xD9, 0xDC, 0xCA, 0x95, 0x61, 0xB7, 0x87, 0xE2, 0xA9, 0x6E, 0xF7, 0xEE, 0xA7, 0x6F, 0xFE, 0xF9, 0xE1, 0x4B, 0xE7, 0xEF, 0xDF, 0x7E, 0x7C, 0xF7, 0xE2, 0xDB, 0x74, 0xEA, 0x75, 0x3C, 0xD7, 0xF1, 0x6F, 0x7F, 0xF9, 0xEA, 0xED, 0x1F, 0x7F, 0xBE, 0xCF, 0x3D, 0xAC, 0x78, 0x15, 0x8A, 0x37, 0xDF, 0xBD, 0x7C, 0xFB, 0xEA, 0xE5, 0x9B, 0xEF, 0xBF, 0xFE, 0xEB, 0xE7, 0x17, 0x16, 0xEF, 0xED, 0x04, 0x1D, 0xEA, 0xF0, 0x21, 0x89, 0x30, 0x77, 0x6E, 0xE3, 0x13, 0xE7, 0x1E, 0x8B, 0x60, 0x81, 0x16, 0xFE, 0xF8, 0x30, 0xB9, 0x98, 0xC5, 0x30, 0x44, 0x44, 0xB7, 0x68, 0xC7, 0x53, 0x8E, 0x62, 0x24, 0x67, 0xB1, 0xF8, 0xEF, 0x89, 0xD0, 0x40, 0xDF, 0x5E, 0x20, 0x8A, 0x2C, 0xB8, 0x0E, 0x36, 0xE3, 0xF8, 0x20, 0x01, 0xA9, 0xB1, 0x01, 0x6F, 0xCE, 0x1F, 0x19, 0x84, 0x07, 0x61, 0x32, 0x17, 0xC4, 0xE2, 0xF1, 0x56, 0x18, 0x19, 0xC0, 0x03, 0xC6, 0x68, 0x87, 0x25, 0xD6, 0x28, 0xDC, 0x92, 0x73, 0x69, 0x61, 0x1E, 0xCE, 0xE3, 0xA9, 0x7D, 0xF2, 0x64, 0xAE, 0xE3, 0xEE, 0x21, 0x74, 0x6C, 0x9B, 0x3B, 0x40, 0xB1, 0x91, 0xE5, 0xDE, 0x7C, 0x06, 0x1A, 0x4B, 0x6C, 0x2E, 0x83, 0x10, 0x1B, 0x34, 0xEF, 0x52, 0x14, 0x0B, 0x34, 0xC5, 0x31, 0x16, 0x8E, 0xBC, 0xC6, 0x8E, 0x30, 0xB6, 0xAC, 0xEE, 0x21, 0x21, 0x46, 0x5C, 0x0F, 0xC8, 0x28, 0x61, 0x9C, 0x4D, 0x84, 0xF3, 0x90, 0x38, 0x1D, 0x44, 0xAC, 0x21, 0x19, 0x92, 0x43, 0xA3, 0x9A, 0x56, 0x46, 0x7B, 0x24, 0x82, 0xBC, 0x2C, 0x6C, 0x04, 0x21, 0xDF, 0x46, 0x6C, 0x0E, 0x1E, 0x38, 0x1D, 0x46, 0x6D, 0xAB, 0xEE, 0xE2, 0x63, 0x13, 0x09, 0xF7, 0x06, 0xA2, 0x16, 0xF2, 0x43, 0x4C, 0x8D, 0x30, 0xDE, 0x44, 0x73, 0x81, 0x22, 0x9B, 0xCB, 0x21, 0x8A, 0xA8, 0x1E, 0xF0, 0x7D, 0x24, 0x42, 0x1B, 0xC9, 0xC1, 0x22, 0x19, 0xE9, 0xB8, 0x1E, 0x17, 0x90, 0xE9, 0x29, 0xA6, 0xCC, 0xE9, 0x8D, 0x31, 0xE7, 0x36, 0x9B, 0x3B, 0x09, 0xAC, 0x57, 0x4B, 0xFA, 0x2D, 0x90, 0x19, 0x7B, 0xDA, 0x0F, 0xE8, 0x22, 0x32, 0x91, 0x89, 0x20, 0x47, 0x36, 0x9F, 0xFB, 0x88, 0x31, 0x1D, 0xD9, 0x65, 0x47, 0x41, 0x88, 0xA2, 0x99, 0x0D, 0x3B, 0x20, 0x71, 0xA8, 0x63, 0x3F, 0xE3, 0x47, 0x50, 0xA2, 0xC8, 0xB9, 0xCB, 0x84, 0x0D, 0x7E, 0xC0, 0xCC, 0x3B, 0x44, 0x9E, 0x43, 0x1E, 0x50, 0xBC, 0x35, 0xDD, 0x0F, 0x08, 0x36, 0xD2, 0x7D, 0xB6, 0x1A, 0xDC, 0x07, 0x85, 0xD5, 0x29, 0xAD, 0x0A, 0x44, 0x5E, 0x99, 0x27, 0x96, 0x5C, 0xDE, 0xC4, 0xCC, 0xA8, 0xDF, 0xC1, 0x82, 0x4E, 0x10, 0x56, 0x52, 0x03, 0x0D, 0xC0, 0xD0, 0xF5, 0x88, 0xC4, 0x67, 0x8A, 0xFC, 0x9A, 0xBC, 0xFB, 0xFF, 0x8D, 0xBC, 0x5B, 0xD6, 0x75, 0x35, 0xC2, 0x6E, 0x77, 0x6C, 0x64, 0xE5, 0x82, 0x92, 0xDE, 0x4E, 0x88, 0xF5, 0x9E, 0xDA, 0x5B, 0x13, 0xF2, 0x6D, 0xB8, 0x75, 0xF9, 0x0E, 0x58, 0x32, 0x26, 0x1F, 0xBE, 0x7A, 0x77, 0xD1, 0x3C, 0xBE, 0x8B, 0xE1, 0x86, 0xD9, 0x6C, 0x61, 0x1F, 0xC5, 0xFB, 0xA3, 0x78, 0xBB, 0xFF, 0x7B, 0xF1, 0xDE, 0x76, 0x3F, 0x5F, 0xBD, 0x64, 0xAF, 0x54, 0x1A, 0x04, 0x5C, 0x6E, 0x5E, 0xD3, 0x4D, 0xBB, 0xDA, 0xC2, 0x47, 0x5B, 0x77, 0xF0, 0x13, 0x42, 0xE9, 0x40, 0x2C, 0x28, 0xDE, 0xE7, 0x6A, 0x13, 0xCF, 0xA1, 0x37, 0x8D, 0xFB, 0x30, 0x28, 0xED, 0xD4, 0xD3, 0x2B, 0xCE, 0x9F, 0xE8, 0x66, 0x21, 0x1C, 0xCA, 0x3B, 0x19, 0x26, 0x30, 0x70, 0xD3, 0x04, 0x29, 0x1B, 0x27, 0x61, 0xE2, 0x0B, 0x22, 0xC2, 0x41, 0x88, 0x66, 0xB0, 0xD3, 0x2F, 0xBB, 0xD2, 0xC9, 0x94, 0x67, 0xAE, 0xA7, 0xDC, 0x99, 0x31, 0x0E, 0x0F, 0x00, 0x6A, 0xD8, 0xEA, 0x5B, 0xE2, 0xE9, 0x3C, 0x3A, 0x60, 0xE3, 0xF4, 0xC1, 0xB5, 0x5C, 0x96, 0x0F, 0xA9, 0xA9, 0x78, 0x70, 0x24, 0x56, 0xE3, 0x25, 0x3F, 0x1F, 0x87, 0x87, 0x0E, 0x91, 0xA2, 0x6B, 0xF5, 0xD5, 0xC3, 0x58, 0xEE, 0x5E, 0xB1, 0x9D, 0xAA, 0x87, 0xE6, 0x25, 0x01, 0x69, 0x7B, 0x11, 0x12, 0xDA, 0x64, 0x26, 0x89, 0xAA, 0x85, 0x44, 0x7D, 0x39, 0x28, 0x83, 0xA4, 0x1E, 0xD1, 0x21, 0x68, 0x16, 0x12, 0x6A, 0x65, 0x57, 0xC2, 0xA2, 0x69, 0x61, 0xD1, 0x90, 0xEE, 0x97, 0xA9, 0xDA, 0x60, 0x01, 0xD4, 0xF2, 0xAC, 0xC0, 0xE6, 0xC9, 0x81, 0x2D, 0x57, 0xCB, 0xF5, 0x3D, 0x30, 0x01, 0x23, 0x78, 0xB6, 0x42, 0x14, 0x8F, 0x65, 0x9E, 0xD2, 0x54, 0x2F, 0xB3, 0xAB, 0x92, 0x79, 0x95, 0x99, 0xDE, 0x16, 0x4C, 0xA3, 0x02, 0x60, 0x27, 0xB1, 0xAC, 0x80, 0x55, 0xA6, 0x9B, 0x92, 0xEB, 0xD6, 0xE5, 0xC9, 0xD5, 0xA5, 0xA5, 0x76, 0x8E, 0x4C, 0x1B, 0x24, 0xB4, 0x72, 0x33, 0x49, 0xA8, 0xC8, 0xA8, 0x1E, 0xC6, 0x43, 0x34, 0xC6, 0x59, 0x75, 0xCA, 0xD1, 0xF3, 0xD0, 0xB8, 0x68, 0xAE, 0x9B, 0xAB, 0x94, 0x1A, 0xF4, 0x64, 0x28, 0xD4, 0x7C, 0x50, 0x5A, 0x2B, 0x1A, 0xF5, 0xC6, 0xFB, 0x58, 0x5C, 0x36, 0xD7, 0x60, 0xB7, 0xAE, 0x0D, 0x34, 0xD6, 0x95, 0x82, 0xC6, 0xCE, 0x49, 0xCB, 0xAD, 0x55, 0x7D, 0x28, 0x99, 0x11, 0x9A, 0xB5, 0xDC, 0x09, 0xBC, 0x00, 0x80, 0xC3, 0x68, 0x06, 0xB5, 0xC3, 0xE5, 0xA6, 0x17, 0xD1, 0x29, 0xBC, 0x45, 0x1B, 0x89, 0x24, 0xBD, 0xE1, 0x2F, 0xA3, 0x2C, 0xB3, 0x84, 0x8B, 0x2E, 0xE2, 0x61, 0x1A, 0x70, 0x25, 0x3A, 0xA9, 0x1A, 0x44, 0x44, 0xE0, 0xC4, 0xA1, 0x24, 0x6A, 0xB9, 0x72, 0xF9, 0x79, 0x1A, 0x68, 0xAC, 0x34, 0x44, 0x71, 0x2B, 0x57, 0x40, 0x10, 0x3E, 0x58, 0x72, 0x4D, 0x90, 0x95, 0x0F, 0x8D, 0x1C, 0x24, 0xDD, 0x4C, 0x32, 0x9E, 0x4C, 0xF0, 0x48, 0xE8, 0x69, 0xD7, 0x46, 0x64, 0xA4, 0xD3, 0x53, 0x50, 0xF8, 0x54, 0x2B, 0xAC, 0x57, 0x95, 0xF9, 0xE5, 0xC1, 0xD2, 0x92, 0xCD, 0x21, 0xDD, 0x83, 0x70, 0x7C, 0xE2, 0x1C, 0xD2, 0x79, 0x72, 0x0F, 0x41, 0x89, 0xF9, 0xF5, 0xB2, 0x0C, 0xE0, 0x98, 0x70, 0x78, 0x0F, 0x54, 0x4E, 0xA3, 0x39, 0x26, 0xF0, 0x62, 0x33, 0x17, 0xB2, 0x55, 0xFD, 0xAD, 0x35, 0xA6, 0x4C, 0x76, 0xF5, 0x37, 0x8B, 0xAA, 0x86, 0xD2, 0x71, 0x44, 0x67, 0x21, 0xCA, 0x3A, 0x8A, 0x2E, 0xE6, 0x29, 0x5C, 0x49, 0x79, 0x4E, 0x47, 0x9D, 0xE5, 0x31, 0xD0, 0xCE, 0xB2, 0x35, 0x43, 0x40, 0xB5, 0x90, 0x64, 0x8D, 0xF0, 0x70, 0x2A, 0x1B, 0xAC, 0x1E, 0x54, 0xA3, 0x9B, 0xE6, 0x5D, 0x23, 0xE5, 0xB0, 0xB5, 0xEB, 0x9E, 0x6D, 0x24, 0x23, 0xA7, 0x89, 0xE6, 0xAA, 0x67, 0x1A, 0xAA, 0x22, 0xBB, 0xA6, 0x5D, 0xC5, 0x8C, 0x19, 0x96, 0x6D, 0x60, 0x2D, 0x96, 0x97, 0x6B, 0xF2, 0x1A, 0xAB, 0x65, 0x88, 0x41, 0xD3, 0xF4, 0x0E, 0x9F, 0x4A, 0xF7, 0xBA, 0xE4, 0x36, 0x97, 0x5A, 0xB7, 0xB6, 0x4F, 0xC8, 0xBB, 0x04, 0x04, 0x3C, 0x8F, 0x9F, 0xA5, 0xEB, 0x9E, 0xA3, 0x21, 0x68, 0xD4, 0x56, 0x93, 0x19, 0xD4, 0x24, 0xE3, 0x4D, 0x19, 0x96, 0x9A, 0x9D, 0x8D, 0x9A, 0xBD, 0x63, 0xB9, 0xC0, 0x33, 0xA8, 0x9D, 0xA7, 0x49, 0x68, 0xAA, 0x5F, 0x5B, 0xBA, 0x5D, 0x8B, 0x5B, 0xDE, 0x23, 0xAC, 0xD3, 0xC1, 0xE0, 0xA5, 0x3A, 0x3F, 0xD8, 0xAD, 0x57, 0x2D, 0x0C, 0x4D, 0x96, 0xFB, 0x4A, 0x15, 0x69, 0xF5, 0x05, 0x44, 0xFF, 0x48, 0xC1, 0x0E, 0x1F, 0x81, 0x78, 0x74, 0xE1, 0x75, 0xF0, 0x9C, 0x0A, 0xAE, 0x52, 0x09, 0x9F, 0x20, 0x12, 0x04, 0x1B, 0xA2, 0x81, 0xDA, 0x93, 0xA4, 0xB2, 0x01, 0xB7, 0xC8, 0x63, 0x91, 0xDD, 0x1A, 0x70, 0xE4, 0xCC, 0x13, 0xD2, 0x72, 0x9F, 0x94, 0xFC, 0xB6, 0x17, 0x54, 0xFC, 0xA0, 0x50, 0x6A, 0xF8, 0xBD, 0x82, 0x57, 0xF5, 0x4A, 0x85, 0x86, 0xDF, 0xAE, 0x16, 0xDA, 0xBE, 0x5F, 0x2D, 0xF7, 0xFC, 0x72, 0xA9, 0xDB, 0xA9, 0x3C, 0x85, 0xC6, 0x22, 0xC2, 0xA8, 0xEC, 0xA7, 0x5F, 0x5F, 0xFA, 0xF0, 0x32, 0x8A, 0x2E, 0xB2, 0x6F, 0x30, 0x6A, 0x7C, 0xE3, 0x3B, 0x4C, 0xB4, 0x7C, 0xDF, 0x76, 0x6D, 0xC4, 0xA2, 0x22, 0x53, 0xDF, 0x59, 0x8A, 0x8A, 0xB8, 0xFA, 0x0E, 0x53, 0xAE, 0x6C, 0xFF, 0x0E, 0xE3, 0x10, 0x10, 0x9D, 0x27, 0xB5, 0x4A, 0xBF, 0x59, 0x6D, 0x76, 0x6A, 0x85, 0x66, 0xB5, 0xDD, 0x2F, 0x78, 0xDD, 0x4E, 0xA3, 0xD0, 0x0C, 0x6A, 0x9D, 0x42, 0xB7, 0x16, 0xD4, 0xBB, 0xFD, 0x6E, 0xE0, 0x37, 0x9A, 0xFD, 0xA7, 0xAE, 0x73, 0xAC, 0xC0, 0x5E, 0xBB, 0x1A, 0x78, 0xB5, 0x5E, 0xA3, 0x50, 0x2B, 0x07, 0x41, 0xC1, 0xAB, 0x95, 0x24, 0xFD, 0x46, 0xB3, 0x50, 0xF7, 0x2A, 0x95, 0xB6, 0x57, 0x6F, 0x37, 0x7A, 0x5E, 0xFB, 0x69, 0xB6, 0x8D, 0x81, 0x95, 0xA7, 0xF2, 0x91, 0xC5, 0x02, 0xC2, 0xAB, 0x78, 0xED, 0xFE, 0x0B, 0x00, 0x00, 0xFF, 0xFF, 0x03, 0x00, 0x50, 0x4B, 0x03, 0x04, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0x0D, 0xD1, 0x90, 0x9F, 0xB6, 0x00, 0x00, 0x00, 0x1B, 0x01, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x5F, 0x72, 0x65, 0x6C, 0x73, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x4D, 0x61, 0x6E, 0x61, 0x67, 0x65, 0x72, 0x2E, 0x78, 0x6D, 0x6C, 0x2E, 0x72, 0x65, 0x6C, 0x73, 0x84, 0x8F, 0x4D, 0x0A, 0xC2, 0x30, 0x14, 0x84, 0xF7, 0x82, 0x77, 0x08, 0x6F, 0x6F, 0xD3, 0xBA, 0x10, 0x91, 0x26, 0xDD, 0x88, 0xD0, 0xAD, 0xD4, 0x03, 0x84, 0xE4, 0x35, 0x0D, 0x36, 0x3F, 0x24, 0x51, 0xEC, 0xED, 0x0D, 0xAE, 0x2C, 0x08, 0x2E, 0x87, 0x61, 0xBE, 0x99, 0x69, 0xBB, 0x97, 0x9D, 0xC9, 0x13, 0x63, 0x32, 0xDE, 0x31, 0x68, 0xAA, 0x1A, 0x08, 0x3A, 0xE9, 0x95, 0x71, 0x9A, 0xC1, 0x6D, 0xB8, 0xEC, 0x8E, 0x40, 0x52, 0x16, 0x4E, 0x89, 0xD9, 0x3B, 0x64, 0xB0, 0x60, 0x82, 0x8E, 0x6F, 0x37, 0xED, 0x15, 0x67, 0x91, 0x4B, 0x28, 0x4D, 0x26, 0x24, 0x52, 0x28, 0x2E, 0x31, 0x98, 0x72, 0x0E, 0x27, 0x4A, 0x93, 0x9C, 0xD0, 0x8A, 0x54, 0xF9, 0x80, 0xAE, 0x38, 0xA3, 0x8F, 0x56, 0xE4, 0x22, 0xA3, 0xA6, 0x41, 0xC8, 0xBB, 0xD0, 0x48, 0xF7, 0x75, 0x7D, 0xA0, 0xF1, 0x9B, 0x01, 0x7C, 0xC5, 0x24, 0xBD, 0x62, 0x10, 0x7B, 0xD5, 0x00, 0x19, 0x96, 0x50, 0x9A, 0xFF, 0xB3, 0xFD, 0x38, 0x1A, 0x89, 0x67, 0x2F, 0x1F, 0x16, 0x5D, 0xFE, 0x51, 0x41, 0x73, 0xD9, 0x85, 0x05, 0x28, 0xA2, 0xC6, 0xCC, 0xE0, 0x23, 0x9B, 0xAA, 0x4C, 0x04, 0xCA, 0x5B, 0xBA, 0xBA, 0xC4, 0xDF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x03, 0x00, 0x50, 0x4B, 0x01, 0x02, 0x2D, 0x00, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0xE9, 0xDE, 0x0F, 0xBF, 0xFF, 0x00, 0x00, 0x00, 0x1C, 0x02, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5B, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x5F, 0x54, 0x79, 0x70, 0x65, 0x73, 0x5D, 0x2E, 0x78, 0x6D, 0x6C, 0x50, 0x4B, 0x01, 0x02, 0x2D, 0x00, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0xA5, 0xD6, 0xA7, 0xE7, 0xC0, 0x00, 0x00, 0x00, 0x36, 0x01, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x01, 0x00, 0x00, 0x5F, 0x72, 0x65, 0x6C, 0x73, 0x2F, 0x2E, 0x72, 0x65, 0x6C, 0x73, 0x50, 0x4B, 0x01, 0x02, 0x2D, 0x00, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0x6B, 0x79, 0x96, 0x16, 0x83, 0x00, 0x00, 0x00, 0x8A, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x02, 0x00, 0x00, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x4D, 0x61, 0x6E, 0x61, 0x67, 0x65, 0x72, 0x2E, 0x78, 0x6D, 0x6C, 0x50, 0x4B, 0x01, 0x02, 0x2D, 0x00, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0x94, 0xB8, 0x22, 0x45, 0xC4, 0x06, 0x00, 0x00, 0x95, 0x1A, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD6, 0x02, 0x00, 0x00, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x31, 0x2E, 0x78, 0x6D, 0x6C, 0x50, 0x4B, 0x01, 0x02, 0x2D, 0x00, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0x0D, 0xD1, 0x90, 0x9F, 0xB6, 0x00, 0x00, 0x00, 0x1B, 0x01, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCE, 0x09, 0x00, 0x00, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x5F, 0x72, 0x65, 0x6C, 0x73, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x4D, 0x61, 0x6E, 0x61, 0x67, 0x65, 0x72, 0x2E, 0x78, 0x6D, 0x6C, 0x2E, 0x72, 0x65, 0x6C, 0x73, 0x50, 0x4B, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x5D, 0x01, 0x00, 0x00, 0xC9, 0x0A, 0x00, 0x00, 0x00, 0x00], [UInt8]((msg.getProperty(set: .common, lid: 0x000085C2) as Data?)!))
        XCTAssertFalse(msg.originatorDeliveryReportRequested!)
        XCTAssertFalse(msg.reminderSet!)
        XCTAssertEqual(.normal, msg.priority!)
        XCTAssertEqual("Outer body\r\n", msg.body!)
        XCTAssertEqual(1033, (msg.getProperty(set: .common, lid: 0x000085EB) as UInt32?)!)
        XCTAssertEqual(1479252558.0, msg.lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual(167369, msg.currentVersion!)
        XCTAssertEqual("", msg.displayCc!)
        XCTAssertEqual([0x35, 0x42, 0x28, 0x0D, 0xDD, 0x00, 0xFF, 0x44, 0x91, 0xB2, 0x13, 0xB1, 0x95, 0x0C, 0x8B, 0xD4], [UInt8](msg.searchKey!))
        XCTAssertTrue(msg.rtfInSync!)
        XCTAssertEqual(.normal, msg.importance!)
        XCTAssertEqual("outer subject", msg.normalizedSubject!)
        XCTAssertEqual("IPM.Note", msg.messageClass!)
        XCTAssertEqual([0x3C, 0x3F, 0x78, 0x6D, 0x6C, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x3D, 0x22, 0x31, 0x2E, 0x30, 0x22, 0x20, 0x65, 0x6E, 0x63, 0x6F, 0x64, 0x69, 0x6E, 0x67, 0x3D, 0x22, 0x55, 0x54, 0x46, 0x2D, 0x38, 0x22, 0x20, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x61, 0x6C, 0x6F, 0x6E, 0x65, 0x3D, 0x22, 0x79, 0x65, 0x73, 0x22, 0x3F, 0x3E, 0x0D, 0x0A, 0x3C, 0x61, 0x3A, 0x63, 0x6C, 0x72, 0x4D, 0x61, 0x70, 0x20, 0x78, 0x6D, 0x6C, 0x6E, 0x73, 0x3A, 0x61, 0x3D, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x73, 0x63, 0x68, 0x65, 0x6D, 0x61, 0x73, 0x2E, 0x6F, 0x70, 0x65, 0x6E, 0x78, 0x6D, 0x6C, 0x66, 0x6F, 0x72, 0x6D, 0x61, 0x74, 0x73, 0x2E, 0x6F, 0x72, 0x67, 0x2F, 0x64, 0x72, 0x61, 0x77, 0x69, 0x6E, 0x67, 0x6D, 0x6C, 0x2F, 0x32, 0x30, 0x30, 0x36, 0x2F, 0x6D, 0x61, 0x69, 0x6E, 0x22, 0x20, 0x62, 0x67, 0x31, 0x3D, 0x22, 0x6C, 0x74, 0x31, 0x22, 0x20, 0x74, 0x78, 0x31, 0x3D, 0x22, 0x64, 0x6B, 0x31, 0x22, 0x20, 0x62, 0x67, 0x32, 0x3D, 0x22, 0x6C, 0x74, 0x32, 0x22, 0x20, 0x74, 0x78, 0x32, 0x3D, 0x22, 0x64, 0x6B, 0x32, 0x22, 0x20, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x31, 0x3D, 0x22, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x31, 0x22, 0x20, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x32, 0x3D, 0x22, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x32, 0x22, 0x20, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x33, 0x3D, 0x22, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x33, 0x22, 0x20, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x34, 0x3D, 0x22, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x34, 0x22, 0x20, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x35, 0x3D, 0x22, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x35, 0x22, 0x20, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x36, 0x3D, 0x22, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x36, 0x22, 0x20, 0x68, 0x6C, 0x69, 0x6E, 0x6B, 0x3D, 0x22, 0x68, 0x6C, 0x69, 0x6E, 0x6B, 0x22, 0x20, 0x66, 0x6F, 0x6C, 0x48, 0x6C, 0x69, 0x6E, 0x6B, 0x3D, 0x22, 0x66, 0x6F, 0x6C, 0x48, 0x6C, 0x69, 0x6E, 0x6B, 0x22, 0x2F, 0x3E], [UInt8]((msg.getProperty(set: .common, lid: 0x000085C3) as Data?)!))
        XCTAssertEqual(4294967295, msg.iconIndex!)
        XCTAssertEqual([.unsent, .hasAttachment], msg.messageFlags)
        XCTAssertFalse(msg.`private`!)
        XCTAssertEqual("outer subject", msg.conversationTopic!)
        XCTAssertEqual(1479252545.0, msg.validFlagStringProof!.timeIntervalSince1970)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.storeSupportMask)
        XCTAssertEqual(.readOnly, msg.accessLevel!)
        XCTAssertTrue(msg.hasAttachments!)
        XCTAssertNotNil(msg.rtfCompressed)
        XCTAssertEqual("", msg.subjectPrefix!)
        XCTAssertEqual(20127, msg.internetCodepage!)
        XCTAssertFalse(msg.agingDontAgeMe!)
        XCTAssertFalse(msg.deleteAfterSubmit!)
        XCTAssertEqual(1033, msg.messageLocaleId!)
        XCTAssertEqual("outer subject", msg.subject!)
        XCTAssertEqual(.normal, msg.sensitivity!)
        XCTAssertEqual(1479252558.0, msg.creationTime!.timeIntervalSince1970)
        XCTAssertEqual(1479252545.0, msg.messageDeliveryTime!.timeIntervalSince1970)
        XCTAssertEqual(0x01, msg.conversationIndex!.header.reserved)
        XCTAssertEqual(0xD2, msg.conversationIndex!.header.currentFileTime.0)
        XCTAssertEqual(0x3F, msg.conversationIndex!.header.currentFileTime.1)
        XCTAssertEqual(0x98, msg.conversationIndex!.header.currentFileTime.2)
        XCTAssertEqual(0x0E, msg.conversationIndex!.header.currentFileTime.3)
        XCTAssertEqual(0x81, msg.conversationIndex!.header.currentFileTime.4)
        XCTAssertEqual(UUID(uuidString: "D5BACD40-C07E-4249-B8B5-90E7721B2BE3"), msg.conversationIndex!.header.guid)
        XCTAssertEqual(0, msg.conversationIndex!.responseLevels.count)
        XCTAssertEqual("outer@foo.bar\u{00}", msg.displayTo!)
        XCTAssertFalse(msg.readReceiptRequested!)
        XCTAssertEqual(.notAssigned, msg.taskMode!)
        XCTAssertTrue(msg.alternateRecipientAllowed!)

        XCTAssertEqual(1, msg.recipients.count)
        XCTAssertEqual([0x00, 0x00, 0x00, 0x8E], [UInt8](msg.recipients[0].instanceKey!))
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x4F, 0x55, 0x54, 0x45, 0x52, 0x40, 0x46, 0x4F, 0x4F, 0x2E, 0x42, 0x41, 0x52, 0x00], [UInt8](msg.recipients[0].searchKey!))
        XCTAssertEqual(.mailUser, msg.recipients[0].displayType!)
        XCTAssertEqual("outer@foo.bar", msg.recipients[0].emailAddress!)
        XCTAssertEqual(.sendable, msg.recipients[0].recipientFlags!)
        XCTAssertEqual("SMTP", msg.recipients[0].addressType!)
        XCTAssertEqual(.mailUser, msg.recipients[0].objectType!)
        XCTAssertEqual("outer@foo.bar", msg.recipients[0].recipientDisplayName!)
        XCTAssertEqual("outer@foo.bar", msg.recipients[0].displayName!)
        XCTAssertEqual(0, msg.recipients[0].rowid!)
        XCTAssertEqual(0, msg.recipients[0].recipientOrder!)
        XCTAssertEqual(.none, msg.recipients[0].recipientTrackStatus!)
        XCTAssertEqual(0x00000000, (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("outer@foo.bar", (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("outer@foo.bar", (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual(0x00000000, (msg.recipients[0].entryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.recipients[0].entryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.recipients[0].entryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.recipients[0].entryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("outer@foo.bar", (msg.recipients[0].entryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.recipients[0].entryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("outer@foo.bar", (msg.recipients[0].entryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual(0, msg.recipients[0].sendInternetEncoding!)
        XCTAssertEqual(.primaryRecipient, msg.recipients[0].recipientType!)
        XCTAssertEqual(0, (msg.recipients[0].getProperty(id: .tagRecipientResourceState) as UInt32?)!)
        XCTAssertEqual([0x00, 0x00, 0x00, 0x00, 0x81, 0x2B, 0x1F, 0xA4, 0xBE, 0xA3, 0x10, 0x19, 0x9D, 0x6E, 0x00, 0xDD, 0x01, 0x0F, 0x54, 0x02, 0x00, 0x00, 0x01, 0x90, 0x6F, 0x00, 0x75, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x40, 0x00, 0x66, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x2E, 0x00, 0x62, 0x00, 0x61, 0x00, 0x72, 0x00, 0x00, 0x00, 0x53, 0x00, 0x4D, 0x00, 0x54, 0x00, 0x50, 0x00, 0x00, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x40, 0x00, 0x66, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x2E, 0x00, 0x62, 0x00, 0x61, 0x00, 0x72, 0x00, 0x00, 0x00], [UInt8](msg.recipients[0].recordKey!))
        XCTAssertFalse(msg.recipients[0].sendRichInfo!)

        XCTAssertEqual(1, msg.attachments.count)
        XCTAssertFalse(msg.attachments[0].attachmentHidden!)
        XCTAssertEqual(0, msg.attachments[0].attachmentLinkId!)
        XCTAssertFalse(msg.attachments[0].attachmentContactPhoto!)
        XCTAssertEqual([0x00, 0x00, 0x00, 0x00], [UInt8](msg.attachments[0].recordKey!))
        XCTAssertEqual(0x00000000, msg.attachments[0].attachmentFlags!)
        XCTAssertEqual("test", msg.attachments[0].displayName!)
        XCTAssertEqual([], [UInt8](msg.attachments[0].attachEncoding!))
        XCTAssertEqual(.embeddedMessage, msg.attachments[0].attachMethod!)
        XCTAssertEqual(.attachment, msg.attachments[0].objectType!)
        XCTAssertEqual(0, msg.attachments[0].attachNumber!)
        XCTAssertEqual(.readOnly, msg.attachments[0].accessLevel!)
        XCTAssertEqual([.read], msg.attachments[0].access)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[0].storeSupportMask)
        XCTAssertEqual(4294967295, msg.attachments[0].renderingPosition!)
        XCTAssertEqual([], msg.attachments[0].attachFlags)
        XCTAssertNotNil(msg.attachments[0].attachDataBinary)
        XCTAssertEqual(79870665600.0, msg.attachments[0].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertNotNil(msg.attachments[0].attachRendering)
        XCTAssertEqual(79870665600.0, msg.attachments[0].exceptionEndTime!.timeIntervalSince1970)
    }

    func testReadConfusedCat1() throws {
        let data = try getData(name: "TheConfusedCat/msgparser/attachments")
        let msg = try MsgFile(data: data)

        XCTAssertEqual("", msg.displayBcc!)
        XCTAssertEqual(.normal, msg.importance!)
        XCTAssertEqual("", msg.subjectPrefix!)
        XCTAssertEqual([0xA3, 0xC2, 0x23, 0x96, 0x44, 0x89, 0x42, 0x4B, 0xB0, 0x25, 0xBD, 0xDD, 0x47, 0x71, 0x02, 0xF6], [UInt8](msg.searchKey!))
        XCTAssertEqual(1252, msg.internetCodepage!)
        XCTAssertEqual("SMTP", (msg.getProperty(id: .tagSenderAddressType) as String?)!)
        XCTAssertEqual(.readOnly, msg.accessLevel!)
        XCTAssertTrue(msg.rtfInSync!)
        XCTAssertTrue(msg.hasAttachments!)
        XCTAssertEqual(.html, msg.messageEditorFormat!)
        XCTAssertEqual(65001, msg.messageCodepage!)
        XCTAssertEqual(1461779365.0, msg.creationTime!.timeIntervalSince1970)
        XCTAssertEqual("<73ade2cb375f4f39b9e210a57d087900@ABMAIL13.ci.atlantic-beach.fl.us>", msg.inReplyToId!)
        XCTAssertEqual("IPM.Note", msg.messageClass!)
        XCTAssertNotNil(msg.body)
        XCTAssertEqual(.normal, msg.sensitivity!)
        XCTAssertEqual(0x00160000, msg.internetMailOverrideFormat!)
        XCTAssertEqual("<ed921c14-a16b-40e8-9946-d223d5f5eb98@ABMAIL13.ci.atlantic-beach.fl.us>", (msg.getProperty(id: .tagInternetMessageId) as String?)!)
        XCTAssertEqual("SMTP", msg.sentRepresentingAddressType!)
        XCTAssertEqual(1461779365.0, msg.lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual("Delivery delayed:RE: Bosco Fraud Cases [ 2 of 8]", msg.normalizedSubject!)
        XCTAssertFalse(msg.originatorDeliveryReportRequested!)
        XCTAssertNotNil(msg.rtfCompressed)
        XCTAssertFalse(msg.smartNoAttach!)
        XCTAssertEqual(0x00000000, (msg.senderEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.senderEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.senderEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.senderEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("Microsoft Outlook", (msg.senderEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.senderEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("MicrosoftExchange329e71ec88ae4615bbc36ab6ce41109e@coab.us", (msg.senderEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual([.read, .hasAttachment, .fromMe], msg.messageFlags)
        XCTAssertEqual("Microsoft Outlook", (msg.getProperty(id: .tagSenderName) as String?)!)
        XCTAssertEqual([.read], msg.access)
        XCTAssertEqual("Delivery delayed:RE: Bosco Fraud Cases [ 2 of 8]", msg.subject!)
        XCTAssertEqual("darlington@coab.us\u{00}", msg.displayTo!)
        XCTAssertEqual(0x00000000, (msg.sentRepresentingEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.sentRepresentingEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.sentRepresentingEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.sentRepresentingEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("Microsoft Outlook", (msg.sentRepresentingEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.sentRepresentingEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("MicrosoftExchange329e71ec88ae4615bbc36ab6ce41109e@coab.us", (msg.sentRepresentingEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual("Microsoft Outlook", msg.sentRepresentingName!)
        XCTAssertEqual("", msg.displayCc!)
        XCTAssertEqual(1460394670.0, msg.messageDeliveryTime!.timeIntervalSince1970)
        XCTAssertEqual("MicrosoftExchange329e71ec88ae4615bbc36ab6ce41109e@coab.us", msg.senderEmailAddress!)
        XCTAssertEqual("<CAC+pJabatY3d=2QZJV3c62H0k=G+bySP5fjEMM=hU9YDZM2RvA@mail.gmail.com> <73ade2cb375f4f39b9e210a57d087900@ABMAIL13.ci.atlantic-beach.fl.us>", msg.internetReferences!)
        XCTAssertEqual("Bosco Fraud Cases [ 2 of 8]", msg.conversationTopic!)
        XCTAssertEqual(1460394670.0, msg.clientSubmitTime!.timeIntervalSince1970)
        XCTAssertEqual(0x01, msg.conversationIndex!.header.reserved)
        XCTAssertEqual(0x01, msg.conversationIndex!.header.currentFileTime.0)
        XCTAssertEqual(0xD1, msg.conversationIndex!.header.currentFileTime.1)
        XCTAssertEqual(0x90, msg.conversationIndex!.header.currentFileTime.2)
        XCTAssertEqual(0xD9, msg.conversationIndex!.header.currentFileTime.3)
        XCTAssertEqual(0x49, msg.conversationIndex!.header.currentFileTime.4)
        XCTAssertEqual(UUID(uuidString: "2A1EA50C-E22B-5741-B8B0-41AFA2E3CBA3"), msg.conversationIndex!.header.guid)
        XCTAssertEqual(2, msg.conversationIndex!.responseLevels.count)
        XCTAssertEqual(0x38C1849F, msg.conversationIndex!.responseLevels[0].dcAndDeltaTime)
        XCTAssertEqual(0x40, msg.conversationIndex!.responseLevels[0].random)
        XCTAssertEqual(0x5E470080, msg.conversationIndex!.responseLevels[1].dcAndDeltaTime)
        XCTAssertEqual(0x5F, msg.conversationIndex!.responseLevels[1].random)
        XCTAssertNotNil(msg.transportMessageHeaders)
        XCTAssertEqual("MicrosoftExchange329e71ec88ae4615bbc36ab6ce41109e@coab.us", msg.sentRepresentingEmailAddress!)

        XCTAssertEqual(1, msg.recipients.count)
        XCTAssertFalse(msg.recipients[0].sendRichInfo!)
        XCTAssertEqual(.mailUser, msg.recipients[0].displayType!)
        XCTAssertEqual("SMTP", msg.recipients[0].addressType!)
        XCTAssertEqual("darlington@coab.us", msg.recipients[0].emailAddress!)
        XCTAssertEqual(0x00000000, (msg.recipients[0].entryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.recipients[0].entryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.recipients[0].entryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.recipients[0].entryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("darlington@coab.us", (msg.recipients[0].entryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.recipients[0].entryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("darlington@coab.us", (msg.recipients[0].entryId as? OneOffEntryID)!.emailAddress)
        XCTAssertFalse(msg.recipients[0].responsibility!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x44, 0x41, 0x52, 0x4C, 0x49, 0x4E, 0x47, 0x54, 0x4F, 0x4E, 0x40, 0x43, 0x4F, 0x41, 0x42, 0x2E, 0x55, 0x53, 0x00], [UInt8](msg.recipients[0].searchKey!))
        XCTAssertEqual([0x00, 0x00, 0x01, 0x51], [UInt8](msg.recipients[0].instanceKey!))
        XCTAssertEqual(0, msg.recipients[0].rowid!)
        XCTAssertEqual("darlington@coab.us", msg.recipients[0].displayName!)
        XCTAssertEqual(.primaryRecipient, msg.recipients[0].recipientType!)

        XCTAssertEqual(2, msg.attachments.count)
        XCTAssertEqual("message/delivery-status", msg.attachments[0].attachMimeTag!)
        XCTAssertEqual([.read], msg.attachments[0].access)
        XCTAssertEqual(.readOnly, msg.attachments[0].accessLevel!)
        XCTAssertEqual(0, msg.attachments[0].attachNumber!)
        XCTAssertEqual([], msg.attachments[0].attachFlags)
        XCTAssertEqual(4294967295, msg.attachments[0].renderingPosition!)
        XCTAssertEqual(.attachment, msg.attachments[0].objectType!)
        XCTAssertFalse(msg.attachments[0].attachmentHidden!)
        XCTAssertEqual(.byValue, msg.attachments[0].attachMethod!)
        XCTAssertNotNil(msg.attachments[0].attachDataBinary)
        XCTAssertEqual([0x00, 0x00, 0x00, 0x00], [UInt8](msg.attachments[0].recordKey!))

        XCTAssertNotNil(msg.attachments[1].attachDataBinary)
        XCTAssertEqual([0x01, 0x00, 0x00, 0x00], [UInt8](msg.attachments[1].recordKey!))
        XCTAssertEqual(.readOnly, msg.attachments[1].accessLevel!)
        XCTAssertEqual([], msg.attachments[1].attachFlags)
        XCTAssertEqual(.attachment, msg.attachments[1].objectType!)
        XCTAssertEqual(.byValue, msg.attachments[1].attachMethod!)
        XCTAssertEqual(1, msg.attachments[1].attachNumber!)
        XCTAssertEqual("text/rfc822-headers", msg.attachments[1].attachMimeTag!)
        XCTAssertEqual(4294967295, msg.attachments[1].renderingPosition!)
        XCTAssertEqual([.read], msg.attachments[1].access)
        XCTAssertFalse(msg.attachments[1].attachmentHidden!)
    }

    func testReadConfusedCat2() throws {
        let data = try getData(name: "TheConfusedCat/msgparser/embedded image")
        let msg = try MsgFile(data: data)
        
        XCTAssertEqual("mpaliarik@mdlz.com", (msg.getProperty(id: .tagSendingSmtpAddress) as String?)!)
        XCTAssertEqual("<F702D40CB0325C44B4680D8A5A3C1B4904D32649@035-CH1MPN1-027.035d.mgd.msft.net>", (msg.getProperty(id: .tagInternetMessageId) as String?)!)
        XCTAssertNotNil(msg.tnefCorrelationKey)
        XCTAssertEqual(0, (msg.getProperty(id: .tagReceivedRepresentingFlags) as UInt32?)!)
        XCTAssertEqual(65001, msg.internetCodepage!)
        XCTAssertEqual(1252, msg.messageCodepage!)
        XCTAssertFalse((msg.getProperty(set: .messaging, name: "IsReadReceipt") as Bool?)!)
        XCTAssertEqual(1352826864.0, msg.messageDeliveryTime!.timeIntervalSince1970)
        XCTAssertEqual(1352826863.0, msg.clientSubmitTime!.timeIntervalSince1970)
        XCTAssertEqual([0x77, 0x31, 0x58, 0x58, 0x0E, 0x23, 0xB8, 0x49, 0xA6, 0x00, 0xD7, 0x9B, 0x2B, 0xF1, 0x4B, 0x49], [UInt8](msg.searchKey!))
        XCTAssertEqual(0x00000000, (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=MMS/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=PALIARIK, MARTINA46FAA27-6657-4824-90F8-229B7655DA885\u{00}", (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertTrue(msg.alternateRecipientAllowed!)
        XCTAssertEqual("", msg.displayBcc!)
        XCTAssertEqual("/O=MMS/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=PALIARIK, MARTINA46FAA27-6657-4824-90F8-229B7655DA885", msg.receivedRepresentingEmailAddress!)
        XCTAssertEqual(0x00000000, (msg.receivedByEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.receivedByEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.receivedByEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.receivedByEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=MMS/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=PALIARIK, MARTINA46FAA27-6657-4824-90F8-229B7655DA885\u{00}", (msg.receivedByEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual([0x00, 0x00, 0x00, 0x00, 0xC1, 0xB6, 0xA7, 0x3E, 0x87, 0x71, 0x6C, 0x46, 0x80, 0x9B, 0xF7, 0x96, 0x8F, 0xD7, 0x2D, 0xF4, 0x07, 0x00, 0xF7, 0x02, 0xD4, 0x0C, 0xB0, 0x32, 0x5C, 0x44, 0xB4, 0x68, 0x0D, 0x8A, 0x5A, 0x3C, 0x1B, 0x49, 0x00, 0x00, 0x00, 0x38, 0xD7, 0x78, 0x00, 0x00, 0xFD, 0x4B, 0xEE, 0xF4, 0x50, 0xAF, 0x44, 0x46, 0xB9, 0xC9, 0xC5, 0x1F, 0x15, 0xB1, 0xA6, 0xA4, 0x00, 0x03, 0xF6, 0x7E, 0xD3, 0x93, 0x00, 0x00], [UInt8](msg.targetEntryId!))
        XCTAssertEqual("EX", msg.receivedRepresentingAddressType!)
        XCTAssertTrue(msg.sendRichInfo!)
        XCTAssertEqual(1352826876.0, msg.lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x4D, 0x4D, 0x53, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x50, 0x41, 0x4C, 0x49, 0x41, 0x52, 0x49, 0x4B, 0x2C, 0x20, 0x4D, 0x41, 0x52, 0x54, 0x49, 0x4E, 0x41, 0x34, 0x36, 0x46, 0x41, 0x41, 0x32, 0x37, 0x2D, 0x36, 0x36, 0x35, 0x37, 0x2D, 0x34, 0x38, 0x32, 0x34, 0x2D, 0x39, 0x30, 0x46, 0x38, 0x2D, 0x32, 0x32, 0x39, 0x42, 0x37, 0x36, 0x35, 0x35, 0x44, 0x41, 0x38, 0x38, 0x35, 0x00], [UInt8](msg.sentRepresentingSearchKey!))
        XCTAssertTrue(msg.trustSender!)
        XCTAssertFalse((msg.getProperty(set: .messaging, name: "IsSigned") as Bool?)!)
        XCTAssertEqual(0x00000000, (msg.senderEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.senderEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.senderEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.senderEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=MMS/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=PALIARIK, MARTINA46FAA27-6657-4824-90F8-229B7655DA885\u{00}", (msg.senderEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual(0, (msg.getProperty(id: .tagSenderFlags) as UInt32?)!)
        XCTAssertEqual("Paliarik, Martin", (msg.getProperty(id: .tagSenderName) as String?)!)
        XCTAssertEqual(UUID(uuidString: "0CD402F7-32B0-445C-B468-0D8A5A3C1B49"), msg.changeKey!.namespaceGuid)
        XCTAssertEqual([0x00, 0x00, 0x04, 0xD3, 0x26, 0x56], msg.changeKey!.localId)
        XCTAssertEqual(1, msg.predecessorChangeList!.values.count)
        XCTAssertEqual(UUID(uuidString: "0CD402F7-32B0-445C-B468-0D8A5A3C1B49"), msg.predecessorChangeList!.values[0].namespaceGuid)
        XCTAssertEqual([0x00, 0x00, 0x04, 0xD3, 0x26, 0x56], msg.predecessorChangeList!.values[0].localId)
        XCTAssertEqual(.normal, msg.sensitivity!)
        XCTAssertEqual([.unmodified, .hasAttachment, .fromMe], msg.messageFlags)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x4D, 0x4D, 0x53, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x50, 0x41, 0x4C, 0x49, 0x41, 0x52, 0x49, 0x4B, 0x2C, 0x20, 0x4D, 0x41, 0x52, 0x54, 0x49, 0x4E, 0x41, 0x34, 0x36, 0x46, 0x41, 0x41, 0x32, 0x37, 0x2D, 0x36, 0x36, 0x35, 0x37, 0x2D, 0x34, 0x38, 0x32, 0x34, 0x2D, 0x39, 0x30, 0x46, 0x38, 0x2D, 0x32, 0x32, 0x39, 0x42, 0x37, 0x36, 0x35, 0x35, 0x44, 0x41, 0x38, 0x38, 0x35, 0x00], [UInt8](msg.receivedRepresentingSearchKey!))
        XCTAssertFalse(msg.messageCcMe!)
        XCTAssertTrue(msg.smartNoAttach!)
        XCTAssertEqual(39730, (msg.getProperty(id: .tagInternetArticleNumber) as UInt32?)!)
        XCTAssertEqual("/O=MMS/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=PALIARIK, MARTINA46FAA27-6657-4824-90F8-229B7655DA885", msg.senderEmailAddress!)
        XCTAssertFalse(msg.`private`!)
        XCTAssertEqual(0, (msg.getProperty(id: .tagSentRepresentingFlags) as UInt32?)!)
        XCTAssertEqual("Paliarik, Martin", msg.lastModifierName!)
        XCTAssertNotNil(msg.transportMessageHeaders)
        XCTAssertEqual("This should pass into the kayako\r\n\r\n \r\n\r\nMartin Paliarik \r\nCompliance Management Administrator | Procurement Services\r\n\r\n \r\n\r\nKraft Foods Europe Procurement GmbH – organizačná zložka | Racianska 44\r\n| 814 99  Bratislava | Slovakia \r\n\r\nPhone: +421 2 494 01 592 | mpaliarik@mdlz.com\r\n<mailto:mpaliarik@mdlz.com>  | www.mondelezinternational.com\r\n<http://www.mondelezinternational.com/> \r\n\r\n \r\n\r\nWe are a member of the Mondelēz International family of companies from 2\r\nOctober 2012, \r\nbut we will still use the name Kraft Foods until our legal entity\r\nchanges in April 2013.\r\n\r\n \r\n\r\nDescription: Description: Description: Description: Description:\r\nDescription: Description: Q:\\062 Kraft Foods C&G Affairs Mondelez Launch\r\n2012-08\\E-Mail Signatur\\Bilder\\mdlz_rgb_logo_full_e-mail.png\r\n\r\n \r\n\r\nClick here\r\n<mailto:EBSC-Feedback@mdlz.com?subject=Your%20Opinion%20Counts!>  to\r\nprovide a feedback in English about our services\r\n\r\n \r\n\r\nThe Information contained in this e-mail, and any files transmitted with\r\nit, is confidential and may be legally privileged.  It is intended\r\nsolely for the addressee.  If you are not the intended recipient, please\r\nreturn the message by replying to it and then delete the message from\r\nyour computer.  Any disclosure, copying, distribution or action taken in\r\nreliance on its contents is prohibited and may be unlawful.\r\n\r\n \r\n\r\n", msg.body!)
        XCTAssertFalse(msg.agingDontAgeMe!)
        XCTAssertEqual(0x00000000, (msg.sentRepresentingEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.sentRepresentingEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.sentRepresentingEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.sentRepresentingEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=MMS/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=PALIARIK, MARTINA46FAA27-6657-4824-90F8-229B7655DA885\u{00}", (msg.sentRepresentingEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual(1033, msg.messageLocaleId!)
        XCTAssertEqual("Paliarik, Martin", msg.receivedRepresentingName!)
        XCTAssertTrue(msg.hasAttachments!)
        XCTAssertEqual("", msg.displayCc!)
        XCTAssertEqual("/o=MMS/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=Paliarik, Martina46faa27-6657-4824-90f8-229b7655da885", (msg.getProperty(id: .tagCreatorEmailAddress) as String?)!)
        XCTAssertEqual("email test", msg.conversationTopic!)
        XCTAssertEqual(0, msg.reminderDelta!)
        XCTAssertTrue(msg.rtfInSync!)
        XCTAssertEqual([.read], msg.access)
        XCTAssertEqual("/O=MMS/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=PALIARIK, MARTINA46FAA27-6657-4824-90F8-229B7655DA885", msg.receivedByEmailAddress!)
        XCTAssertEqual([], msg.sideEffects)
        XCTAssertEqual(" ", (msg.getProperty(id: .unknown0x5FE5) as String?)!)
        XCTAssertEqual("email test", msg.normalizedSubject!)
        XCTAssertFalse(msg.useTnef!)
        XCTAssertEqual(.notAssigned, msg.taskMode!)
        XCTAssertEqual(4294967295, msg.iconIndex!)
        XCTAssertEqual(1352826876.0, msg.creationTime!.timeIntervalSince1970)
        XCTAssertEqual(0x01, msg.conversationIndex!.header.reserved)
        XCTAssertEqual(0xCD, msg.conversationIndex!.header.currentFileTime.0)
        XCTAssertEqual(0xC1, msg.conversationIndex!.header.currentFileTime.1)
        XCTAssertEqual(0xC2, msg.conversationIndex!.header.currentFileTime.2)
        XCTAssertEqual(0x51, msg.conversationIndex!.header.currentFileTime.3)
        XCTAssertEqual(0x52, msg.conversationIndex!.header.currentFileTime.4)
        XCTAssertEqual(UUID(uuidString: "4F5ADF8F-7B67-4D20-BFEF-0C790A5F9177"), msg.conversationIndex!.header.guid)
        XCTAssertEqual(0, msg.conversationIndex!.responseLevels.count)
        XCTAssertEqual("EX", (msg.getProperty(id: .tagCreatorAddressType) as String?)!)
        XCTAssertEqual("mpaliarik@kraftfoods.com", msg.internetAccountName!)
        XCTAssertEqual(.html, msg.messageEditorFormat!)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x4D, 0x4D, 0x53, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x50, 0x41, 0x4C, 0x49, 0x41, 0x52, 0x49, 0x4B, 0x2C, 0x20, 0x4D, 0x41, 0x52, 0x54, 0x49, 0x4E, 0x41, 0x34, 0x36, 0x46, 0x41, 0x41, 0x32, 0x37, 0x2D, 0x36, 0x36, 0x35, 0x37, 0x2D, 0x34, 0x38, 0x32, 0x34, 0x2D, 0x39, 0x30, 0x46, 0x38, 0x2D, 0x32, 0x32, 0x39, 0x42, 0x37, 0x36, 0x35, 0x35, 0x44, 0x41, 0x38, 0x38, 0x35, 0x00], [UInt8](msg.senderSearchKey!))
        XCTAssertEqual("", msg.subjectPrefix!)
        XCTAssertFalse(msg.originatorDeliveryReportRequested!)
        XCTAssertEqual("[195.168.157.170]", (msg.getProperty(set: .internetHeaders, name: "x-originating-ip") as String?)!)
        XCTAssertTrue(msg.conversationIndexTracking!)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x4D, 0x4D, 0x53, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x50, 0x41, 0x4C, 0x49, 0x41, 0x52, 0x49, 0x4B, 0x2C, 0x20, 0x4D, 0x41, 0x52, 0x54, 0x49, 0x4E, 0x41, 0x34, 0x36, 0x46, 0x41, 0x41, 0x32, 0x37, 0x2D, 0x36, 0x36, 0x35, 0x37, 0x2D, 0x34, 0x38, 0x32, 0x34, 0x2D, 0x39, 0x30, 0x46, 0x38, 0x2D, 0x32, 0x32, 0x39, 0x42, 0x37, 0x36, 0x35, 0x35, 0x44, 0x41, 0x38, 0x38, 0x35, 0x00], [UInt8](msg.receivedBySearchKey!))
        XCTAssertEqual(0x00160000, msg.internetMailOverrideFormat!)
        XCTAssertEqual(.normal, msg.priority!)
        XCTAssertEqual("EX", msg.sentRepresentingAddressType!)
        XCTAssertTrue(msg.messageToMe!)
        XCTAssertEqual("/O=MMS/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=PALIARIK, MARTINA46FAA27-6657-4824-90F8-229B7655DA885", msg.sentRepresentingEmailAddress!)
        XCTAssertEqual("IPM.Note", msg.messageClass!)
        XCTAssertEqual("Paliarik, Martin", msg.receivedByName!)
        XCTAssertEqual(39730, (msg.getProperty(id: .unknown0x0E2F) as UInt32?)!)
        XCTAssertEqual("BT=1;II=01CDC1C251524F5ADF8F7B674D20BFEF0C790A5F9177;FIXUP=1.811;Version=Version 14.2 (Build 318.0), Stage=H4", (msg.getProperty(guid: UUID(uuidString: "33EBA41F-7AA8-422E-BE7B-79E1A98E54B3")!, name: "ConversationIndexTrackingEx") as String?)!)
        XCTAssertEqual(0, (msg.getProperty(id: .tagReceivedByFlags) as UInt32?)!)
        XCTAssertEqual("00000003\u{01}outlook.035d.mgd.msft.net/o=MMS/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=Paliarik, Martina46faa27-6657-4824-90f8-229b7655da885", msg.internetAccountStamp!)
        XCTAssertEqual("Internal", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-organization-authas") as String?)!)
        XCTAssertEqual("EX", (msg.getProperty(id: .tagSenderAddressType) as String?)!)
        XCTAssertEqual("035-CH1MMR1-005.035d.mgd.msft.net", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-organization-authsource") as String?)!)
        XCTAssertEqual([0x90, 0x00, 0x00, 0x00, 0x88, 0x1F, 0x1B, 0x82, 0xC3, 0x26, 0xBB, 0x8C], [UInt8]((msg.getProperty(id: .unknown0x3014) as Data?)!))
        XCTAssertEqual("04", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-organization-authmechanism") as String?)!)
        XCTAssertEqual("en-US", (msg.getProperty(set: .internetHeaders, name: "acceptlanguage") as String?)!)
        XCTAssertEqual("Paliarik, Martin", msg.sentRepresentingName!)
        XCTAssertEqual("mpaliarik@mdlz.com", msg.sentRepresentingSmtpAddress!)
        XCTAssertFalse(msg.reminderSet!)
        XCTAssertEqual("EX", msg.receivedByAddressType!)
        XCTAssertEqual("Paliarik, Martin\u{00}", msg.displayTo!)
        XCTAssertEqual(0x00000000, (msg.lastModifierEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.lastModifierEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.lastModifierEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.lastModifierEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=MMS/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=PALIARIK, MARTINA46FAA27-6657-4824-90F8-229B7655DA885\u{00}", (msg.lastModifierEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertFalse(msg.readReceiptRequested!)
        XCTAssertEqual(.readOnly, msg.accessLevel!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.storeSupportMask)
        XCTAssertEqual("email test", msg.subject!)
        XCTAssertEqual(.normal, msg.importance!)
        XCTAssertNotNil(msg.rtfCompressed)
        XCTAssertEqual("mpaliarik@mdlz.com", (msg.getProperty(id: .tagSenderSmtpAddress) as String?)!)

        XCTAssertEqual(1, msg.recipients.count)
        XCTAssertEqual("EX", msg.recipients[0].addressType!)
        XCTAssertTrue(msg.recipients[0].responsibility!)
        XCTAssertEqual("mpaliarik@mdlz.com", msg.recipients[0].smtpAddress!)
        XCTAssertEqual([DisplayTypeEx(rawValue: 0x40000000)], msg.recipients[0].displayTypeEx)
        XCTAssertEqual(.mailUser, msg.recipients[0].objectType!)
        XCTAssertEqual(0, (msg.recipients[0].getProperty(id: .unknown0x5FF5) as UInt32?)!)
        XCTAssertEqual("MPaliari", msg.recipients[0].account!)
        XCTAssertEqual(0, msg.recipients[0].rowid!)
        XCTAssertEqual(0x00000000, (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/o=MMS/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=Paliarik, Martina46faa27-6657-4824-90f8-229b7655da885\u{00}", (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual(0, (msg.recipients[0].getProperty(id: .unknown0x5FEF) as UInt32?)!)
        XCTAssertEqual(0, msg.recipients[0].recipientOrder!)
        XCTAssertEqual(" ", (msg.recipients[0].getProperty(id: .unknown0x5FE5) as String?)!)
        XCTAssertTrue(msg.recipients[0].sendRichInfo!)
        XCTAssertEqual(0x00000000, (msg.recipients[0].entryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.recipients[0].entryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.recipients[0].entryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.recipients[0].entryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=MMS/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=Paliarik, Martina46faa27-6657-4824-90f8-229b7655da885\u{00}", (msg.recipients[0].entryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual("Paliarik, Martin", msg.recipients[0].recipientDisplayName!)
        XCTAssertEqual([0x00, 0x14, 0x7E, 0x6B], [UInt8](msg.recipients[0].instanceKey!))
        XCTAssertEqual([0xEE, 0xE3, 0xF2, 0x84, 0xC3, 0x2F, 0x67, 0x4A, 0x8A, 0x99, 0x39, 0x7F, 0x42, 0xFF, 0x21, 0xAF], [UInt8]((msg.recipients[0].getProperty(id: .tagAbProviders) as Data?)!))
        XCTAssertEqual(.primaryRecipient, msg.recipients[0].recipientType!)
        XCTAssertEqual(.none, msg.recipients[0].recipientTrackStatus!)
        XCTAssertEqual("Paliarik, Martin", msg.recipients[0].displayName!)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x4D, 0x4D, 0x53, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x50, 0x41, 0x4C, 0x49, 0x41, 0x52, 0x49, 0x4B, 0x2C, 0x20, 0x4D, 0x41, 0x52, 0x54, 0x49, 0x4E, 0x41, 0x34, 0x36, 0x46, 0x41, 0x41, 0x32, 0x37, 0x2D, 0x36, 0x36, 0x35, 0x37, 0x2D, 0x34, 0x38, 0x32, 0x34, 0x2D, 0x39, 0x30, 0x46, 0x38, 0x2D, 0x32, 0x32, 0x39, 0x42, 0x37, 0x36, 0x35, 0x35, 0x44, 0x41, 0x38, 0x38, 0x35, 0x00], [UInt8](msg.recipients[0].searchKey!))
        XCTAssertEqual("/O=MMS/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=Paliarik, Martina46faa27-6657-4824-90f8-229b7655da885", msg.recipients[0].emailAddress!)
        XCTAssertEqual(.sendable, msg.recipients[0].recipientFlags!)
        XCTAssertEqual(.mailUser, msg.recipients[0].displayType!)
        XCTAssertEqual(0, (msg.recipients[0].getProperty(id: .unknown0x5FEB) as UInt32?)!)
        XCTAssertEqual(0, (msg.recipients[0].getProperty(id: .unknown0x5FF2) as UInt32?)!)
        XCTAssertEqual("Paliarik, Martin", msg.recipients[0].transmittableDisplayName!)
        XCTAssertEqual(0, (msg.recipients[0].getProperty(id: .tagRecipientResourceState) as UInt32?)!)

        XCTAssertEqual(1, msg.attachments.count)
        XCTAssertEqual(.attachment, msg.attachments[0].objectType!)
        XCTAssertEqual(.readOnly, msg.attachments[0].accessLevel!)
        XCTAssertEqual(1352826862.0, msg.attachments[0].lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual([.renderedInBody], msg.attachments[0].attachFlags)
        XCTAssertEqual([0x00, 0x00, 0x00, 0x00], [UInt8](msg.attachments[0].recordKey!))
        XCTAssertEqual(0, msg.attachments[0].attachmentLinkId!)
        XCTAssertEqual([], [UInt8](msg.attachments[0].attachEncoding!))
        XCTAssertEqual(0, msg.attachments[0].attachNumber!)
        XCTAssertNotNil(msg.attachments[0].attachDataBinary)
        XCTAssertEqual([.read], msg.attachments[0].access)
        XCTAssertEqual(1352826862.0, msg.attachments[0].creationTime!.timeIntervalSince1970)
        XCTAssertTrue(msg.attachments[0].attachmentHidden!)
        XCTAssertEqual("image001.png", msg.attachments[0].displayName!)
        XCTAssertEqual(".png", msg.attachments[0].attachExtension!)
        XCTAssertEqual("image001.png", msg.attachments[0].attachLongFilename!)
        XCTAssertEqual(79870665600.0, msg.attachments[0].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[0].storeSupportMask)
        XCTAssertEqual("image001.png@01CDC1CA.B3005370", msg.attachments[0].attachContentId!)
        XCTAssertEqual(0x00000048, msg.attachments[0].attachmentFlags!)
        XCTAssertEqual(79870665600.0, msg.attachments[0].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual(.byValue, msg.attachments[0].attachMethod!)
        XCTAssertEqual("image001.png", msg.attachments[0].attachFilename!)
        XCTAssertEqual(4294967295, msg.attachments[0].renderingPosition!)
        XCTAssertEqual("image/png", msg.attachments[0].attachMimeTag!)
        XCTAssertFalse(msg.attachments[0].attachmentContactPhoto!)
    }

    func testReadConfusedCat3() throws {
        let data = try getData(name: "TheConfusedCat/msgparser/forward with attachments and embedded images")
        let msg = try MsgFile(data: data)
        
        XCTAssertFalse(msg.deleteAfterSubmit!)
        XCTAssertEqual(.normal, msg.priority!)
        XCTAssertEqual(1488652243.0, msg.creationTime!.timeIntervalSince1970)
        XCTAssertEqual([], msg.sideEffects)
        XCTAssertEqual("", msg.originalAuthorName!)
        XCTAssertEqual(.notAssigned, msg.taskMode!)
        XCTAssertEqual(1488652243.0, msg.lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual("IPM.Note", msg.messageClass!)
        XCTAssertTrue(msg.rtfInSync!)
        XCTAssertEqual("16.0", msg.currentVersionName!)
        XCTAssertFalse(msg.recipientReassignmentProhibited!)
        XCTAssertEqual([0xFD, 0x7E, 0xFC, 0x13, 0x2D, 0x20, 0xBF, 0x41, 0xB0, 0xBA, 0x2D, 0x40, 0x0B, 0x78, 0xC5, 0x80], [UInt8](msg.searchKey!))
        XCTAssertEqual(4294967295, msg.iconIndex!)
        XCTAssertEqual(0, (msg.getProperty(id: .unknown0x1092) as UInt32?)!)
        XCTAssertEqual("Bosco Fraud Cases [ 2 of 8]", msg.conversationTopic!)
        XCTAssertFalse(msg.replyRequested!)
        XCTAssertFalse(msg.readReceiptRequested!)
        XCTAssertEqual([.read], msg.access)
        XCTAssertEqual(.normal, msg.originalSensitivity!)
        XCTAssertEqual(0x01, msg.conversationIndex!.header.reserved)
        XCTAssertEqual(0x01, msg.conversationIndex!.header.currentFileTime.0)
        XCTAssertEqual(0xD1, msg.conversationIndex!.header.currentFileTime.1)
        XCTAssertEqual(0x90, msg.conversationIndex!.header.currentFileTime.2)
        XCTAssertEqual(0xD9, msg.conversationIndex!.header.currentFileTime.3)
        XCTAssertEqual(0x49, msg.conversationIndex!.header.currentFileTime.4)
        XCTAssertEqual(UUID(uuidString: "2A1EA50C-E22B-5741-B8B0-41AFA2E3CBA3"), msg.conversationIndex!.header.guid)
        XCTAssertEqual(3, msg.conversationIndex!.responseLevels.count)
        XCTAssertEqual(0x38C1849F, msg.conversationIndex!.responseLevels[0].dcAndDeltaTime)
        XCTAssertEqual(0x40, msg.conversationIndex!.responseLevels[0].random)
        XCTAssertEqual(0x5E470080, msg.conversationIndex!.responseLevels[1].dcAndDeltaTime)
        XCTAssertEqual(0x5F, msg.conversationIndex!.responseLevels[1].random)
        XCTAssertEqual(0x5B000282, msg.conversationIndex!.responseLevels[2].dcAndDeltaTime)
        XCTAssertEqual(0x30, msg.conversationIndex!.responseLevels[2].random)
        XCTAssertEqual([0x3C, 0x3F, 0x78, 0x6D, 0x6C, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x3D, 0x22, 0x31, 0x2E, 0x30, 0x22, 0x20, 0x65, 0x6E, 0x63, 0x6F, 0x64, 0x69, 0x6E, 0x67, 0x3D, 0x22, 0x55, 0x54, 0x46, 0x2D, 0x38, 0x22, 0x20, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x61, 0x6C, 0x6F, 0x6E, 0x65, 0x3D, 0x22, 0x79, 0x65, 0x73, 0x22, 0x3F, 0x3E, 0x0D, 0x0A, 0x3C, 0x61, 0x3A, 0x63, 0x6C, 0x72, 0x4D, 0x61, 0x70, 0x20, 0x78, 0x6D, 0x6C, 0x6E, 0x73, 0x3A, 0x61, 0x3D, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x73, 0x63, 0x68, 0x65, 0x6D, 0x61, 0x73, 0x2E, 0x6F, 0x70, 0x65, 0x6E, 0x78, 0x6D, 0x6C, 0x66, 0x6F, 0x72, 0x6D, 0x61, 0x74, 0x73, 0x2E, 0x6F, 0x72, 0x67, 0x2F, 0x64, 0x72, 0x61, 0x77, 0x69, 0x6E, 0x67, 0x6D, 0x6C, 0x2F, 0x32, 0x30, 0x30, 0x36, 0x2F, 0x6D, 0x61, 0x69, 0x6E, 0x22, 0x20, 0x62, 0x67, 0x31, 0x3D, 0x22, 0x6C, 0x74, 0x31, 0x22, 0x20, 0x74, 0x78, 0x31, 0x3D, 0x22, 0x64, 0x6B, 0x31, 0x22, 0x20, 0x62, 0x67, 0x32, 0x3D, 0x22, 0x6C, 0x74, 0x32, 0x22, 0x20, 0x74, 0x78, 0x32, 0x3D, 0x22, 0x64, 0x6B, 0x32, 0x22, 0x20, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x31, 0x3D, 0x22, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x31, 0x22, 0x20, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x32, 0x3D, 0x22, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x32, 0x22, 0x20, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x33, 0x3D, 0x22, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x33, 0x22, 0x20, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x34, 0x3D, 0x22, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x34, 0x22, 0x20, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x35, 0x3D, 0x22, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x35, 0x22, 0x20, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x36, 0x3D, 0x22, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x36, 0x22, 0x20, 0x68, 0x6C, 0x69, 0x6E, 0x6B, 0x3D, 0x22, 0x68, 0x6C, 0x69, 0x6E, 0x6B, 0x22, 0x20, 0x66, 0x6F, 0x6C, 0x48, 0x6C, 0x69, 0x6E, 0x6B, 0x3D, 0x22, 0x66, 0x6F, 0x6C, 0x48, 0x6C, 0x69, 0x6E, 0x6B, 0x22, 0x2F, 0x3E], [UInt8]((msg.getProperty(set: .common, lid: 0x000085C3) as Data?)!))
        XCTAssertEqual("FW: ", msg.subjectPrefix!)
        XCTAssertTrue(msg.alternateRecipientAllowed!)
        XCTAssertEqual(" \r\n \r\nVan: Microsoft Outlook\r\n[mailto:MicrosoftExchange329e71ec88ae4615bbc36ab6ce41109e@coab.us] \r\nVerzonden: 11 April 2016 19:11\r\nAan: darlington@coab.us\r\nOnderwerp: Delivery delayed:RE: Bosco Fraud Cases [ 2 of 8]\r\n \r\nDelivery is delayed to these recipients or groups:\r\nDarren.vuzzo@myfloridalicence.com (Darren.vuzzo@myfloridalicence.com)\r\n<mailto:Darren.vuzzo@myfloridalicence.com> \r\nSubject: RE: Bosco Fraud Cases [ 2 of 8]\r\nThis message hasn't been delivered yet. Delivery will continue to be\r\nattempted.\r\nThe server will keep trying to deliver this message for the next 1\r\ndays, 19 hours and 57 minutes. You'll be notified if the message can't\r\nbe delivered by that time.\r\n\r\n\r\n\r\n\r\n\r\n\r\nDiagnostic information for administrators:\r\nGenerating server: ABMAIL13.ci.atlantic-beach.fl.us\r\nReceiving server: myfloridalicence.com (208.73.211.178)\r\nDarren.vuzzo@myfloridalicence.com\r\n<mailto:Darren.vuzzo@myfloridalicence.com> \r\nRemote Server at myfloridalicence.com (208.73.211.178) returned '400\r\n4.4.7 Message delayed'\r\n4/11/2016 4:58:21 PM - Remote Server at myfloridalicence.com\r\n(208.73.211.178) returned '441 4.4.1 Error encountered while\r\ncommunicating with primary target IP address: \"Failed to connect.\r\nWinsock error code: 10060, Win32 error code: 10060.\" Attempted failover\r\nto alternate host, but that did not succeed. Either there are no\r\nalternate hosts, or delivery failed to all alternate hosts. The last\r\nendpoint attempted was 208.73.211.178:25'\r\nOriginal message headers:\r\nReceived: from ABMAIL13.ci.atlantic-beach.fl.us (10.10.10.21) by\r\n ABMAIL13.ci.atlantic-beach.fl.us (10.10.10.21) with Microsoft SMTP\r\nServer\r\n (TLS) id 15.0.1076.9; Mon, 11 Apr 2016 09:08:47 -0400\r\nReceived: from ABMAIL13.ci.atlantic-beach.fl.us\r\n([fe80::3d58:a9bc:50f6:e563])\r\n by ABMAIL13.ci.atlantic-beach.fl.us ([fe80::3d58:a9bc:50f6:e563%17])\r\nwith\r\n mapi id 15.00.1076.000; Mon, 11 Apr 2016 09:08:47 -0400\r\nFrom: \"Arlington, Daniel\" <darlington@coab.us\r\n<mailto:darlington@coab.us> >\r\nTo: ERICKSON ENERGY <ericksonenergy@gmail.com\r\n<mailto:ericksonenergy@gmail.com> >, \"Reagan, Raina\"\r\n        <Raina.Reagan@myfloridalicense.com\r\n<mailto:Raina.Reagan@myfloridalicense.com> >\r\nCC: \"Darren.vuzzo@myfloridalicence.com\r\n<mailto:Darren.vuzzo@myfloridalicence.com> \"\r\n<Darren.vuzzo@myfloridalicence.com\r\n<mailto:Darren.vuzzo@myfloridalicence.com> >,\r\n        \"Rentfrow, Sandra\" <Sandra.Rentfrow@myfloridalicense.com\r\n<mailto:Sandra.Rentfrow@myfloridalicense.com> >, Don Ford\r\n        <dford@neptune-beach.com <mailto:dford@neptune-beach.com> >,\r\n\"Taylor, Rick\" <RATaylor@coj.net <mailto:RATaylor@coj.net> >,\r\n        \"JDouglas@coj.com <mailto:JDouglas@coj.com> \" <JDouglas@coj.com\r\n<mailto:JDouglas@coj.com> >, \"hwhite@sjcfl.us <mailto:hwhite@sjcfl.us> \"\r\n<hwhite@sjcfl.us <mailto:hwhite@sjcfl.us> >,\r\n        \"building@jaxbchfl.net <mailto:building@jaxbchfl.net> \"\r\n<building@jaxbchfl.net <mailto:building@jaxbchfl.net> >, Jessica Bazanos\r\n        <jessica.bazanos@gmail.com <mailto:jessica.bazanos@gmail.com> >\r\nSubject: RE: Bosco Fraud Cases [ 2 of 8]\r\nThread-Topic: Bosco Fraud Cases [ 2 of 8]\r\nThread-Index: AQHRkNlJKh6lDOIrV0G4sEGvouPLo5+EwThA\r\nDate: Mon, 11 Apr 2016 13:08:46 +0000\r\nMessage-ID:\r\n<73ade2cb375f4f39b9e210a57d087900@ABMAIL13.ci.atlantic-beach.fl.us\r\n<mailto:73ade2cb375f4f39b9e210a57d087900@ABMAIL13.ci.atlantic-beach.fl.u\r\ns> >\r\nReferences:\r\n<CAC+pJabatY3d=2QZJV3c62H0k=G+bySP5fjEMM=hU9YDZM2RvA@mail.gmail.com\r\n<mailto:CAC+pJabatY3d=2QZJV3c62H0k=G+bySP5fjEMM=hU9YDZM2RvA@mail.gmail.c\r\nom> >\r\nIn-Reply-To:\r\n<CAC+pJabatY3d=2QZJV3c62H0k=G+bySP5fjEMM=hU9YDZM2RvA@mail.gmail.com\r\n<mailto:CAC+pJabatY3d=2QZJV3c62H0k=G+bySP5fjEMM=hU9YDZM2RvA@mail.gmail.c\r\nom> >\r\nAccept-Language: en-US\r\nContent-Language: en-US\r\nX-MS-Has-Attach:\r\nX-MS-TNEF-Correlator:\r\nx-ms-exchange-transport-fromentityheader: Hosted\r\nx-originating-ip: [10.10.10.117]\r\nContent-Type: multipart/alternative;\r\n\r\nboundary=\"_000_73ade2cb375f4f39b9e210a57d087900ABMAIL13ciatlanticbeach_\"\r\nMIME-Version: 1.0\r\n", msg.body!)
        XCTAssertFalse(msg.agingDontAgeMe!)
        XCTAssertEqual([0x50, 0x4B, 0x03, 0x04, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0xE9, 0xDE, 0x0F, 0xBF, 0xFF, 0x00, 0x00, 0x00, 0x1C, 0x02, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x5B, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x5F, 0x54, 0x79, 0x70, 0x65, 0x73, 0x5D, 0x2E, 0x78, 0x6D, 0x6C, 0xAC, 0x91, 0xCB, 0x4E, 0xC3, 0x30, 0x10, 0x45, 0xF7, 0x48, 0xFC, 0x83, 0xE5, 0x2D, 0x4A, 0x9C, 0xB2, 0x40, 0x08, 0x25, 0xE9, 0x82, 0xC7, 0x8E, 0xC7, 0xA2, 0x7C, 0xC0, 0xC8, 0x99, 0x24, 0x16, 0xC9, 0xD8, 0xB2, 0xA7, 0x55, 0xFB, 0xF7, 0x4C, 0xD2, 0x54, 0x42, 0xA8, 0x20, 0x16, 0x6C, 0x2C, 0xD9, 0x33, 0xF7, 0x9E, 0x3B, 0xE3, 0x72, 0xBD, 0x1F, 0x07, 0xB5, 0xC3, 0x98, 0x9C, 0xA7, 0x4A, 0xAF, 0xF2, 0x42, 0x2B, 0x24, 0xEB, 0x1B, 0x47, 0x5D, 0xA5, 0xDF, 0x37, 0x4F, 0xD9, 0xAD, 0x56, 0x89, 0x81, 0x1A, 0x18, 0x3C, 0x61, 0xA5, 0x0F, 0x98, 0xF4, 0xBA, 0xBE, 0xBC, 0x28, 0x37, 0x87, 0x80, 0x49, 0x89, 0x9A, 0x52, 0xA5, 0x7B, 0xE6, 0x70, 0x67, 0x4C, 0xB2, 0x3D, 0x8E, 0x90, 0x72, 0x1F, 0x90, 0xA4, 0xD2, 0xFA, 0x38, 0x02, 0xCB, 0x35, 0x76, 0x26, 0x80, 0xFD, 0x80, 0x0E, 0xCD, 0x75, 0x51, 0xDC, 0x18, 0xEB, 0x89, 0x91, 0x38, 0xE3, 0xC9, 0x43, 0xD7, 0xE5, 0x03, 0xB6, 0xB0, 0x1D, 0x58, 0x3D, 0xEE, 0xE5, 0xF9, 0x98, 0x24, 0xE2, 0x90, 0xB4, 0xBA, 0x3F, 0x36, 0x4E, 0xAC, 0x4A, 0x43, 0x08, 0x83, 0xB3, 0xC0, 0x92, 0xD4, 0xEC, 0xA8, 0xF9, 0x46, 0xC9, 0x16, 0x42, 0x2E, 0xCA, 0xB9, 0x27, 0xF5, 0x2E, 0xA4, 0x2B, 0x89, 0xA1, 0xCD, 0x59, 0xC2, 0x54, 0xF9, 0x19, 0xB0, 0xE8, 0x5E, 0x65, 0x35, 0xD1, 0x35, 0xA8, 0xDE, 0x20, 0xF2, 0x0B, 0x8C, 0x12, 0xC3, 0xB0, 0x0C, 0x89, 0x5F, 0xCF, 0x67, 0x20, 0x19, 0x2D, 0xE6, 0xBF, 0x3B, 0x9E, 0x89, 0xEC, 0xDB, 0xD6, 0x59, 0x6C, 0xBC, 0xDD, 0x8E, 0xB2, 0x8E, 0x7C, 0x36, 0x5E, 0xCC, 0x4E, 0xC1, 0xFF, 0x14, 0x60, 0xF5, 0x3F, 0xE8, 0x13, 0xD3, 0xCC, 0x7F, 0x5B, 0x7F, 0x02, 0x00, 0x00, 0xFF, 0xFF, 0x03, 0x00, 0x50, 0x4B, 0x03, 0x04, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0xA5, 0xD6, 0xA7, 0xE7, 0xC0, 0x00, 0x00, 0x00, 0x36, 0x01, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x5F, 0x72, 0x65, 0x6C, 0x73, 0x2F, 0x2E, 0x72, 0x65, 0x6C, 0x73, 0x84, 0x8F, 0xCF, 0x6A, 0xC3, 0x30, 0x0C, 0x87, 0xEF, 0x85, 0xBD, 0x83, 0xD1, 0x7D, 0x51, 0xD2, 0xC3, 0x18, 0x25, 0x76, 0x2F, 0xA5, 0x90, 0x43, 0x2F, 0xA3, 0x7D, 0x00, 0xE1, 0x28, 0x7F, 0x68, 0x22, 0x1B, 0xDB, 0x1B, 0xEB, 0xDB, 0x4F, 0xC7, 0x06, 0x0A, 0xBB, 0x08, 0x84, 0xA4, 0xEF, 0xF7, 0xA9, 0x3D, 0xFE, 0xAE, 0x8B, 0xF9, 0xE1, 0x94, 0xE7, 0x20, 0x16, 0x9A, 0xAA, 0x06, 0xC3, 0xE2, 0x43, 0x3F, 0xCB, 0x68, 0xE1, 0x76, 0x3D, 0xBF, 0x7F, 0x82, 0xC9, 0x85, 0xA4, 0xA7, 0x25, 0x08, 0x5B, 0x78, 0x70, 0x86, 0xA3, 0x7B, 0xDB, 0xB5, 0x5F, 0xBC, 0x50, 0xD1, 0xA3, 0x3C, 0xCD, 0x31, 0x1B, 0xA5, 0x48, 0xB6, 0x30, 0x95, 0x12, 0x0F, 0x88, 0xD9, 0x4F, 0xBC, 0x52, 0xAE, 0x42, 0x64, 0xD1, 0xC9, 0x10, 0xD2, 0x4A, 0x45, 0xDB, 0x34, 0x62, 0x24, 0x7F, 0xA7, 0x91, 0x71, 0x5F, 0xD7, 0x1F, 0x98, 0x9E, 0x19, 0xE0, 0x36, 0x4C, 0xD3, 0xF5, 0x16, 0x52, 0xD7, 0x37, 0x60, 0xAE, 0x8F, 0xA8, 0xC9, 0xFF, 0xB3, 0xC3, 0x30, 0xCC, 0x9E, 0x4F, 0xC1, 0x7F, 0xAF, 0x2C, 0xE5, 0x45, 0x04, 0x6E, 0x37, 0x94, 0x4C, 0x69, 0xE4, 0x62, 0xA1, 0xA8, 0x2F, 0xE3, 0x53, 0xBD, 0x90, 0xA8, 0x65, 0xAA, 0xD4, 0x1E, 0xD0, 0xB5, 0xB8, 0xF9, 0xD6, 0xFD, 0x01, 0x00, 0x00, 0xFF, 0xFF, 0x03, 0x00, 0x50, 0x4B, 0x03, 0x04, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0x6B, 0x79, 0x96, 0x16, 0x83, 0x00, 0x00, 0x00, 0x8A, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x4D, 0x61, 0x6E, 0x61, 0x67, 0x65, 0x72, 0x2E, 0x78, 0x6D, 0x6C, 0x0C, 0xCC, 0x4D, 0x0A, 0xC3, 0x20, 0x10, 0x40, 0xE1, 0x7D, 0xA1, 0x77, 0x90, 0xD9, 0x37, 0x63, 0xBB, 0x28, 0x45, 0x62, 0xB2, 0xCB, 0xAE, 0xBB, 0xF6, 0x00, 0x43, 0x9C, 0x1A, 0x41, 0xC7, 0xA0, 0xD2, 0x9F, 0xDB, 0xD7, 0xE5, 0xE3, 0x83, 0x37, 0xCE, 0xDF, 0x14, 0xD5, 0x9B, 0x4B, 0x0D, 0x59, 0x2C, 0x9C, 0x07, 0x0D, 0x8A, 0x65, 0xCD, 0x2E, 0x88, 0xB7, 0xF0, 0x7C, 0x2C, 0xA7, 0x1B, 0xA8, 0xDA, 0x48, 0x1C, 0xC5, 0x2C, 0x6C, 0xE1, 0xC7, 0x15, 0xE6, 0xE9, 0x78, 0x18, 0xC9, 0xB4, 0x8D, 0x13, 0xDF, 0x49, 0xC8, 0x73, 0x51, 0x7D, 0x23, 0xD5, 0x90, 0x85, 0xAD, 0xB5, 0xDD, 0x20, 0xD6, 0xB5, 0x2B, 0xD5, 0x21, 0xEF, 0x2C, 0xDD, 0x5E, 0xB9, 0x24, 0x6A, 0x3D, 0x8B, 0x47, 0x57, 0xE8, 0xD3, 0xF7, 0x29, 0xE2, 0x45, 0xEB, 0x2B, 0x26, 0x0A, 0x02, 0x38, 0xFD, 0x01, 0x00, 0x00, 0xFF, 0xFF, 0x03, 0x00, 0x50, 0x4B, 0x03, 0x04, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0xDD, 0x8C, 0x2A, 0xD7, 0x97, 0x07, 0x00, 0x00, 0xD2, 0x20, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x31, 0x2E, 0x78, 0x6D, 0x6C, 0xEC, 0x59, 0x5F, 0x8B, 0x1B, 0xC9, 0x11, 0x7F, 0x0F, 0xE4, 0x3B, 0x0C, 0xF3, 0x2E, 0xEB, 0xDF, 0x8C, 0xFE, 0x2C, 0x96, 0x0F, 0x69, 0x24, 0x79, 0xCF, 0xDE, 0xB5, 0x8D, 0x25, 0x3B, 0xDC, 0x63, 0xAF, 0xD4, 0x9A, 0x69, 0x6F, 0xCF, 0xB4, 0xE8, 0x6E, 0xED, 0x5A, 0x1C, 0x86, 0xE0, 0x7B, 0xCA, 0x4B, 0x20, 0x70, 0x77, 0xE4, 0x25, 0x90, 0xB7, 0x3C, 0x1C, 0xC7, 0x1D, 0xDC, 0x41, 0x8E, 0xBC, 0xE4, 0xC3, 0x18, 0x6C, 0x92, 0xCB, 0x87, 0x48, 0x75, 0xCF, 0x68, 0xD4, 0x2D, 0xB5, 0xEC, 0xDD, 0xC5, 0x04, 0x13, 0x76, 0x05, 0x8B, 0xA6, 0xE7, 0x57, 0xD5, 0xBF, 0xAE, 0xAA, 0xAE, 0x2A, 0x75, 0xDF, 0xFD, 0xEC, 0x65, 0x4A, 0xBD, 0x0B, 0xCC, 0x05, 0x61, 0x59, 0xCF, 0xAF, 0xDF, 0xA9, 0xF9, 0x1E, 0xCE, 0x66, 0x6C, 0x4E, 0xB2, 0xB8, 0xE7, 0x3F, 0x9B, 0x8E, 0x2B, 0x1D, 0xDF, 0x13, 0x12, 0x65, 0x73, 0x44, 0x59, 0x86, 0x7B, 0xFE, 0x1A, 0x0B, 0xFF, 0xB3, 0x7B, 0xBF, 0xFD, 0xCD, 0x5D, 0x74, 0x24, 0x13, 0x9C, 0x62, 0x0F, 0xE4, 0x33, 0x71, 0x84, 0x7A, 0x7E, 0x22, 0xE5, 0xF2, 0xA8, 0x5A, 0x15, 0x33, 0x18, 0x46, 0xE2, 0x0E, 0x5B, 0xE2, 0x0C, 0xDE, 0x2D, 0x18, 0x4F, 0x91, 0x84, 0x47, 0x1E, 0x57, 0xE7, 0x1C, 0x5D, 0x82, 0xDE, 0x94, 0x56, 0x1B, 0xB5, 0x5A, 0xAB, 0x9A, 0x22, 0x92, 0xF9, 0x5E, 0x86, 0x52, 0x50, 0xFB, 0x10, 0x65, 0x92, 0x31, 0xAE, 0x54, 0x22, 0xFF, 0xDE, 0x46, 0xF9, 0x88, 0xC2, 0x0C, 0x99, 0x14, 0x6A, 0x60, 0x46, 0xF9, 0x44, 0xA9, 0xC6, 0xB6, 0x84, 0x06, 0xCF, 0xCF, 0xEB, 0x0A, 0x22, 0xD6, 0x22, 0xA2, 0xDC, 0xBB, 0x40, 0xB4, 0xE7, 0xC3, 0x44, 0x73, 0x76, 0x39, 0xC5, 0x2F, 0xA5, 0xEF, 0x51, 0x24, 0x24, 0xBC, 0xE8, 0xF9, 0x35, 0xFD, 0xE7, 0x57, 0xEF, 0xDD, 0xAD, 0xA2, 0xA3, 0x42, 0x88, 0xCA, 0x03, 0xB2, 0x86, 0xDC, 0x58, 0xFF, 0x15, 0x72, 0x85, 0xC0, 0xFC, 0xBC, 0xA1, 0xE7, 0xE4, 0xF1, 0x59, 0x39, 0x69, 0x10, 0x84, 0x41, 0xAB, 0x5F, 0xEA, 0xD7, 0x00, 0x2A, 0xF7, 0x71, 0xA3, 0xF6, 0xA8, 0x35, 0x6A, 0x95, 0xFA, 0x34, 0x00, 0xCD, 0x66, 0xB0, 0xD4, 0x9C, 0x8B, 0xAD, 0xB3, 0xDD, 0x88, 0x82, 0x02, 0x6B, 0x80, 0xF2, 0xAF, 0x0E, 0xDD, 0xC3, 0xF6, 0xB0, 0x59, 0xB7, 0xF0, 0x86, 0xFE, 0xE6, 0x1E, 0xE7, 0x7E, 0xA8, 0x3E, 0x16, 0x5E, 0x83, 0x72, 0xFD, 0xC1, 0x1E, 0x7E, 0x3C, 0x8E, 0xC0, 0x8A, 0x16, 0x5E, 0x83, 0x72, 0x7C, 0xB8, 0x87, 0x0F, 0x07, 0xDD, 0xC1, 0xD0, 0xD6, 0xAF, 0x41, 0x39, 0xBE, 0xB5, 0x87, 0x6F, 0xD7, 0xFA, 0xC3, 0xA0, 0x6D, 0xE9, 0xD7, 0xA0, 0x84, 0x92, 0xEC, 0x7C, 0x0F, 0x5D, 0x0B, 0x5B, 0xCD, 0x68, 0xB3, 0xDA, 0x12, 0xB2, 0x60, 0xF4, 0xD8, 0x09, 0xEF, 0x86, 0xC1, 0xB8, 0xDD, 0x28, 0x94, 0x6F, 0x51, 0x10, 0x0D, 0x65, 0x78, 0xA9, 0x29, 0x16, 0x2C, 0x93, 0x07, 0x83, 0x2D, 0x45, 0x2F, 0x18, 0x1F, 0x03, 0x42, 0x21, 0x29, 0x92, 0x24, 0xF3, 0xE4, 0x7A, 0x89, 0x17, 0x68, 0x06, 0x71, 0x1C, 0x21, 0x4A, 0xCE, 0x38, 0xF1, 0x4E, 0x48, 0x9C, 0x40, 0xE4, 0x2D, 0x51, 0xC6, 0x04, 0x0C, 0xD7, 0x1A, 0xB5, 0x71, 0xAD, 0x09, 0xFF, 0xD5, 0x27, 0xD0, 0xDF, 0xB4, 0x4B, 0xD1, 0x11, 0x46, 0x86, 0xB4, 0x22, 0x06, 0x54, 0xC4, 0xDE, 0x90, 0x22, 0xE4, 0x89, 0x19, 0x27, 0x4B, 0xD9, 0xF3, 0x1F, 0x80, 0x56, 0xDF, 0x80, 0xBC, 0xFD, 0xE5, 0x97, 0x37, 0xAF, 0x7F, 0x7E, 0xF3, 0xFA, 0xEF, 0x6F, 0xBE, 0xFA, 0xEA, 0xCD, 0xEB, 0x1F, 0x8A, 0xB9, 0xB5, 0x2A, 0x4B, 0xEE, 0x18, 0x65, 0xB1, 0x29, 0xF7, 0xEB, 0xDF, 0xFE, 0xF4, 0x9F, 0xBF, 0xFC, 0xDE, 0xFB, 0xF7, 0x4F, 0x7F, 0xFD, 0xF5, 0xEB, 0x6F, 0xF2, 0xA9, 0x77, 0xF1, 0xC2, 0xC4, 0xBF, 0xFB, 0xFE, 0x0F, 0xEF, 0xFE, 0xF1, 0xCF, 0xF7, 0xA9, 0x87, 0x15, 0x6F, 0x4D, 0xF1, 0xF6, 0xDB, 0x1F, 0xDF, 0xFD, 0xFC, 0xE3, 0xDB, 0x3F, 0xFF, 0xF1, 0x5F, 0xDF, 0x7D, 0xED, 0xD0, 0xDE, 0xE7, 0xE8, 0xCC, 0x84, 0x4F, 0x49, 0x8A, 0x85, 0xF7, 0x08, 0x5F, 0x7A, 0x4F, 0x59, 0x0A, 0x0B, 0x74, 0xF0, 0xC7, 0x67, 0xFC, 0x7A, 0x12, 0xD3, 0x04, 0x11, 0x53, 0xA2, 0x9F, 0xC5, 0x02, 0x65, 0x48, 0xCD, 0xE2, 0xD0, 0x3F, 0x92, 0x89, 0x85, 0x7E, 0xB4, 0x46, 0x14, 0x39, 0x70, 0x03, 0x6C, 0xDB, 0xF1, 0x39, 0x87, 0x5C, 0xE3, 0x02, 0xDE, 0x5F, 0xBD, 0xB0, 0x08, 0x4F, 0x12, 0xBE, 0x92, 0xC4, 0xA1, 0xF1, 0x61, 0x92, 0x5A, 0xC0, 0x53, 0xC6, 0xE8, 0x80, 0x71, 0xA7, 0x15, 0x1E, 0xAA, 0xB9, 0x0C, 0x33, 0x4F, 0x57, 0x59, 0xEC, 0x9E, 0x9C, 0xAF, 0x4C, 0xDC, 0x53, 0x84, 0x2E, 0x5C, 0x73, 0x47, 0x28, 0xB3, 0xBC, 0x3C, 0x5A, 0x2D, 0x21, 0xCB, 0x12, 0x97, 0xCA, 0x28, 0xC1, 0x16, 0xCD, 0x27, 0x14, 0xB2, 0x36, 0x8A, 0x71, 0x86, 0xA5, 0xA7, 0xDE, 0xB1, 0x73, 0x8C, 0x1D, 0xAB, 0xFB, 0x82, 0x10, 0xCB, 0xAE, 0xA7, 0x64, 0xC6, 0x99, 0x60, 0x0B, 0xE9, 0x7D, 0x41, 0xBC, 0x01, 0x22, 0x4E, 0x93, 0x4C, 0xC9, 0x99, 0x15, 0x4D, 0x5B, 0xA1, 0x63, 0x92, 0x82, 0x5F, 0xD6, 0x2E, 0x82, 0xE0, 0x6F, 0xCB, 0x36, 0xA7, 0xCF, 0xBD, 0x01, 0xA3, 0xAE, 0x55, 0x0F, 0xF1, 0x85, 0x8D, 0x84, 0xBD, 0x81, 0xA8, 0x83, 0xFC, 0x14, 0x53, 0xCB, 0x8C, 0xF7, 0xD1, 0x4A, 0xA2, 0xD4, 0xA5, 0x72, 0x8A, 0x52, 0x6A, 0x1A, 0xFC, 0x04, 0xC9, 0xC4, 0x45, 0x72, 0xB2, 0xE6, 0x33, 0x13, 0x37, 0x12, 0x12, 0x3C, 0x1D, 0x63, 0xCA, 0xBC, 0xD1, 0x1C, 0x0B, 0xE1, 0x92, 0x79, 0xCC, 0x61, 0xBD, 0x86, 0xD3, 0x1F, 0x42, 0x9A, 0x71, 0xBB, 0xFD, 0x94, 0xAE, 0x53, 0x1B, 0xC9, 0x25, 0x39, 0x77, 0xE9, 0x3C, 0x41, 0x8C, 0x99, 0xC8, 0x21, 0x3B, 0x8F, 0x12, 0x94, 0x2E, 0x5D, 0xD8, 0x09, 0xC9, 0x12, 0x13, 0xFB, 0xB9, 0x38, 0x87, 0x10, 0x45, 0xDE, 0x13, 0x26, 0x5D, 0xF0, 0x53, 0x66, 0xEF, 0x10, 0xF5, 0x0C, 0x7E, 0x40, 0xD9, 0x41, 0x77, 0x3F, 0x27, 0xD8, 0x72, 0xF7, 0x87, 0xB3, 0xC1, 0x33, 0xC8, 0xB0, 0x26, 0xA5, 0x6D, 0x80, 0xA8, 0x37, 0x2B, 0xEE, 0xF0, 0xE5, 0x7D, 0xCC, 0xAC, 0xF8, 0x9D, 0xAC, 0xE9, 0x02, 0x61, 0x57, 0xAA, 0xE9, 0xF3, 0xD4, 0x4A, 0xB1, 0x7D, 0x4E, 0x9C, 0xD1, 0x31, 0x58, 0xC5, 0x56, 0x68, 0x9F, 0x60, 0x4C, 0xD1, 0x25, 0x9A, 0x63, 0xEC, 0x3D, 0xFB, 0xDC, 0xC1, 0x60, 0xC0, 0x96, 0x96, 0xCD, 0xB7, 0xA4, 0x1F, 0x24, 0x90, 0x55, 0x8E, 0xB1, 0x2B, 0xB0, 0x1E, 0x20, 0x3B, 0x56, 0xD5, 0x73, 0x86, 0x05, 0xF6, 0x74, 0x77, 0xB3, 0x9F, 0x27, 0x4F, 0x88, 0xB0, 0x42, 0x76, 0x82, 0x63, 0x76, 0x80, 0xCF, 0xE9, 0x7A, 0x27, 0xF1, 0xAC, 0x51, 0x96, 0x22, 0x7E, 0x48, 0xF3, 0x23, 0xF0, 0xBA, 0x69, 0xF3, 0x11, 0x94, 0x3A, 0xE8, 0xD7, 0xF6, 0x29, 0x3C, 0xA6, 0xB3, 0x73, 0x13, 0xF8, 0x88, 0x40, 0x17, 0x08, 0xF1, 0xE2, 0x34, 0xCA, 0x63, 0x01, 0x3A, 0x8C, 0xE0, 0x3E, 0xA8, 0xF5, 0x49, 0x82, 0xAC, 0x02, 0xA6, 0x9E, 0x85, 0x3B, 0x5E, 0xD7, 0xDC, 0xF2, 0xDF, 0x55, 0xF6, 0x18, 0xEC, 0xCB, 0x17, 0x16, 0x8D, 0x2B, 0xEC, 0x4B, 0x90, 0xC1, 0xD7, 0x96, 0x81, 0xC4, 0x6E, 0xCA, 0xBC, 0xD7, 0x36, 0x53, 0x44, 0xAD, 0x09, 0xB6, 0x01, 0x33, 0x45, 0xD0, 0x65, 0xB8, 0xD2, 0x2D, 0x88, 0x58, 0xEE, 0xDF, 0x8A, 0xA8, 0xE2, 0xAA, 0xC5, 0x56, 0x4E, 0xB9, 0x85, 0xBD, 0x69, 0xB7, 0x6E, 0x80, 0xF6, 0xC8, 0x6A, 0x7A, 0x52, 0x92, 0x7D, 0xB0, 0x03, 0xDA, 0xE9, 0x7D, 0xC2, 0xFF, 0x4D, 0xEF, 0xE3, 0x08, 0xC5, 0x8F, 0xD3, 0xF5, 0xB8, 0x15, 0x5B, 0x29, 0xEB, 0x9A, 0xFD, 0xCE, 0xA1, 0x94, 0x72, 0xBC, 0xD3, 0xE5, 0x1C, 0xC2, 0xED, 0xF6, 0x36, 0x11, 0xE3, 0x73, 0xF2, 0xE9, 0xB7, 0x36, 0x43, 0xB4, 0xCA, 0x9E, 0x60, 0xA8, 0x26, 0xFB, 0x49, 0xE3, 0xB6, 0xB3, 0xB9, 0xED, 0x6C, 0xE0, 0x20, 0xE0, 0xFF, 0xBC, 0xB3, 0x39, 0xB4, 0x9F, 0x6F, 0xFB, 0x99, 0x43, 0x5D, 0xC7, 0x6D, 0x3F, 0xE3, 0x43, 0x9F, 0x71, 0xDB, 0xCF, 0x14, 0x47, 0x2C, 0x1F, 0xA7, 0x9F, 0xD9, 0xB6, 0x30, 0xD0, 0xDD, 0xA8, 0x63, 0x8F, 0xFC, 0xBC, 0x47, 0x9F, 0xFE, 0xA4, 0x87, 0x0F, 0x7F, 0x16, 0x84, 0xD2, 0x89, 0x5C, 0x53, 0x7C, 0x22, 0xF4, 0xF9, 0x8F, 0x80, 0x9F, 0x35, 0xF3, 0x31, 0x0C, 0x2A, 0x41, 0x7D, 0xF4, 0x89, 0xCB, 0xD3, 0xC0, 0x65, 0x02, 0x5F, 0x55, 0x9D, 0x83, 0x19, 0x2C, 0x5C, 0xCC, 0x91, 0x96, 0xF1, 0x38, 0x93, 0xBF, 0x23, 0x32, 0x99, 0x24, 0x68, 0x09, 0x87, 0x44, 0x75, 0x5F, 0x29, 0x89, 0x45, 0xA1, 0x3A, 0x16, 0xDE, 0x92, 0x09, 0x38, 0x3B, 0xD2, 0xC3, 0x4E, 0xDD, 0x0A, 0x4F, 0x57, 0xE9, 0x29, 0x9B, 0xE7, 0x87, 0x9E, 0xF5, 0xBA, 0x3A, 0xE0, 0xCC, 0x4B, 0xAB, 0x40, 0x72, 0x3B, 0x5E, 0x0B, 0xCB, 0x71, 0x38, 0xAF, 0x92, 0x39, 0xBA, 0xD5, 0xDE, 0x1E, 0xE4, 0x95, 0xEA, 0x35, 0xDB, 0x58, 0x9F, 0xB8, 0x6E, 0x08, 0x28, 0xD9, 0xEB, 0x90, 0x30, 0x26, 0xB3, 0x49, 0x34, 0x1D, 0x24, 0xDA, 0x9B, 0x41, 0x65, 0x24, 0x7D, 0xBE, 0x0B, 0x46, 0x73, 0x90, 0xD0, 0x2B, 0xFB, 0x28, 0x2C, 0xBA, 0x0E, 0x16, 0x1D, 0xA5, 0x7E, 0xE3, 0xAA, 0x3D, 0x16, 0x40, 0xAD, 0xF4, 0x0A, 0x54, 0x27, 0x0F, 0x7E, 0xAD, 0xF7, 0xFC, 0x30, 0x00, 0x11, 0x10, 0x82, 0x63, 0x39, 0xE8, 0xD1, 0xE7, 0xCA, 0x4F, 0xB9, 0xAB, 0x37, 0xDE, 0xD5, 0xCE, 0xFC, 0x98, 0x9E, 0x3E, 0x64, 0x4C, 0x2B, 0x02, 0xA0, 0xCF, 0xDE, 0x44, 0xC0, 0xD6, 0xD3, 0x5D, 0xC5, 0xF5, 0xE0, 0xF2, 0xD4, 0xEA, 0xF2, 0x50, 0xBB, 0x82, 0xA7, 0x2D, 0x12, 0x46, 0xB8, 0xD9, 0x24, 0xB4, 0x65, 0x74, 0x87, 0x27, 0x12, 0xF8, 0x35, 0x5C, 0x44, 0xA7, 0x1A, 0xBD, 0x0A, 0x8D, 0xEB, 0xFA, 0xBA, 0xBB, 0x75, 0xA9, 0x45, 0x4F, 0x99, 0x42, 0xCF, 0x07, 0xA1, 0xB5, 0xA5, 0xD1, 0xEE, 0xBC, 0x8F, 0xC5, 0x4D, 0x7D, 0x0D, 0x72, 0xBB, 0xB9, 0x81, 0x66, 0x66, 0xA6, 0xA0, 0x99, 0x77, 0xD9, 0xF3, 0x5B, 0xCD, 0x10, 0x42, 0x66, 0x86, 0x96, 0x3D, 0x7F, 0x01, 0x67, 0xC7, 0xF0, 0x35, 0x5D, 0x42, 0xEC, 0x08, 0xF5, 0xD3, 0x0B, 0xD1, 0x18, 0xAE, 0x60, 0x66, 0x92, 0xE7, 0x1B, 0xFE, 0x26, 0x99, 0x65, 0xC9, 0x85, 0x1C, 0x22, 0x91, 0xE4, 0x06, 0xD7, 0x49, 0x27, 0xCF, 0x06, 0x29, 0x91, 0x98, 0x7B, 0x94, 0xA4, 0x3D, 0x5F, 0x2D, 0xBF, 0x74, 0x03, 0xCD, 0x74, 0x0E, 0xD1, 0xDC, 0xEA, 0x0D, 0x48, 0x08, 0x9F, 0x2C, 0xB9, 0x2E, 0xA4, 0x95, 0x4F, 0x8D, 0x1C, 0x38, 0xDD, 0x76, 0x32, 0x5E, 0x2C, 0xF0, 0x4C, 0x9A, 0x6E, 0x37, 0x46, 0x94, 0xA5, 0xF3, 0x47, 0xC8, 0xF0, 0x79, 0xAE, 0x70, 0xBE, 0xD5, 0xE2, 0x37, 0x07, 0x2B, 0x49, 0xB6, 0x02, 0x77, 0x4F, 0x92, 0xF9, 0xA5, 0x77, 0x46, 0x57, 0xFC, 0x29, 0x82, 0x10, 0x0B, 0xDB, 0x75, 0x65, 0xC0, 0x39, 0x11, 0x70, 0x85, 0x50, 0xCF, 0xAD, 0x39, 0x27, 0x70, 0x29, 0x56, 0x26, 0xB2, 0x6D, 0xFC, 0xED, 0x14, 0xA6, 0x22, 0xED, 0x9A, 0xB7, 0x52, 0x3A, 0x86, 0xF2, 0x71, 0x44, 0x97, 0x09, 0x2A, 0x2A, 0x8A, 0x99, 0xCC, 0x73, 0xB8, 0x4E, 0xE5, 0x25, 0x1D, 0xFD, 0x54, 0xDA, 0xC0, 0x78, 0x2A, 0xD6, 0x0C, 0x06, 0x35, 0x4C, 0x52, 0x14, 0xC2, 0xB3, 0x58, 0x15, 0x58, 0xD3, 0xA8, 0x56, 0x35, 0x2D, 0xAB, 0x46, 0xCE, 0xE1, 0x60, 0xD5, 0xFD, 0xB0, 0x90, 0xB2, 0x9C, 0x91, 0x34, 0xB7, 0x35, 0xD3, 0xCA, 0x2A, 0xAA, 0x6A, 0xBA, 0xB3, 0x98, 0x35, 0xC3, 0xA6, 0x0C, 0xEC, 0xD8, 0xF2, 0x66, 0x45, 0xDE, 0x60, 0xB5, 0x31, 0x31, 0xE4, 0x34, 0xB3, 0xC2, 0xE7, 0xA9, 0x7B, 0x37, 0xE5, 0x76, 0x37, 0xB9, 0x6E, 0xA7, 0x4F, 0x28, 0xAB, 0x04, 0x18, 0xBC, 0xB4, 0x9F, 0xA3, 0xEA, 0x5E, 0xA1, 0x20, 0x18, 0xD4, 0xB6, 0x93, 0x59, 0xD4, 0x14, 0xE3, 0xFD, 0x34, 0xAC, 0x72, 0x76, 0x31, 0x6A, 0xD7, 0x8E, 0xCD, 0x02, 0x3F, 0x40, 0xED, 0x2A, 0x45, 0xC2, 0xC8, 0xFA, 0xAD, 0x8D, 0xDA, 0x1D, 0xBB, 0x95, 0x35, 0xC2, 0x39, 0x1D, 0x0C, 0xDE, 0xA8, 0xF2, 0x83, 0xDC, 0x6E, 0xD4, 0xC2, 0xD0, 0x62, 0xD3, 0x58, 0x6A, 0x4B, 0xEB, 0xEB, 0x73, 0xF3, 0x86, 0x9B, 0x9D, 0xBD, 0x80, 0xE4, 0x31, 0x84, 0x36, 0x77, 0x45, 0xA5, 0xD0, 0xAE, 0x84, 0xEB, 0x6B, 0x8E, 0xA0, 0x21, 0x9A, 0xE8, 0x9E, 0x24, 0x4F, 0x1B, 0xB0, 0x45, 0x5E, 0xCA, 0x62, 0x6B, 0xC0, 0x37, 0x6F, 0xC5, 0x49, 0xCF, 0xFF, 0xB2, 0x16, 0xF6, 0x83, 0xA8, 0x11, 0x46, 0x95, 0x5A, 0x27, 0x1C, 0x55, 0x82, 0x66, 0x50, 0xAB, 0x74, 0xC2, 0x7E, 0xB3, 0xD2, 0x0F, 0xC3, 0x66, 0x7D, 0x14, 0xD6, 0x6B, 0xC3, 0x41, 0xE3, 0x15, 0x14, 0x16, 0x99, 0xA4, 0xF5, 0x30, 0xBF, 0xBA, 0x1F, 0xC3, 0x3D, 0x06, 0x5D, 0x17, 0x17, 0xF8, 0x7A, 0x7C, 0xEF, 0x12, 0x3F, 0xDD, 0x5C, 0xD5, 0xDC, 0x99, 0xB1, 0xB4, 0xCA, 0x16, 0x0B, 0x32, 0xC3, 0x55, 0x4D, 0x5C, 0x5F, 0xE2, 0xD7, 0x1B, 0xD6, 0x25, 0xFE, 0x63, 0xFD, 0xDE, 0x9B, 0xAA, 0x5B, 0x7A, 0xDF, 0x23, 0x90, 0x74, 0xBE, 0x6C, 0x35, 0xC6, 0xDD, 0x66, 0x77, 0xD0, 0xAA, 0x74, 0x9B, 0xFD, 0x71, 0x25, 0x18, 0x0E, 0x3A, 0x95, 0x6E, 0xD4, 0x1A, 0x54, 0x86, 0xAD, 0xA8, 0x3D, 0x1C, 0x0F, 0xA3, 0xB0, 0xD3, 0x1D, 0xBF, 0xF2, 0xBD, 0x0B, 0x0D, 0x0E, 0xFA, 0xCD, 0x28, 0x68, 0x8D, 0x3A, 0x95, 0x56, 0x3D, 0x8A, 0x2A, 0x41, 0xAB, 0xA6, 0xE8, 0x77, 0xBA, 0x95, 0x76, 0xD0, 0x68, 0xF4, 0x83, 0x76, 0xBF, 0x33, 0x0A, 0xFA, 0xAF, 0x8A, 0x36, 0x06, 0x56, 0x9E, 0xA7, 0x8F, 0xC2, 0x16, 0x60, 0x5E, 0xCD, 0xEB, 0xDE, 0x7F, 0x01, 0x00, 0x00, 0xFF, 0xFF, 0x03, 0x00, 0x50, 0x4B, 0x03, 0x04, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0x0D, 0xD1, 0x90, 0x9F, 0xB6, 0x00, 0x00, 0x00, 0x1B, 0x01, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x5F, 0x72, 0x65, 0x6C, 0x73, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x4D, 0x61, 0x6E, 0x61, 0x67, 0x65, 0x72, 0x2E, 0x78, 0x6D, 0x6C, 0x2E, 0x72, 0x65, 0x6C, 0x73, 0x84, 0x8F, 0x4D, 0x0A, 0xC2, 0x30, 0x14, 0x84, 0xF7, 0x82, 0x77, 0x08, 0x6F, 0x6F, 0xD3, 0xBA, 0x10, 0x91, 0x26, 0xDD, 0x88, 0xD0, 0xAD, 0xD4, 0x03, 0x84, 0xE4, 0x35, 0x0D, 0x36, 0x3F, 0x24, 0x51, 0xEC, 0xED, 0x0D, 0xAE, 0x2C, 0x08, 0x2E, 0x87, 0x61, 0xBE, 0x99, 0x69, 0xBB, 0x97, 0x9D, 0xC9, 0x13, 0x63, 0x32, 0xDE, 0x31, 0x68, 0xAA, 0x1A, 0x08, 0x3A, 0xE9, 0x95, 0x71, 0x9A, 0xC1, 0x6D, 0xB8, 0xEC, 0x8E, 0x40, 0x52, 0x16, 0x4E, 0x89, 0xD9, 0x3B, 0x64, 0xB0, 0x60, 0x82, 0x8E, 0x6F, 0x37, 0xED, 0x15, 0x67, 0x91, 0x4B, 0x28, 0x4D, 0x26, 0x24, 0x52, 0x28, 0x2E, 0x31, 0x98, 0x72, 0x0E, 0x27, 0x4A, 0x93, 0x9C, 0xD0, 0x8A, 0x54, 0xF9, 0x80, 0xAE, 0x38, 0xA3, 0x8F, 0x56, 0xE4, 0x22, 0xA3, 0xA6, 0x41, 0xC8, 0xBB, 0xD0, 0x48, 0xF7, 0x75, 0x7D, 0xA0, 0xF1, 0x9B, 0x01, 0x7C, 0xC5, 0x24, 0xBD, 0x62, 0x10, 0x7B, 0xD5, 0x00, 0x19, 0x96, 0x50, 0x9A, 0xFF, 0xB3, 0xFD, 0x38, 0x1A, 0x89, 0x67, 0x2F, 0x1F, 0x16, 0x5D, 0xFE, 0x51, 0x41, 0x73, 0xD9, 0x85, 0x05, 0x28, 0xA2, 0xC6, 0xCC, 0xE0, 0x23, 0x9B, 0xAA, 0x4C, 0x04, 0xCA, 0x5B, 0xBA, 0xBA, 0xC4, 0xDF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x03, 0x00, 0x50, 0x4B, 0x01, 0x02, 0x2D, 0x00, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0xE9, 0xDE, 0x0F, 0xBF, 0xFF, 0x00, 0x00, 0x00, 0x1C, 0x02, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5B, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x5F, 0x54, 0x79, 0x70, 0x65, 0x73, 0x5D, 0x2E, 0x78, 0x6D, 0x6C, 0x50, 0x4B, 0x01, 0x02, 0x2D, 0x00, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0xA5, 0xD6, 0xA7, 0xE7, 0xC0, 0x00, 0x00, 0x00, 0x36, 0x01, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x01, 0x00, 0x00, 0x5F, 0x72, 0x65, 0x6C, 0x73, 0x2F, 0x2E, 0x72, 0x65, 0x6C, 0x73, 0x50, 0x4B, 0x01, 0x02, 0x2D, 0x00, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0x6B, 0x79, 0x96, 0x16, 0x83, 0x00, 0x00, 0x00, 0x8A, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x02, 0x00, 0x00, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x4D, 0x61, 0x6E, 0x61, 0x67, 0x65, 0x72, 0x2E, 0x78, 0x6D, 0x6C, 0x50, 0x4B, 0x01, 0x02, 0x2D, 0x00, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0xDD, 0x8C, 0x2A, 0xD7, 0x97, 0x07, 0x00, 0x00, 0xD2, 0x20, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD6, 0x02, 0x00, 0x00, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x31, 0x2E, 0x78, 0x6D, 0x6C, 0x50, 0x4B, 0x01, 0x02, 0x2D, 0x00, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0x0D, 0xD1, 0x90, 0x9F, 0xB6, 0x00, 0x00, 0x00, 0x1B, 0x01, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA1, 0x0A, 0x00, 0x00, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x5F, 0x72, 0x65, 0x6C, 0x73, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x4D, 0x61, 0x6E, 0x61, 0x67, 0x65, 0x72, 0x2E, 0x78, 0x6D, 0x6C, 0x2E, 0x72, 0x65, 0x6C, 0x73, 0x50, 0x4B, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x5D, 0x01, 0x00, 0x00, 0x9C, 0x0B, 0x00, 0x00, 0x00, 0x00], [UInt8]((msg.getProperty(set: .common, lid: 0x000085C2) as Data?)!))
        XCTAssertEqual(167571, msg.currentVersion!)
        XCTAssertEqual(0, msg.ownerAppointmentId!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.storeSupportMask)
        XCTAssertEqual(0, msg.reminderDelta!)
        XCTAssertEqual("Delivery delayed:RE: Bosco Fraud Cases [ 2 of 8]", msg.normalizedSubject!)
        XCTAssertEqual("", msg.displayBcc!)
        XCTAssertEqual(.normal, msg.sensitivity!)
        XCTAssertEqual(.readOnly, msg.accessLevel!)
        XCTAssertFalse(msg.`private`!)
        XCTAssertEqual(2057, msg.messageLocaleId!)
        XCTAssertFalse(msg.responseRequested!)
        XCTAssertEqual(1252, msg.internetCodepage!)
        XCTAssertEqual(.normal, msg.importance!)
        XCTAssertEqual("FW: Delivery delayed:RE: Bosco Fraud Cases [ 2 of 8]", msg.subject!)
        XCTAssertFalse(msg.smartNoAttach!)
        XCTAssertEqual("", msg.displayTo!)
        XCTAssertEqual("", msg.displayCc!)
        XCTAssertFalse(msg.originatorDeliveryReportRequested!)
        XCTAssertNotNil(msg.rtfCompressed)
        XCTAssertTrue(msg.hasAttachments!)
        XCTAssertEqual("IPM.Note", (msg.getProperty(set: .common, lid: 0x000085D8) as String?)!)
        XCTAssertFalse(msg.reminderSet!)
        XCTAssertEqual([.unsent, .hasAttachment], msg.messageFlags)

        XCTAssertEqual(0, msg.recipients.count)
        XCTAssertEqual(4, msg.attachments.count)
        XCTAssertEqual("", msg.attachments[0].attachFilename!)
        XCTAssertNotNil(msg.attachments[0].attachDataBinary)
        XCTAssertEqual(79870665600.0, msg.attachments[0].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual(.readOnly, msg.attachments[0].accessLevel!)
        XCTAssertEqual(0x00000000, msg.attachments[0].attachmentFlags!)
        XCTAssertEqual(1488652200.0, msg.attachments[0].creationTime!.timeIntervalSince1970)
        XCTAssertEqual([], msg.attachments[0].attachFlags)
        XCTAssertFalse(msg.attachments[0].attachmentHidden!)
        XCTAssertEqual([.read], msg.attachments[0].access)
        XCTAssertEqual(0, msg.attachments[0].attachNumber!)
        XCTAssertEqual("message/delivery-status", msg.attachments[0].attachMimeTag!)
        XCTAssertEqual(.byValue, msg.attachments[0].attachMethod!)
        XCTAssertEqual("", msg.attachments[0].attachExtension!)
        XCTAssertEqual("", msg.attachments[0].attachLongFilename!)
        XCTAssertEqual("", msg.attachments[0].displayName!)
        XCTAssertEqual(1488652200.0, msg.attachments[0].lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[0].storeSupportMask)
        XCTAssertEqual(0, msg.attachments[0].attachmentLinkId!)
        XCTAssertEqual(.attachment, msg.attachments[0].objectType!)
        XCTAssertFalse((msg.attachments[0].getProperty(set: .attachment, name: "AttachmentWasSavedToCloud") as Bool?)!)
        XCTAssertEqual("", (msg.attachments[0].getProperty(set: .attachment, name: "AttachmentOriginalUrl") as String?)!)
        XCTAssertFalse(msg.attachments[0].attachmentContactPhoto!)
        XCTAssertEqual(4294967295, msg.attachments[0].renderingPosition!)
        XCTAssertEqual(79870665600.0, msg.attachments[0].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual([0x00, 0x00, 0x00, 0x00], [UInt8](msg.attachments[0].recordKey!))
        XCTAssertEqual([], [UInt8](msg.attachments[0].attachEncoding!))

        XCTAssertEqual([], [UInt8](msg.attachments[1].attachEncoding!))
        XCTAssertEqual("", msg.attachments[1].displayName!)
        XCTAssertEqual("", msg.attachments[1].attachExtension!)
        XCTAssertEqual(79870665600.0, msg.attachments[1].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual("", msg.attachments[1].attachLongFilename!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[1].storeSupportMask)
        XCTAssertFalse((msg.attachments[1].getProperty(set: .attachment, name: "AttachmentWasSavedToCloud") as Bool?)!)
        XCTAssertEqual(79870665600.0, msg.attachments[1].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual("", (msg.attachments[1].getProperty(set: .attachment, name: "AttachmentOriginalUrl") as String?)!)
        XCTAssertEqual("", msg.attachments[1].attachFilename!)
        XCTAssertEqual(0, msg.attachments[1].attachmentLinkId!)
        XCTAssertEqual(.readOnly, msg.attachments[1].accessLevel!)
        XCTAssertEqual(1488652200.0, msg.attachments[1].creationTime!.timeIntervalSince1970)
        XCTAssertEqual(4294967295, msg.attachments[1].renderingPosition!)
        XCTAssertEqual("text/rfc822-headers", msg.attachments[1].attachMimeTag!)
        XCTAssertNotNil(msg.attachments[1].attachDataBinary)
        XCTAssertEqual(1488652200.0, msg.attachments[1].lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual([], msg.attachments[1].attachFlags)
        XCTAssertFalse(msg.attachments[1].attachmentContactPhoto!)
        XCTAssertEqual([.read], msg.attachments[1].access)
        XCTAssertFalse(msg.attachments[1].attachmentHidden!)
        XCTAssertEqual(1, msg.attachments[1].attachNumber!)
        XCTAssertEqual(.byValue, msg.attachments[1].attachMethod!)
        XCTAssertEqual([0x01, 0x00, 0x00, 0x00], [UInt8](msg.attachments[1].recordKey!))
        XCTAssertEqual(0x00000000, msg.attachments[1].attachmentFlags!)
        XCTAssertEqual(.attachment, msg.attachments[1].objectType!)

        XCTAssertEqual("image001.png", msg.attachments[2].attachFilename!)
        XCTAssertEqual([.renderedInBody], msg.attachments[2].attachFlags)
        XCTAssertEqual("image001.png", msg.attachments[2].displayName!)
        XCTAssertEqual(0x00000008, msg.attachments[2].attachmentFlags!)
        XCTAssertNotNil(msg.attachments[2].attachDataBinary)
        XCTAssertEqual(2, msg.attachments[2].attachNumber!)
        XCTAssertEqual([], [UInt8](msg.attachments[2].attachEncoding!))
        XCTAssertEqual(79870665600.0, msg.attachments[2].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual(79870665600.0, msg.attachments[2].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertTrue(msg.attachments[2].attachmentHidden!)
        XCTAssertEqual(.byValue, msg.attachments[2].attachMethod!)
        XCTAssertEqual(0, msg.attachments[2].attachmentLinkId!)
        XCTAssertEqual(".png", msg.attachments[2].attachExtension!)
        XCTAssertEqual("", (msg.attachments[2].getProperty(set: .attachment, name: "AttachmentOriginalUrl") as String?)!)
        XCTAssertEqual("image001.png@01D2951D.C5191030", msg.attachments[2].attachContentId!)
        XCTAssertFalse(msg.attachments[2].attachmentContactPhoto!)
        XCTAssertEqual("image001.png", msg.attachments[2].attachLongFilename!)
        XCTAssertEqual(.attachment, msg.attachments[2].objectType!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[2].storeSupportMask)
        XCTAssertEqual([.read], msg.attachments[2].access)
        XCTAssertEqual("image/png", msg.attachments[2].attachMimeTag!)
        XCTAssertEqual(.readOnly, msg.attachments[2].accessLevel!)
        XCTAssertEqual([0x02, 0x00, 0x00, 0x00], [UInt8](msg.attachments[2].recordKey!))
        XCTAssertEqual(4294967295, msg.attachments[2].renderingPosition!)
        XCTAssertFalse((msg.attachments[2].getProperty(set: .attachment, name: "AttachmentWasSavedToCloud") as Bool?)!)

        XCTAssertTrue(msg.attachments[3].attachmentHidden!)
        XCTAssertEqual(3, msg.attachments[3].attachNumber!)
        XCTAssertFalse(msg.attachments[3].attachmentContactPhoto!)
        XCTAssertEqual("image002.png", msg.attachments[3].attachLongFilename!)
        XCTAssertEqual([.renderedInBody], msg.attachments[3].attachFlags)
        XCTAssertEqual([], [UInt8](msg.attachments[3].attachEncoding!))
        XCTAssertEqual(.readOnly, msg.attachments[3].accessLevel!)
        XCTAssertEqual([.read], msg.attachments[3].access)
        XCTAssertEqual([0x03, 0x00, 0x00, 0x00], [UInt8](msg.attachments[3].recordKey!))
        XCTAssertEqual("image002.png", msg.attachments[3].displayName!)
        XCTAssertEqual("image002.png@01D2951D.C5191030", msg.attachments[3].attachContentId!)
        XCTAssertEqual(79870665600.0, msg.attachments[3].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertFalse((msg.attachments[3].getProperty(set: .attachment, name: "AttachmentWasSavedToCloud") as Bool?)!)
        XCTAssertEqual("", (msg.attachments[3].getProperty(set: .attachment, name: "AttachmentOriginalUrl") as String?)!)
        XCTAssertEqual(79870665600.0, msg.attachments[3].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual(0x00000008, msg.attachments[3].attachmentFlags!)
        XCTAssertNotNil(msg.attachments[3].attachDataBinary)
        XCTAssertEqual(.byValue, msg.attachments[3].attachMethod!)
        XCTAssertEqual(".png", msg.attachments[3].attachExtension!)
        XCTAssertEqual("image/png", msg.attachments[3].attachMimeTag!)
        XCTAssertEqual(0, msg.attachments[3].attachmentLinkId!)
        XCTAssertEqual(4294967295, msg.attachments[3].renderingPosition!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[3].storeSupportMask)
        XCTAssertEqual(.attachment, msg.attachments[3].objectType!)
        XCTAssertEqual("image002.png", msg.attachments[3].attachFilename!)
    }

    func testReadConfusedCat4() throws {
        let data = try getData(name: "TheConfusedCat/msgparser/HTML mail with replyto and attachment and embedded image")
        let msg = try MsgFile(data: data)

        XCTAssertEqual("b.bottema@projectnibble.org", msg.sentRepresentingSmtpAddress!)
        XCTAssertEqual("Anonymous", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-organization-authas") as String?)!)
        XCTAssertEqual(0, (msg.getProperty(id: .unknown0x1213) as UInt32?)!)
        XCTAssertEqual(1033, msg.messageLocaleId!)
        XCTAssertEqual(1252, msg.messageCodepage!)
        XCTAssertTrue(msg.conversationIndexTracking!)
        XCTAssertEqual(.html, msg.nativeBody!)
        XCTAssertEqual("BT=0;II=<invalid>;FIXUP=0.8704;Version=Version 15.1 (Build 466.0), Stage=H12", (msg.getProperty(guid: UUID(uuidString: "33EBA41F-7AA8-422E-BE7B-79E1A98E54B3")!, name: "ConversationIndexTrackingEx") as String?)!)
        XCTAssertEqual(0x00000000, (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=AEGON/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=BOTTEMA, BENNY7D7\u{00}", (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual("Benny Bottema", (msg.getProperty(id: .tagSenderName) as String?)!)
        XCTAssertEqual("Bottema, Benny", msg.receivedByName!)
        XCTAssertNotNil(msg.rtfCompressed)
        XCTAssertEqual("hey", msg.normalizedSubject!)
        XCTAssertEqual("9C1801B11171CC4E8BAC6A14EB1A71BE@aegonusa.com", msg.bodyContentId!)
        XCTAssertEqual("lollypop", (msg.getProperty(id: .tagSentRepresentingSimpleDisplayName) as String?)!)
        XCTAssertEqual("Bottema, Benny\u{00}", msg.displayTo!)
        XCTAssertEqual(.normal, msg.sensitivity!)
        XCTAssertEqual([0x4F, 0x3B, 0x01, 0x89, 0x03, 0xF1, 0x0A, 0x46, 0x92, 0xFD, 0x91, 0x7A, 0xCB, 0x95, 0xD8, 0x0B], [UInt8]((msg.getProperty(id: .unknown0x0F03) as Data?)!))
        XCTAssertEqual([.read, .hasAttachment], msg.messageFlags)
        XCTAssertEqual("Benny Bottema", (msg.getProperty(id: .tagCreatorSimpleDisplayName) as String?)!)
        XCTAssertEqual("", msg.displayBcc!)
        XCTAssertEqual("BOTTEMA, BENNY7D7", (msg.getProperty(id: .unknown0x4035) as String?)!)
        XCTAssertEqual(0x00000000, (msg.lastModifierEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.lastModifierEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.lastModifierEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.lastModifierEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("Benny Bottema", (msg.lastModifierEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.lastModifierEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("b.bottema@gmail.com", (msg.lastModifierEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual(1488712402.0, msg.lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual("#", (msg.getProperty(guid: UUID(uuidString: "31805AB8-3E92-11DC-879C-00061B031004")!, name: "GpgOL Sig Status") as String?)!)
        XCTAssertFalse(msg.messageCcMe!)
        XCTAssertEqual("IPM.Note", msg.messageClass!)
        XCTAssertEqual("b.bottema@gmail.com", (msg.getProperty(id: .tagSenderSmtpAddress) as String?)!)
        XCTAssertEqual(1, msg.replyRecipientEntries!.count)
        XCTAssertEqual(0x00000080, msg.replyRecipientEntries!.size)
        XCTAssertEqual(124, msg.replyRecipientEntries!.flatEntries[0].size)
        XCTAssertEqual(0x00000000, (msg.replyRecipientEntries!.flatEntries[0].entryID as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.replyRecipientEntries!.flatEntries[0].entryID as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.replyRecipientEntries!.flatEntries[0].entryID as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.replyRecipientEntries!.flatEntries[0].entryID as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("lollypop-replyto", (msg.replyRecipientEntries!.flatEntries[0].entryID as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.replyRecipientEntries!.flatEntries[0].entryID as? OneOffEntryID)!.addressType)
        XCTAssertEqual("lo.pop.replyto@somemail.com", (msg.replyRecipientEntries!.flatEntries[0].entryID as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual("b.bottema@projectnibble.org", msg.sentRepresentingEmailAddress!)
        XCTAssertTrue(msg.messageRecipientMe!)
        XCTAssertEqual([0x04, 0x00, 0x00, 0x00, 0xF4, 0xEA, 0x41, 0x3A, 0x56, 0x00, 0x00, 0x00], [UInt8]((msg.getProperty(id: .unknown0x3014) as Data?)!))
        XCTAssertEqual(2, msg.predecessorChangeList!.values.count)
        XCTAssertEqual(UUID(uuidString: "DED02E5B-0473-4B1B-8BF3-D1C760069FF2"), msg.predecessorChangeList!.values[0].namespaceGuid)
        XCTAssertEqual([0x00, 0x00, 0x58, 0xAE], msg.predecessorChangeList!.values[0].localId)
        XCTAssertEqual(UUID(uuidString: "92462B83-2252-4C27-939E-B444044A918D"), msg.predecessorChangeList!.values[1].namespaceGuid)
        XCTAssertEqual([0x00, 0x00, 0x63, 0x47, 0xBA, 0x0A], msg.predecessorChangeList!.values[1].localId)
        XCTAssertEqual(.readOnly, msg.accessLevel!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x42, 0x2E, 0x42, 0x4F, 0x54, 0x54, 0x45, 0x4D, 0x41, 0x40, 0x50, 0x52, 0x4F, 0x4A, 0x45, 0x43, 0x54, 0x4E, 0x49, 0x42, 0x42, 0x4C, 0x45, 0x2E, 0x4F, 0x52, 0x47, 0x00], [UInt8](msg.sentRepresentingSearchKey!))
        XCTAssertEqual(0x00000000, (msg.receivedByEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.receivedByEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.receivedByEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.receivedByEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=AEGON/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=BOTTEMA, BENNY7D7\u{00}", (msg.receivedByEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual("SMTP", (msg.getProperty(id: .tagCreatorAddressType) as String?)!)
        XCTAssertEqual("b.bottema@gmail.com", msg.senderEmailAddress!)
        XCTAssertEqual("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<MeetingSet>\r\n  <Version>15.0.0.0</Version>\r\n  <Meetings>\r\n    <Meeting Subject=\"meet up\" StartIndex=\"0\">\r\n      <MeetingString>We should meet up!</MeetingString>\r\n      <Attendees>\r\n        <EmailUser Id=\"b.bottema@projectnibble.org\">lollypop</EmailUser>\r\n        <EmailUser Id=\"benny.bottema@aegon.nl\">C.Cane</EmailUser>\r\n      </Attendees>\r\n      <StartTime>0090-10-05T08:00:00Z</StartTime>\r\n      <EndTime>0090-10-05T08:30:00Z</EndTime>\r\n    </Meeting>\r\n  </Meetings>\r\n</MeetingSet>", msg.extractedMeetings!)
        XCTAssertFalse((msg.getProperty(set: .messaging, name: "IsSigned") as Bool?)!)
        XCTAssertEqual("BOTTEMA, BENNY7D7", (msg.getProperty(id: .unknown0x4034) as String?)!)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x41, 0x45, 0x47, 0x4F, 0x4E, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x42, 0x4F, 0x54, 0x54, 0x45, 0x4D, 0x41, 0x2C, 0x20, 0x42, 0x45, 0x4E, 0x4E, 0x59, 0x37, 0x44, 0x37, 0x00], [UInt8](msg.receivedRepresentingSearchKey!))
        XCTAssertEqual(4450, (msg.getProperty(id: .tagInternetArticleNumber) as UInt32?)!)
        XCTAssertFalse(msg.readReceiptRequested!)
        XCTAssertEqual(32, (msg.getProperty(set: .common, name: "ExchangeApplicationFlags") as UInt32?)!)
        XCTAssertEqual("Benny Bottema", msg.lastModifierName!)
        XCTAssertEqual(UUID(uuidString: "DED02E5B-0473-4B1B-8BF3-D1C760069FF2"), msg.changeKey!.namespaceGuid)
        XCTAssertEqual([0x00, 0x00, 0x58, 0xAE], msg.changeKey!.localId)
        XCTAssertEqual(1488712304.0, (msg.getProperty(id: .unknown0x0F0A) as Date?)!.timeIntervalSince1970)
        XCTAssertFalse((msg.getProperty(id: .unknown0x0ECD) as Bool?)!)
        XCTAssertEqual("hey", msg.subject!)
        XCTAssertEqual(1488712291.0, msg.clientSubmitTime!.timeIntervalSince1970)
        XCTAssertEqual(0x00000000, (msg.sentRepresentingEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.sentRepresentingEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.sentRepresentingEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.sentRepresentingEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("lollypop", (msg.sentRepresentingEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.sentRepresentingEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("b.bottema@projectnibble.org", (msg.sentRepresentingEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual("<1514160588.6.1488712291622@Moonbeast>", (msg.getProperty(id: .tagInternetMessageId) as String?)!)
        XCTAssertEqual("Inbox", (msg.getProperty(id: .tagParentDisplay) as String?)!)
        XCTAssertEqual("benny.bottema@aegon.nl", msg.internetAccountName!)
        XCTAssertTrue(msg.messageToMe!)
        XCTAssertEqual(1488712304.0, (msg.getProperty(id: .unknown0x0F02) as Date?)!.timeIntervalSince1970)
        XCTAssertEqual("en", (msg.getProperty(guid: UUID(uuidString: "0B63E350-9CCC-11D0-BCDB-00805FCCCE04")!, name: "DetectedLanguage") as String?)!)
        XCTAssertFalse((msg.getProperty(set: .messaging, name: "IsReadReceipt") as Bool?)!)
        XCTAssertEqual(UUID(uuidString: "A24E4D1D-A86F-4BEA-469F-08D463B8682C"), (msg.getProperty(set: .common, name: "NetworkMessageId") as UUID?)!)
        XCTAssertEqual(0x01, msg.conversationIndex!.header.reserved)
        XCTAssertEqual(0x01, msg.conversationIndex!.header.currentFileTime.0)
        XCTAssertEqual(0xD2, msg.conversationIndex!.header.currentFileTime.1)
        XCTAssertEqual(0x95, msg.conversationIndex!.header.currentFileTime.2)
        XCTAssertEqual(0xA1, msg.conversationIndex!.header.currentFileTime.3)
        XCTAssertEqual(0x45, msg.conversationIndex!.header.currentFileTime.4)
        XCTAssertEqual(UUID(uuidString: "4F3B0189-03F1-0A46-92FD-917ACB95D80B"), msg.conversationIndex!.header.guid)
        XCTAssertEqual(0, msg.conversationIndex!.responseLevels.count)
        XCTAssertEqual(1488712402.0, msg.creationTime!.timeIntervalSince1970)
        XCTAssertEqual(.normal, msg.priority!)
        XCTAssertEqual("lollypop-replyto", msg.replyRecipientNames!)
        XCTAssertEqual(65001, msg.internetCodepage!)
        XCTAssertEqual(4450, (msg.getProperty(id: .unknown0x0E2F) as UInt32?)!)
        XCTAssertTrue(msg.rtfInSync!)
        XCTAssertTrue(msg.hasAttachments!)
        XCTAssertEqual("/O=AEGON/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=BOTTEMA, BENNY7D7", msg.receivedRepresentingEmailAddress!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.storeSupportMask)
        XCTAssertEqual(1488712304.0, msg.messageDeliveryTime!.timeIntervalSince1970)
        XCTAssertEqual("Bottema, Benny", msg.receivedRepresentingName!)
        XCTAssertEqual("lollypop", msg.sentRepresentingName!)
        XCTAssertEqual(784, (msg.getProperty(set: .common, name: "PropertyExistenceTracker") as UInt64?)!)
        XCTAssertEqual("SMTP", (msg.getProperty(id: .tagSenderAddressType) as String?)!)
        XCTAssertEqual("We should meet up!\r\n", msg.body!)
        XCTAssertNotNil(msg.transportMessageHeaders)
        XCTAssertEqual([0x4F, 0xA8, 0xFD, 0xCD, 0x26, 0xD0, 0x80, 0x4C, 0x83, 0xFE, 0x26, 0x92, 0x30, 0xD8, 0xCF, 0x1C], [UInt8](msg.searchKey!))
        XCTAssertEqual("EX", msg.receivedByAddressType!)
        XCTAssertEqual(0x00000000, (msg.senderEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.senderEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.senderEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.senderEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("Benny Bottema", (msg.senderEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.senderEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("b.bottema@gmail.com", (msg.senderEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertFalse(msg.nonReceiptNotificationRequested!)
        XCTAssertEqual("SMTP", (msg.getProperty(id: .unknown0x4024) as String?)!)
        XCTAssertEqual("", msg.subjectPrefix!)
        XCTAssertEqual("/O=AEGON/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=BOTTEMA, BENNY7D7", msg.receivedByEmailAddress!)
        XCTAssertEqual("Benny Bottema", (msg.getProperty(id: .tagLastModifierSimpleDisplayName) as String?)!)
        XCTAssertEqual("Benny Bottema", (msg.getProperty(id: .tagSenderSimpleDisplayName) as String?)!)
        XCTAssertEqual("b.bottema@gmail.com", (msg.getProperty(id: .tagCreatorEmailAddress) as String?)!)
        XCTAssertEqual([.read], msg.access)
        XCTAssertFalse(msg.smartNoAttach!)
        XCTAssertEqual("b.bottema@gmail.com", (msg.getProperty(id: .unknown0x4025) as String?)!)
        XCTAssertEqual("CREXHTMAIL02.us.aegon.com", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-organization-authsource") as String?)!)
        XCTAssertEqual("", msg.displayCc!)
        XCTAssertEqual("EX", msg.receivedRepresentingAddressType!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x42, 0x2E, 0x42, 0x4F, 0x54, 0x54, 0x45, 0x4D, 0x41, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.senderSearchKey!))
        XCTAssertEqual("hey", msg.conversationTopic!)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x41, 0x45, 0x47, 0x4F, 0x4E, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x42, 0x4F, 0x54, 0x54, 0x45, 0x4D, 0x41, 0x2C, 0x20, 0x42, 0x45, 0x4E, 0x4E, 0x59, 0x37, 0x44, 0x37, 0x00], [UInt8](msg.receivedBySearchKey!))
        XCTAssertEqual(4, (msg.getProperty(set: .xmlExtractedEntities, name: "LatestMessageWordCount") as UInt32?)!)
        XCTAssertEqual("00000002\u{01}UK-CASArray.ds.global/o=aegon/ou=exchange administrative group (fydibohf23spdlt)/cn=recipients/cn=bottema, benny7d7", msg.internetAccountStamp!)
        XCTAssertEqual(.normal, msg.importance!)
        XCTAssertEqual("SMTP", msg.sentRepresentingAddressType!)

        XCTAssertEqual(1, msg.recipients.count)
        XCTAssertEqual("benny.bottema@aegon.nl", msg.recipients[0].smtpAddress!)
        XCTAssertEqual(.primaryRecipient, msg.recipients[0].recipientType!)
        XCTAssertEqual(.sendable, msg.recipients[0].recipientFlags!)
        XCTAssertEqual(.mailUser, msg.recipients[0].objectType!)
        XCTAssertEqual(.mailUser, msg.recipients[0].displayType!)
        XCTAssertEqual("EX", msg.recipients[0].addressType!)
        XCTAssertEqual(0x00000000, (msg.recipients[0].entryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.recipients[0].entryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.recipients[0].entryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.recipients[0].entryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/o=aegon/ou=exchange administrative group (fydibohf23spdlt)/cn=recipients/cn=bottema, benny7d7\u{00}", (msg.recipients[0].entryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual(0x00000000, (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/o=aegon/ou=exchange administrative group (fydibohf23spdlt)/cn=recipients/cn=bottema, benny7d7\u{00}", (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x41, 0x45, 0x47, 0x4F, 0x4E, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x42, 0x4F, 0x54, 0x54, 0x45, 0x4D, 0x41, 0x2C, 0x20, 0x42, 0x45, 0x4E, 0x4E, 0x59, 0x37, 0x44, 0x37, 0x00], [UInt8](msg.recipients[0].searchKey!))
        XCTAssertEqual("Bottema, Benny", msg.recipients[0].displayName!)
        XCTAssertEqual("Bottema, Benny", msg.recipients[0].transmittableDisplayName!)
        XCTAssertEqual("sip:benny.bottema@aegon.com", (msg.recipients[0].getProperty(id: .unknown0x5FE5) as String?)!)
        XCTAssertEqual([0x00, 0x00, 0x00, 0x00, 0xDC, 0xA7, 0x40, 0xC8, 0xC0, 0x42, 0x10, 0x1A, 0xB4, 0xB9, 0x08, 0x00, 0x2B, 0x2F, 0xE1, 0x82, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x6F, 0x3D, 0x61, 0x65, 0x67, 0x6F, 0x6E, 0x2F, 0x6F, 0x75, 0x3D, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6E, 0x67, 0x65, 0x20, 0x61, 0x64, 0x6D, 0x69, 0x6E, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x20, 0x67, 0x72, 0x6F, 0x75, 0x70, 0x20, 0x28, 0x66, 0x79, 0x64, 0x69, 0x62, 0x6F, 0x68, 0x66, 0x32, 0x33, 0x73, 0x70, 0x64, 0x6C, 0x74, 0x29, 0x2F, 0x63, 0x6E, 0x3D, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6E, 0x74, 0x73, 0x2F, 0x63, 0x6E, 0x3D, 0x62, 0x6F, 0x74, 0x74, 0x65, 0x6D, 0x61, 0x2C, 0x20, 0x62, 0x65, 0x6E, 0x6E, 0x79, 0x37, 0x64, 0x37, 0x00], [UInt8](msg.recipients[0].recordKey!))
        XCTAssertEqual([DisplayTypeEx(rawValue: 0x40000000)], msg.recipients[0].displayTypeEx)
        XCTAssertEqual([0x00, 0x06, 0xC8, 0x34], [UInt8](msg.recipients[0].instanceKey!))
        XCTAssertTrue(msg.recipients[0].responsibility!)
        XCTAssertEqual([0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x15, 0x00, 0x00, 0x00, 0xAA, 0x70, 0xDE, 0x8D, 0xE2, 0x4F, 0x4D, 0x68, 0xF5, 0x72, 0xD9, 0x16, 0x33, 0x56, 0x06, 0x00], [UInt8]((msg.recipients[0].getProperty(id: .unknown0x0C24) as Data?)!))
        XCTAssertEqual([0x8C, 0x2F, 0xCA, 0xDA, 0x1A, 0xA4, 0x5E, 0x49, 0x97, 0xD7, 0x67, 0x56, 0x9B, 0x3E, 0x12, 0x9A], [UInt8]((msg.recipients[0].getProperty(id: .unknown0x0C25) as Data?)!))
        XCTAssertEqual("/o=aegon/ou=exchange administrative group (fydibohf23spdlt)/cn=recipients/cn=bottema, benny7d7", msg.recipients[0].emailAddress!)
        XCTAssertTrue(msg.recipients[0].sendRichInfo!)
        XCTAssertEqual(0, msg.recipients[0].rowid!)

        XCTAssertEqual(3, msg.attachments.count)
        XCTAssertEqual(4294967295, msg.attachments[0].renderingPosition!)
        XCTAssertEqual("thumbsup", msg.attachments[0].displayName!)
        XCTAssertNotNil(msg.attachments[0].attachDataBinary)
        XCTAssertEqual([.read], msg.attachments[0].access)
        XCTAssertEqual([.renderedInBody], msg.attachments[0].attachFlags)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[0].storeSupportMask)
        XCTAssertEqual(.byValue, msg.attachments[0].attachMethod!)
        XCTAssertEqual("thumbsup", msg.attachments[0].attachContentId!)
        XCTAssertEqual("EnUs", msg.attachments[0].language!)
        XCTAssertEqual([0x00, 0x00, 0x00, 0x00], [UInt8](msg.attachments[0].recordKey!))
        XCTAssertEqual([0x61, 0x9B, 0x12, 0x9D, 0x5E, 0x0C, 0xE8, 0x4F, 0x84, 0xA0, 0x0E, 0xCD, 0x72, 0xDA, 0xCA, 0xAC], [UInt8]((msg.attachments[0].getProperty(id: .unknown0x371D) as Data?)!))
        XCTAssertEqual(.attachment, msg.attachments[0].objectType!)
        XCTAssertEqual("thumbsup", msg.attachments[0].attachFilename!)
        XCTAssertTrue(msg.attachments[0].attachmentHidden!)
        XCTAssertEqual("thumbsup", msg.attachments[0].attachLongFilename!)
        XCTAssertEqual(0, msg.attachments[0].attachNumber!)
        XCTAssertEqual(1488712304.0, msg.attachments[0].lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual(1488712304.0, msg.attachments[0].creationTime!.timeIntervalSince1970)
        XCTAssertEqual(.readOnly, msg.attachments[0].accessLevel!)
        XCTAssertEqual("image/png", msg.attachments[0].attachMimeTag!)
        XCTAssertEqual("", msg.attachments[0].attachExtension!)

        XCTAssertEqual(.byValue, msg.attachments[1].attachMethod!)
        XCTAssertEqual("dresscode.txt", msg.attachments[1].attachLongFilename!)
        XCTAssertEqual(1488712304.0, msg.attachments[1].lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual("dresscode.txt", msg.attachments[1].displayName!)
        XCTAssertEqual([.read], msg.attachments[1].access)
        XCTAssertEqual(1488712304.0, msg.attachments[1].creationTime!.timeIntervalSince1970)
        XCTAssertEqual(1, msg.attachments[1].attachNumber!)
        XCTAssertEqual([0x01, 0x00, 0x00, 0x00], [UInt8](msg.attachments[1].recordKey!))
        XCTAssertEqual(".txt", msg.attachments[1].attachExtension!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[1].storeSupportMask)
        XCTAssertEqual("dressc~1.txt", msg.attachments[1].attachFilename!)
        XCTAssertEqual(.readOnly, msg.attachments[1].accessLevel!)
        XCTAssertEqual("dresscode.txt", msg.attachments[1].attachContentId!)
        XCTAssertEqual("EnUs", msg.attachments[1].language!)
        XCTAssertNotNil(msg.attachments[1].attachDataBinary)
        XCTAssertEqual(4294967295, msg.attachments[1].renderingPosition!)
        XCTAssertEqual([0xD4, 0x52, 0x03, 0xC6, 0xB7, 0x66, 0x1F, 0x47, 0xB7, 0x50, 0xBD, 0x01, 0x3A, 0x69, 0xEA, 0x0E], [UInt8]((msg.attachments[1].getProperty(id: .unknown0x371D) as Data?)!))
        XCTAssertEqual("text/plain", msg.attachments[1].attachMimeTag!)
        XCTAssertEqual(.attachment, msg.attachments[1].objectType!)

        XCTAssertEqual(.byValue, msg.attachments[2].attachMethod!)
        XCTAssertEqual(1488712304.0, msg.attachments[2].lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual(.readOnly, msg.attachments[2].accessLevel!)
        XCTAssertEqual(4294967295, msg.attachments[2].renderingPosition!)
        XCTAssertEqual(2, msg.attachments[2].attachNumber!)
        XCTAssertEqual("text/plain", msg.attachments[2].attachMimeTag!)
        XCTAssertEqual("location", msg.attachments[2].attachContentId!)
        XCTAssertEqual(.attachment, msg.attachments[2].objectType!)
        XCTAssertEqual("EnUs", msg.attachments[2].language!)
        XCTAssertEqual("location.txt", msg.attachments[2].attachLongFilename!)
        XCTAssertNotNil(msg.attachments[2].attachDataBinary)
        XCTAssertEqual("location.txt", msg.attachments[2].attachFilename!)
        XCTAssertEqual(1488712304.0, msg.attachments[2].creationTime!.timeIntervalSince1970)
        XCTAssertEqual([0xC8, 0xA2, 0x9C, 0x3B, 0x02, 0x62, 0xA7, 0x4D, 0x97, 0x98, 0xBB, 0xA4, 0x42, 0x6C, 0x06, 0x5B], [UInt8]((msg.attachments[2].getProperty(id: .unknown0x371D) as Data?)!))
        XCTAssertEqual([0x02, 0x00, 0x00, 0x00], [UInt8](msg.attachments[2].recordKey!))
        XCTAssertEqual([.read], msg.attachments[2].access)
        XCTAssertEqual(".txt", msg.attachments[2].attachExtension!)
        XCTAssertEqual("location.txt", msg.attachments[2].displayName!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[2].storeSupportMask)
    }

    func testReadConfusedCat5() throws {
        let data = try getData(name: "TheConfusedCat/msgparser/nested simple mail")
        let msg = try MsgFile(data: data)

        XCTAssertFalse(msg.originatorDeliveryReportRequested!)
        XCTAssertTrue(msg.rtfInSync!)
        XCTAssertFalse((msg.getProperty(id: .unknown0x0ECD) as Bool?)!)
        XCTAssertEqual(1460366279.0, (msg.getProperty(id: .unknown0x0F02) as Date?)!.timeIntervalSince1970)
        XCTAssertEqual("Internal", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-organization-authas") as String?)!)
        XCTAssertEqual("/O=EXCHANGELABS/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=5512C5B0051348D992AF993F92C30F5A-REISINGER E", (msg.getProperty(id: .unknown0x4025) as String?)!)
        XCTAssertEqual(.normal, msg.sensitivity!)
        XCTAssertEqual("[195.177.198.220]", (msg.getProperty(set: .internetHeaders, name: "x-originating-ip") as String?)!)
        XCTAssertEqual([0xAC, 0xE1, 0x25, 0x10, 0xE2, 0x51, 0x4D, 0xF3, 0xB9, 0xCC, 0xEF, 0x9C, 0x44, 0x2C, 0x4E, 0xD1], [UInt8]((msg.getProperty(id: .unknown0x0F03) as Data?)!))
        XCTAssertEqual("", msg.displayBcc!)
        XCTAssertEqual("REISINGER Emanuel", msg.sentRepresentingName!)
        XCTAssertNotNil(msg.rtfCompressed)
        XCTAssertEqual("Emanuel.Reisinger@cargonet.software", msg.sentRepresentingSmtpAddress!)
        XCTAssertFalse(msg.smartNoAttach!)
        XCTAssertEqual("Posteingang", (msg.getProperty(id: .tagParentDisplay) as String?)!)
        XCTAssertEqual(UUID(uuidString: "E4F28357-92F5-482D-0184-08D361EA2C73"), (msg.getProperty(set: .common, name: "NetworkMessageId") as UUID?)!)
        XCTAssertEqual(4130135120, (msg.getProperty(id: .unknown0x6827) as UInt32?)!)
        XCTAssertEqual(0x00000000, (msg.sentRepresentingEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.sentRepresentingEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.sentRepresentingEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.sentRepresentingEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/o=ExchangeLabs/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=5512c5b0051348d992af993f92c30f5a-REISINGER E\u{00}", (msg.sentRepresentingEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual([0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x15, 0x00, 0x00, 0x00, 0x71, 0xB7, 0x03, 0x82, 0x10, 0xA7, 0x4B, 0x08, 0xBD, 0x4A, 0xA8, 0x11, 0x6A, 0x8B, 0xE7, 0x00], [UInt8]((msg.getProperty(id: .PR_LAST_MODIFIER_SID) as Data?)!))
        XCTAssertEqual([.read], msg.access)
        XCTAssertEqual("20160328.4", (msg.getProperty(set: .common, name: "TeeVersion") as String?)!)
        XCTAssertEqual(0, msg.reminderDelta!)
        XCTAssertEqual([0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x15, 0x00, 0x00, 0x00, 0x71, 0xB7, 0x03, 0x82, 0x10, 0xA7, 0x4B, 0x08, 0xBD, 0x4A, 0xA8, 0x11, 0x6A, 0x8B, 0xE7, 0x00], [UInt8]((msg.getProperty(id: .PR_SENDER_SID) as Data?)!))
        XCTAssertEqual(32, (msg.getProperty(set: .common, name: "ExchangeApplicationFlags") as UInt32?)!)
        XCTAssertEqual(1460366278.0, msg.clientSubmitTime!.timeIntervalSince1970)
        XCTAssertEqual([0x04, 0x00, 0x00, 0x00, 0xE2, 0xA9, 0xCE, 0xDD, 0xFB, 0x4E, 0x2B, 0x90], [UInt8]((msg.getProperty(id: .unknown0x3014) as Data?)!))
        XCTAssertEqual(1031, msg.messageLocaleId!)
        XCTAssertEqual(.normal, msg.importance!)
        XCTAssertEqual(6257, (msg.getProperty(id: .unknown0x0E2F) as UInt32?)!)
        XCTAssertEqual("REISINGER Emanuel", (msg.getProperty(id: .tagCreatorSimpleDisplayName) as String?)!)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x4C, 0x41, 0x42, 0x53, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x35, 0x35, 0x31, 0x32, 0x43, 0x35, 0x42, 0x30, 0x30, 0x35, 0x31, 0x33, 0x34, 0x38, 0x44, 0x39, 0x39, 0x32, 0x41, 0x46, 0x39, 0x39, 0x33, 0x46, 0x39, 0x32, 0x43, 0x33, 0x30, 0x46, 0x35, 0x41, 0x2D, 0x52, 0x45, 0x49, 0x53, 0x49, 0x4E, 0x47, 0x45, 0x52, 0x20, 0x45, 0x00], [UInt8](msg.receivedBySearchKey!))
        XCTAssertEqual(1, msg.predecessorChangeList!.values.count)
        XCTAssertEqual(UUID(uuidString: "0594BEF1-FE4A-499F-8A72-E861E1086C1B"), msg.predecessorChangeList!.values[0].namespaceGuid)
        XCTAssertEqual([0x00, 0x00, 0x95, 0x3E, 0x4B, 0x9D], msg.predecessorChangeList!.values[0].localId)
        XCTAssertEqual("REISINGER Emanuel", (msg.getProperty(id: .tagSentRepresentingSimpleDisplayName) as String?)!)
        XCTAssertEqual("emanuel.reisinger", (msg.getProperty(id: .unknown0x4035) as String?)!)
        XCTAssertEqual(.notAssigned, msg.taskMode!)
        XCTAssertEqual("BT=2;II=[CID=1025e1ac-51e2-f34d-b9cc-ef9c442c4ed1;IDXHEAD=D193D2FFC2;IDXCOUNT=1];SBMID=4;FIXUP=8.3239;Version=Version 15.1 (Build 447.0), Stage=H13", (msg.getProperty(guid: UUID(uuidString: "33EBA41F-7AA8-422E-BE7B-79E1A98E54B3")!, name: "ConversationIndexTrackingEx") as String?)!)
        XCTAssertEqual("REISINGER Emanuel", (msg.getProperty(id: .tagSenderSimpleDisplayName) as String?)!)
        XCTAssertEqual([.unmodified, .hasAttachment, .fromMe], msg.messageFlags)
        XCTAssertEqual("", msg.displayCc!)
        XCTAssertFalse(msg.nonReceiptNotificationRequested!)
        XCTAssertTrue(msg.alternateRecipientAllowed!)
        XCTAssertEqual("[\"TeeEngineVersion\",\"31.0.0\",\"BuildNumber\",\"20160328.4\",\"ChangesetNumber\",\"C2016032804\",\"Locale\",\"de-DE\",\"MessageId\",\"\\u003cDBXPR05MB254A4B49A60791EE7F7D3BCF3940@DBXPR05MB254.eurprd05.prod.outlook.com\\u003e\"]", (msg.getProperty(set: .common, name: "EntityExtractionServiceDiagnosticContext") as String?)!)
        XCTAssertEqual(.readOnly, msg.accessLevel!)
        XCTAssertTrue(msg.sendRichInfo!)
        XCTAssertEqual("outlookmsg2html Testmail", msg.subject!)
        XCTAssertFalse(msg.useTnef!)
        XCTAssertEqual(1460366295.0, msg.lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x4C, 0x41, 0x42, 0x53, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x35, 0x35, 0x31, 0x32, 0x43, 0x35, 0x42, 0x30, 0x30, 0x35, 0x31, 0x33, 0x34, 0x38, 0x44, 0x39, 0x39, 0x32, 0x41, 0x46, 0x39, 0x39, 0x33, 0x46, 0x39, 0x32, 0x43, 0x33, 0x30, 0x46, 0x35, 0x41, 0x2D, 0x52, 0x45, 0x49, 0x53, 0x49, 0x4E, 0x47, 0x45, 0x52, 0x20, 0x45, 0x00], [UInt8](msg.sentRepresentingSearchKey!))
        XCTAssertEqual("emanuel.reisinger", (msg.getProperty(id: .unknown0x4034) as String?)!)
        XCTAssertEqual("REISINGER Emanuel", msg.receivedByName!)
        XCTAssertFalse(msg.agingDontAgeMe!)
        XCTAssertEqual(20127, msg.internetCodepage!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.storeSupportMask)
        XCTAssertEqual("sip:emanuel.reisinger@vinci-energies.net", (msg.getProperty(id: .unknown0x5FE5) as String?)!)
        XCTAssertEqual("IPM.Note", msg.messageClass!)
        XCTAssertEqual(1460366295.0, msg.creationTime!.timeIntervalSince1970)
        XCTAssertEqual("00000002\u{01}9e1b6489-b410-4cf8-906f-2a916bcfd46f@axians.com/o=ExchangeLabs/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=5512c5b0051348d992af993f92c30f5a-REISINGER E", msg.internetAccountStamp!)
        XCTAssertNotNil(msg.tnefCorrelationKey)
        XCTAssertEqual(1, (msg.getProperty(set: .common, name: "CurrentMessageSafetyFlags") as UInt32?)!)
        XCTAssertEqual(67.0, (msg.getProperty(set: .xmlExtractedEntities, name: "ClutterThreshold") as Double?)!)
        XCTAssertEqual("REISINGER Emanuel", (msg.getProperty(id: .tagLastModifierSimpleDisplayName) as String?)!)
        XCTAssertTrue((msg.getProperty(set: .common, name: "EntityExtractionSuccess") as Bool?)!)
        XCTAssertEqual(UUID(uuidString: "C8E99525-533E-43C2-BAEF-EEF6792FF6A0"), (msg.getProperty(set: .xmlExtractedEntities, name: "InferenceMessageIdentifier") as UUID?)!)
        XCTAssertFalse(msg.messageCcMe!)
        XCTAssertEqual(13.0, (msg.getProperty(set: .xmlExtractedEntities, name: "ClutterProbability") as Double?)!)
        XCTAssertEqual(1460366279.0, msg.messageDeliveryTime!.timeIntervalSince1970)
        XCTAssertEqual("Mail in mail.\r\n\r\n \r\n\r\nBR\r\n\r\n", msg.body!)
        XCTAssertNotNil(msg.transportMessageHeaders)
        XCTAssertEqual(0x00000000, (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGELABS/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=5512C5B0051348D992AF993F92C30F5A-REISINGER E\u{00}", (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual(2693775947, (msg.getProperty(id: .unknown0x6201) as UInt32?)!)
        XCTAssertEqual(0x00000000, (msg.receivedByEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.receivedByEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.receivedByEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.receivedByEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGELABS/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=5512C5B0051348D992AF993F92C30F5A-REISINGER E\u{00}", (msg.receivedByEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual([], msg.sideEffects)
        XCTAssertEqual(0x00000000, (msg.senderEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.senderEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.senderEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.senderEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/o=ExchangeLabs/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=5512c5b0051348d992af993f92c30f5a-REISINGER E\u{00}", (msg.senderEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual(3079, (msg.getProperty(set: .common, lid: 0x000085EB) as UInt32?)!)
        XCTAssertEqual(1460366277.0, (msg.getProperty(id: .unknown0x0F0A) as Date?)!.timeIntervalSince1970)
        XCTAssertFalse(msg.`private`!)
        XCTAssertEqual("/O=EXCHANGELABS/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=5512C5B0051348D992AF993F92C30F5A-REISINGER E", msg.receivedByEmailAddress!)
        XCTAssertEqual(UUID(uuidString: "0594BEF1-FE4A-499F-8A72-E861E1086C1B"), msg.changeKey!.namespaceGuid)
        XCTAssertEqual([0x00, 0x00, 0x95, 0x3E, 0x4B, 0x9D], msg.changeKey!.localId)
        XCTAssertEqual([0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x15, 0x00, 0x00, 0x00, 0x71, 0xB7, 0x03, 0x82, 0x10, 0xA7, 0x4B, 0x08, 0xBD, 0x4A, 0xA8, 0x11, 0x6A, 0x8B, 0xE7, 0x00], [UInt8]((msg.getProperty(id: .PR_CREATOR_SID) as Data?)!))
        XCTAssertEqual("de", (msg.getProperty(guid: UUID(uuidString: "0B63E350-9CCC-11D0-BCDB-00805FCCCE04")!, name: "DetectedLanguage") as String?)!)
        XCTAssertEqual(1315746970, (msg.getProperty(id: .unknown0x6200) as UInt32?)!)
        XCTAssertEqual("REISINGER Emanuel", msg.receivedRepresentingName!)
        XCTAssertFalse(msg.reminderSet!)
        XCTAssertFalse((msg.getProperty(set: .messaging, name: "IsReadReceipt") as Bool?)!)
        XCTAssertEqual("/O=EXCHANGELABS/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=5512C5B0051348D992AF993F92C30F5A-REISINGER E", msg.receivedRepresentingEmailAddress!)
        XCTAssertTrue(msg.messageRecipientMe!)
        XCTAssertTrue(msg.conversationIndexTracking!)
        XCTAssertEqual("EX", (msg.getProperty(id: .unknown0x4024) as String?)!)
        XCTAssertEqual(1252, msg.messageCodepage!)
        XCTAssertEqual("04", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-organization-authmechanism") as String?)!)
        XCTAssertEqual("Client=MSExchangeRPC", (msg.getProperty(set: .messaging, name: "ClientInfo") as String?)!)
        XCTAssertTrue(msg.messageToMe!)
        XCTAssertEqual(0, (msg.getProperty(set: .xmlExtractedEntities, name: "InferenceClassificationResult") as UInt32?)!)
        XCTAssertEqual("outlookmsg2html Testmail", msg.conversationTopic!)
        XCTAssertEqual(4, (msg.getProperty(set: .xmlExtractedEntities, name: "LatestMessageWordCount") as UInt32?)!)
        XCTAssertFalse((msg.getProperty(set: .messaging, name: "IsSigned") as Bool?)!)
        XCTAssertEqual("REISINGER Emanuel", (msg.getProperty(id: .tagSenderName) as String?)!)
        XCTAssertTrue((msg.getProperty(id: .unknown0x3645) as Bool?)!)
        XCTAssertEqual("DBXPR05MB254.eurprd05.prod.outlook.com", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-organization-authsource") as String?)!)
        XCTAssertEqual(4294967295, msg.iconIndex!)
        XCTAssertEqual("EX", (msg.getProperty(id: .tagSenderAddressType) as String?)!)
        XCTAssertEqual(0x01, msg.conversationIndex!.header.reserved)
        XCTAssertEqual(0xD1, msg.conversationIndex!.header.currentFileTime.0)
        XCTAssertEqual(0x93, msg.conversationIndex!.header.currentFileTime.1)
        XCTAssertEqual(0xD2, msg.conversationIndex!.header.currentFileTime.2)
        XCTAssertEqual(0xFF, msg.conversationIndex!.header.currentFileTime.3)
        XCTAssertEqual(0xC2, msg.conversationIndex!.header.currentFileTime.4)
        XCTAssertEqual(UUID(uuidString: "ACE12510-E251-4DF3-B9CC-EF9C442C4ED1"), msg.conversationIndex!.header.guid)
        XCTAssertEqual(0, msg.conversationIndex!.responseLevels.count)
        XCTAssertEqual(0x00160000, msg.internetMailOverrideFormat!)
        XCTAssertEqual([0x01, 0x00, 0xFD, 0xE6, 0x7B, 0xFA, 0x2B, 0x00, 0x04, 0x42, 0x69, 0x61, 0x73, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x17, 0x53, 0x65, 0x6E, 0x64, 0x65, 0x72, 0x49, 0x73, 0x59, 0x6F, 0x75, 0x32, 0x44, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x4E, 0x61, 0x6D, 0x65, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x24, 0x43, 0x6F, 0x6E, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x72, 0x49, 0x73, 0x59, 0x6F, 0x75, 0x32, 0x44, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x4E, 0x61, 0x6D, 0x65, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x18, 0x4F, 0x6E, 0x6C, 0x79, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6E, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x4E, 0x61, 0x6D, 0x65, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x19, 0x43, 0x6F, 0x6E, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x43, 0x6F, 0x6E, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x0F, 0x46, 0x6C, 0x61, 0x67, 0x67, 0x65, 0x64, 0x42, 0x79, 0x53, 0x65, 0x6E, 0x64, 0x65, 0x72, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x17, 0x4D, 0x61, 0x72, 0x6B, 0x65, 0x64, 0x49, 0x6D, 0x70, 0x6F, 0x72, 0x74, 0x61, 0x6E, 0x74, 0x42, 0x79, 0x53, 0x65, 0x6E, 0x64, 0x65, 0x72, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x19, 0x4D, 0x61, 0x72, 0x6B, 0x65, 0x64, 0x55, 0x6E, 0x69, 0x6D, 0x70, 0x6F, 0x72, 0x74, 0x61, 0x6E, 0x74, 0x42, 0x79, 0x53, 0x65, 0x6E, 0x64, 0x65, 0x72, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x1A, 0x53, 0x65, 0x6E, 0x64, 0x65, 0x72, 0x49, 0x73, 0x4D, 0x61, 0x6E, 0x61, 0x67, 0x65, 0x72, 0x44, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x4E, 0x61, 0x6D, 0x65, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x1F, 0x53, 0x65, 0x6E, 0x64, 0x65, 0x72, 0x49, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6F, 0x72, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x4E, 0x61, 0x6D, 0x65, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x11, 0x53, 0x65, 0x6E, 0x64, 0x65, 0x72, 0x49, 0x73, 0x41, 0x75, 0x74, 0x6F, 0x6D, 0x61, 0x74, 0x65, 0x64, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x0D, 0x53, 0x75, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x3C, 0xAA, 0x49, 0xB4, 0x00, 0x00, 0x80, 0x3F, 0x1C, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6E, 0x74, 0x50, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x44, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x4E, 0x61, 0x6D, 0x65, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x13, 0x53, 0x65, 0x6E, 0x64, 0x65, 0x72, 0x54, 0x6F, 0x44, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x4E, 0x61, 0x6D, 0x65, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x4A, 0x68, 0xA8, 0xE8, 0x00, 0x00, 0x80, 0x3F, 0x1A, 0x4D, 0x61, 0x6E, 0x61, 0x67, 0x65, 0x72, 0x50, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x44, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x4E, 0x61, 0x6D, 0x65, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x17, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6E, 0x74, 0x43, 0x6F, 0x75, 0x6E, 0x74, 0x4F, 0x6E, 0x54, 0x6F, 0x4C, 0x69, 0x6E, 0x65, 0x32, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x17, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6E, 0x74, 0x43, 0x6F, 0x75, 0x6E, 0x74, 0x4F, 0x6E, 0x43, 0x63, 0x4C, 0x69, 0x6E, 0x65, 0x32, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x09, 0x49, 0x74, 0x65, 0x6D, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0x49, 0x50, 0x4D, 0x2E, 0x4E, 0x6F, 0x74, 0x65, 0x00, 0x00, 0x80, 0x3F, 0x15, 0x52, 0x65, 0x70, 0x6C, 0x79, 0x54, 0x6F, 0x41, 0x4D, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x72, 0x6F, 0x6D, 0x4D, 0x65, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x0F, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6F, 0x75, 0x73, 0x46, 0x6C, 0x61, 0x67, 0x67, 0x65, 0x64, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x19, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x54, 0x6F, 0x54, 0x6F, 0x4C, 0x69, 0x6E, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x54, 0x69, 0x6D, 0x65, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x13, 0x52, 0x65, 0x73, 0x70, 0x6F, 0x6E, 0x73, 0x65, 0x49, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x10, 0x4D, 0x65, 0x65, 0x74, 0x69, 0x6E, 0x67, 0x49, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6E, 0x74, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x0D, 0x54, 0x61, 0x73, 0x6B, 0x49, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6E, 0x74, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x18, 0x54, 0x61, 0x73, 0x6B, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6E, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x4E, 0x61, 0x6D, 0x65, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x16, 0x53, 0x75, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4C, 0x65, 0x6E, 0x67, 0x74, 0x68, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0B, 0xA3, 0x4A, 0x3E, 0x02, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x3D, 0x57, 0x4D, 0x3F, 0x10, 0x55, 0x6E, 0x69, 0x71, 0x75, 0x65, 0x42, 0x6F, 0x64, 0x79, 0x4C, 0x65, 0x6E, 0x67, 0x74, 0x68, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x0C, 0x53, 0x65, 0x6E, 0x64, 0x65, 0x72, 0x44, 0x6F, 0x6D, 0x61, 0x69, 0x6E, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x6A, 0xFC, 0x28, 0xBB, 0x00, 0x00, 0x80, 0x3F, 0x0C, 0x57, 0x6F, 0x72, 0x64, 0x73, 0x49, 0x6E, 0x42, 0x6F, 0x64, 0x79, 0x32, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0xB1, 0x25, 0x05, 0x24, 0x00, 0x00, 0x80, 0x3F, 0x0E, 0x42, 0x69, 0x67, 0x72, 0x61, 0x6D, 0x73, 0x49, 0x6E, 0x42, 0x6F, 0x64, 0x79, 0x32, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0xB1, 0x25, 0x05, 0x24, 0x00, 0x00, 0x80, 0x3F, 0x0D, 0x4E, 0x67, 0x72, 0x61, 0x6D, 0x73, 0x49, 0x6E, 0x42, 0x6F, 0x64, 0x79, 0x32, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0xB1, 0x25, 0x05, 0x24, 0x00, 0x00, 0x80, 0x3F, 0x1D, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6F, 0x6E, 0x54, 0x72, 0x65, 0x65, 0x31, 0x5F, 0x32, 0x32, 0x5F, 0x35, 0x35, 0x5F, 0x31, 0x32, 0x5F, 0x4E, 0x6F, 0x76, 0x5F, 0x31, 0x34, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x1D, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6F, 0x6E, 0x54, 0x72, 0x65, 0x65, 0x32, 0x5F, 0x32, 0x32, 0x5F, 0x35, 0x35, 0x5F, 0x31, 0x32, 0x5F, 0x4E, 0x6F, 0x76, 0x5F, 0x31, 0x34, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x1D, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6F, 0x6E, 0x54, 0x72, 0x65, 0x65, 0x33, 0x5F, 0x32, 0x32, 0x5F, 0x35, 0x35, 0x5F, 0x31, 0x32, 0x5F, 0x4E, 0x6F, 0x76, 0x5F, 0x31, 0x34, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x1D, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6F, 0x6E, 0x54, 0x72, 0x65, 0x65, 0x34, 0x5F, 0x32, 0x32, 0x5F, 0x35, 0x35, 0x5F, 0x31, 0x32, 0x5F, 0x4E, 0x6F, 0x76, 0x5F, 0x31, 0x34, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x13, 0x53, 0x65, 0x6E, 0x64, 0x65, 0x72, 0x43, 0x63, 0x44, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x4E, 0x61, 0x6D, 0x65, 0x00, 0x00, 0x00, 0x00, 0x16, 0x53, 0x65, 0x6E, 0x64, 0x65, 0x72, 0x44, 0x4C, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x4E, 0x61, 0x6D, 0x65, 0x00, 0x00, 0x00, 0x00, 0x20, 0x43, 0x6F, 0x6E, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x72, 0x54, 0x6F, 0x44, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x4E, 0x61, 0x6D, 0x65, 0x00, 0x00, 0x00, 0x00, 0x20, 0x43, 0x6F, 0x6E, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x72, 0x43, 0x63, 0x44, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x4E, 0x61, 0x6D, 0x65, 0x00, 0x00, 0x00, 0x00, 0x23, 0x43, 0x6F, 0x6E, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x72, 0x44, 0x4C, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x4E, 0x61, 0x6D, 0x65, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6E, 0x74, 0x73, 0x4F, 0x6E, 0x54, 0x6F, 0x4C, 0x69, 0x6E, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x4E, 0x61, 0x6D, 0x65, 0x32, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6E, 0x74, 0x73, 0x4F, 0x6E, 0x43, 0x63, 0x4C, 0x69, 0x6E, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x4E, 0x61, 0x6D, 0x65, 0x32, 0x00, 0x00, 0x00, 0x00, 0x1D, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6F, 0x6E, 0x47, 0x72, 0x6F, 0x75, 0x70, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x4E, 0x61, 0x6D, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [UInt8]((msg.getProperty(set: .xmlExtractedEntities, name: "TriageFeatureVector") as Data?)!))
        XCTAssertFalse((msg.getProperty(id: .unknown0x1207) as Bool?)!)
        XCTAssertEqual("/O=EXCHANGELABS/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=5512C5B0051348D992AF993F92C30F5A-REISINGER E", msg.senderEmailAddress!)
        XCTAssertEqual([0x22, 0xAA, 0xB4, 0xC2, 0x1D, 0xF6, 0xCA, 0x48, 0xBF, 0xFE, 0x33, 0x80, 0x5A, 0x23, 0x58, 0x51], [UInt8](msg.searchKey!))
        XCTAssertEqual("EX", msg.sentRepresentingAddressType!)
        XCTAssertEqual(0, (msg.getProperty(id: .unknown0x1213) as UInt32?)!)
        XCTAssertEqual(6257, (msg.getProperty(id: .tagInternetArticleNumber) as UInt32?)!)
        XCTAssertEqual("/O=EXCHANGELABS/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=5512C5B0051348D992AF993F92C30F5A-REISINGER E", (msg.getProperty(id: .tagCreatorEmailAddress) as String?)!)
        XCTAssertFalse(msg.readReceiptRequested!)
        XCTAssertEqual([0x01, 0x00, 0x00, 0x00, 0x01, 0xB5, 0x2B, 0x86, 0x33], [UInt8]((msg.getProperty(id: .unknown0x120B) as Data?)!))
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x4C, 0x41, 0x42, 0x53, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x35, 0x35, 0x31, 0x32, 0x43, 0x35, 0x42, 0x30, 0x30, 0x35, 0x31, 0x33, 0x34, 0x38, 0x44, 0x39, 0x39, 0x32, 0x41, 0x46, 0x39, 0x39, 0x33, 0x46, 0x39, 0x32, 0x43, 0x33, 0x30, 0x46, 0x35, 0x41, 0x2D, 0x52, 0x45, 0x49, 0x53, 0x49, 0x4E, 0x47, 0x45, 0x52, 0x20, 0x45, 0x00], [UInt8](msg.senderSearchKey!))
        XCTAssertTrue(msg.hasAttachments!)
        XCTAssertEqual("de-AT, en-US", (msg.getProperty(set: .internetHeaders, name: "acceptlanguage") as String?)!)
        XCTAssertEqual("<DBXPR05MB254A4B49A60791EE7F7D3BCF3940@DBXPR05MB254.eurprd05.prod.outlook.com>", (msg.getProperty(id: .tagInternetMessageId) as String?)!)
        XCTAssertEqual("", msg.subjectPrefix!)
        XCTAssertEqual([0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x15, 0x00, 0x00, 0x00, 0x71, 0xB7, 0x03, 0x82, 0x10, 0xA7, 0x4B, 0x08, 0xBD, 0x4A, 0xA8, 0x11, 0x6A, 0x8B, 0xE7, 0x00], [UInt8]((msg.getProperty(id: .PR_SENT_REPRESENTING_SID) as Data?)!))
        XCTAssertEqual("outlookmsg2html Testmail", msg.normalizedSubject!)
        XCTAssertEqual("Emanuel.Reisinger@cargonet.software", (msg.getProperty(id: .tagSenderSmtpAddress) as String?)!)
        XCTAssertEqual("Emanuel.Reisinger@axians.com", msg.internetAccountName!)
        XCTAssertEqual(.normal, msg.priority!)
        XCTAssertEqual(0x00000000, (msg.lastModifierEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.lastModifierEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.lastModifierEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.lastModifierEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/o=ExchangeLabs/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=5512c5b0051348d992af993f92c30f5a-REISINGER E\u{00}", (msg.lastModifierEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual("REISINGER Emanuel\u{00}", msg.displayTo!)
        XCTAssertEqual("EX", (msg.getProperty(id: .tagCreatorAddressType) as String?)!)
        XCTAssertEqual("/O=EXCHANGELABS/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=5512C5B0051348D992AF993F92C30F5A-REISINGER E", msg.sentRepresentingEmailAddress!)
        XCTAssertEqual("EX", msg.receivedRepresentingAddressType!)
        XCTAssertEqual(.html, msg.messageEditorFormat!)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x4C, 0x41, 0x42, 0x53, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x35, 0x35, 0x31, 0x32, 0x43, 0x35, 0x42, 0x30, 0x30, 0x35, 0x31, 0x33, 0x34, 0x38, 0x44, 0x39, 0x39, 0x32, 0x41, 0x46, 0x39, 0x39, 0x33, 0x46, 0x39, 0x32, 0x43, 0x33, 0x30, 0x46, 0x35, 0x41, 0x2D, 0x52, 0x45, 0x49, 0x53, 0x49, 0x4E, 0x47, 0x45, 0x52, 0x20, 0x45, 0x00], [UInt8](msg.receivedRepresentingSearchKey!))
        XCTAssertEqual("EX", msg.receivedByAddressType!)
        XCTAssertEqual("REISINGER Emanuel", msg.lastModifierName!)

        XCTAssertEqual(1, msg.recipients.count)
        XCTAssertEqual([0x00, 0x00, 0x00, 0x00, 0xDC, 0xA7, 0x40, 0xC8, 0xC0, 0x42, 0x10, 0x1A, 0xB4, 0xB9, 0x08, 0x00, 0x2B, 0x2F, 0xE1, 0x82, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x6F, 0x3D, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6E, 0x67, 0x65, 0x4C, 0x61, 0x62, 0x73, 0x2F, 0x6F, 0x75, 0x3D, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6E, 0x67, 0x65, 0x20, 0x41, 0x64, 0x6D, 0x69, 0x6E, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x20, 0x47, 0x72, 0x6F, 0x75, 0x70, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x63, 0x6E, 0x3D, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6E, 0x74, 0x73, 0x2F, 0x63, 0x6E, 0x3D, 0x35, 0x35, 0x31, 0x32, 0x63, 0x35, 0x62, 0x30, 0x30, 0x35, 0x31, 0x33, 0x34, 0x38, 0x64, 0x39, 0x39, 0x32, 0x61, 0x66, 0x39, 0x39, 0x33, 0x66, 0x39, 0x32, 0x63, 0x33, 0x30, 0x66, 0x35, 0x61, 0x2D, 0x52, 0x45, 0x49, 0x53, 0x49, 0x4E, 0x47, 0x45, 0x52, 0x20, 0x45, 0x00], [UInt8](msg.recipients[0].recordKey!))
        XCTAssertEqual(.mailUser, msg.recipients[0].objectType!)
        XCTAssertEqual("REISINGER Emanuel", msg.recipients[0].displayName!)
        XCTAssertEqual(0, msg.recipients[0].rowid!)
        XCTAssertEqual("REISINGER Emanuel", msg.recipients[0].transmittableDisplayName!)
        XCTAssertEqual(.sendable, msg.recipients[0].recipientFlags!)
        XCTAssertEqual(0x00000000, (msg.recipients[0].entryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.recipients[0].entryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.recipients[0].entryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.recipients[0].entryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/o=ExchangeLabs/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=5512c5b0051348d992af993f92c30f5a-REISINGER E\u{00}", (msg.recipients[0].entryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual("emanuel.reisinger", msg.recipients[0].addressBookDisplayNamePrintable!)
        XCTAssertEqual(0, msg.recipients[0].recipientOrder!)
        XCTAssertEqual([0x89, 0xE6, 0x53, 0xB5, 0x5A, 0xE4, 0x74, 0x4C, 0xA5, 0xCB, 0x33, 0x18, 0xD0, 0xFF, 0x50, 0x44], [UInt8]((msg.recipients[0].getProperty(id: .tagAbProviders) as Data?)!))
        XCTAssertEqual([DisplayTypeEx(rawValue: 0x40000000)], msg.recipients[0].displayTypeEx)
        XCTAssertEqual("Emanuel.Reisinger@cargonet.software", msg.recipients[0].smtpAddress!)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x4C, 0x41, 0x42, 0x53, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x35, 0x35, 0x31, 0x32, 0x43, 0x35, 0x42, 0x30, 0x30, 0x35, 0x31, 0x33, 0x34, 0x38, 0x44, 0x39, 0x39, 0x32, 0x41, 0x46, 0x39, 0x39, 0x33, 0x46, 0x39, 0x32, 0x43, 0x33, 0x30, 0x46, 0x35, 0x41, 0x2D, 0x52, 0x45, 0x49, 0x53, 0x49, 0x4E, 0x47, 0x45, 0x52, 0x20, 0x45, 0x00], [UInt8](msg.recipients[0].searchKey!))
        XCTAssertEqual(0, (msg.recipients[0].getProperty(id: .tagRecipientResourceState) as UInt32?)!)
        XCTAssertTrue(msg.recipients[0].sendRichInfo!)
        XCTAssertEqual([0x00, 0x07, 0x91, 0x87], [UInt8](msg.recipients[0].instanceKey!))
        XCTAssertEqual(0x00000000, (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/o=ExchangeLabs/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=5512c5b0051348d992af993f92c30f5a-REISINGER E\u{00}", (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual("EX", msg.recipients[0].addressType!)
        XCTAssertEqual([0x89, 0xE6, 0x53, 0xB5, 0x5A, 0xE4, 0x74, 0x4C, 0xA5, 0xCB, 0x33, 0x18, 0xD0, 0xFF, 0x50, 0x44], [UInt8]((msg.recipients[0].getProperty(id: .unknown0x0C25) as Data?)!))
        XCTAssertEqual("emanuel.reisinger", msg.recipients[0].account!)
        XCTAssertEqual(.none, msg.recipients[0].recipientTrackStatus!)
        XCTAssertTrue(msg.recipients[0].responsibility!)
        XCTAssertEqual("REISINGER Emanuel", msg.recipients[0].recipientDisplayName!)
        XCTAssertEqual("/o=ExchangeLabs/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=5512c5b0051348d992af993f92c30f5a-REISINGER E", msg.recipients[0].emailAddress!)
        XCTAssertEqual(.mailUser, msg.recipients[0].displayType!)
        XCTAssertEqual([0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x15, 0x00, 0x00, 0x00, 0x71, 0xB7, 0x03, 0x82, 0x10, 0xA7, 0x4B, 0x08, 0xBD, 0x4A, 0xA8, 0x11, 0x6A, 0x8B, 0xE7, 0x00], [UInt8]((msg.recipients[0].getProperty(id: .unknown0x0C24) as Data?)!))
        XCTAssertEqual(.primaryRecipient, msg.recipients[0].recipientType!)
        XCTAssertEqual("sip:emanuel.reisinger@vinci-energies.net", (msg.recipients[0].getProperty(id: .unknown0x5FE5) as String?)!)

        XCTAssertEqual(1, msg.attachments.count)
        XCTAssertEqual(0, msg.attachments[0].attachmentLinkId!)
        XCTAssertEqual(4294967295, msg.attachments[0].renderingPosition!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[0].storeSupportMask)
        XCTAssertEqual("EnUs", msg.attachments[0].language!)
        XCTAssertEqual([.read], msg.attachments[0].access)
        XCTAssertFalse(msg.attachments[0].attachmentHidden!)
        XCTAssertEqual("outlookmsg2html Testmail", msg.attachments[0].displayName!)
        XCTAssertEqual(.embeddedMessage, msg.attachments[0].attachMethod!)
        XCTAssertFalse(msg.attachments[0].attachmentContactPhoto!)
        XCTAssertEqual(1460366277.0, msg.attachments[0].lastModificationTime!.timeIntervalSince1970)
        XCTAssertNotNil(msg.attachments[0].attachDataBinary)
        XCTAssertEqual([0x00, 0x00, 0x00, 0x00], [UInt8](msg.attachments[0].recordKey!))
        XCTAssertEqual(.attachment, msg.attachments[0].objectType!)
        XCTAssertEqual(.readOnly, msg.attachments[0].accessLevel!)
        XCTAssertEqual([0x33, 0x77, 0x5D, 0xF0, 0xAE, 0x78, 0x6C, 0x43, 0x83, 0x6B, 0x86, 0xCA, 0xD0, 0xC8, 0xE4, 0xB7], [UInt8]((msg.attachments[0].getProperty(id: .unknown0x371D) as Data?)!))
        XCTAssertEqual(79870665600.0, msg.attachments[0].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual(0x00000000, msg.attachments[0].attachmentFlags!)
        XCTAssertEqual([], msg.attachments[0].attachFlags)
        XCTAssertEqual(1460366277.0, msg.attachments[0].creationTime!.timeIntervalSince1970)
        XCTAssertNotNil(msg.attachments[0].attachRendering)
        XCTAssertEqual(79870665600.0, msg.attachments[0].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual("outlookmsg2html Testmail", msg.attachments[0].attachFilename!)
        XCTAssertEqual(0, msg.attachments[0].attachNumber!)
        XCTAssertEqual([], [UInt8](msg.attachments[0].attachEncoding!))
    }

    func testReadConfusedCat6() throws {
        let data = try getData(name: "TheConfusedCat/msgparser/plain chain")
        let msg = try MsgFile(data: data)
        
        XCTAssertEqual(.notAssigned, msg.taskState!)
        XCTAssertEqual(1351039496.0, (msg.getProperty(id: .tagProviderSubmitTime) as Date?)!.timeIntervalSince1970)
        XCTAssertFalse(msg.taskFRecurring!)
        XCTAssertEqual("[Redmine - Bug #10180] redmine not truncating emails properly", msg.conversationTopic!)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x41, 0x4E, 0x43, 0x41, 0x20, 0x45, 0x4E, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x4F, 0x42, 0x45, 0x52, 0x54, 0x44, 0x00], [UInt8](msg.senderSearchKey!))
        XCTAssertEqual("<redmine.journal-5787.20121005124505@anca.com>", msg.inReplyToId!)
        XCTAssertEqual(0, msg.taskActualEffort!)
        XCTAssertTrue(msg.rtfInSync!)
        XCTAssertFalse(msg.reminderSet!)
        XCTAssertEqual("RE: ", msg.subjectPrefix!)
        XCTAssertEqual("12.0", msg.currentVersionName!)
        XCTAssertEqual([0xA2, 0x55, 0x93, 0x0D, 0x48, 0xED, 0xDF, 0x4F, 0x8F, 0x0C, 0xA3, 0xA0, 0x62, 0xD4, 0xEE, 0x9E], [UInt8](msg.searchKey!))
        XCTAssertEqual("", msg.taskRole!)
        XCTAssertFalse(msg.deleteAfterSubmit!)
        XCTAssertEqual(.html, msg.messageEditorFormat!)
        XCTAssertEqual("Robert Duncan", msg.lastModifierName!)
        XCTAssertEqual(.normal, msg.originalSensitivity!)
        XCTAssertNotNil(msg.body!)
        XCTAssertEqual("Robert Duncan", msg.sentRepresentingName!)
        XCTAssertEqual("", msg.taskAssigner!)
        XCTAssertEqual([.read], msg.messageFlags)
        XCTAssertEqual("'applsoft-redmine@anca.com'; 'rob@thegopedal.com'\u{00}", msg.displayTo!)
        XCTAssertEqual(1351039593.0, msg.lastModificationTime!.timeIntervalSince1970)
        XCTAssertFalse(msg.taskComplete!)
        XCTAssertFalse(msg.teamTask!)
        XCTAssertEqual(3081, msg.messageLocaleId!)
        XCTAssertEqual(1351039221.0, msg.validFlagStringProof!.timeIntervalSince1970)
        XCTAssertEqual(65001, msg.internetCodepage!)
        XCTAssertEqual(.notStarted, msg.taskStatus!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.storeSupportMask)
        XCTAssertFalse(msg.taskNoCompute!)
        XCTAssertEqual(1351039440.0, msg.messageDeliveryTime!.timeIntervalSince1970)
        XCTAssertFalse(msg.`private`!)
        XCTAssertNotNil(msg.rtfCompressed)
        XCTAssertEqual("IPM.Note", msg.messageClass!)
        XCTAssertEqual([.read], msg.access)
        XCTAssertEqual("00000002\u{01}ANCA-EXCHANGE/o=ANCA Enterprise/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=robertd", msg.internetAccountStamp!)
        XCTAssertFalse(msg.readReceiptRequested!)
        XCTAssertEqual(0x00000000, (msg.sentRepresentingEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.sentRepresentingEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.sentRepresentingEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.sentRepresentingEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=ANCA ENTERPRISE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=ROBERTD\u{00}", (msg.sentRepresentingEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual("[Redmine - Bug #10180] redmine not truncating emails properly", msg.normalizedSubject!)
        XCTAssertEqual(.notAssigned, msg.taskAcceptanceState!)
        XCTAssertEqual("", msg.displayCc!)
        XCTAssertEqual("", msg.displayBcc!)
        XCTAssertFalse(msg.taskFFixOffline!)
        XCTAssertEqual(1351039593.0, msg.creationTime!.timeIntervalSince1970)
        XCTAssertEqual(.normal, msg.importance!)
        XCTAssertEqual(0, msg.reminderDelta!)
        XCTAssertEqual([], msg.sideEffects)
        XCTAssertEqual("/o=ANCA Enterprise/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=robertd", msg.senderEmailAddress!)
        XCTAssertEqual(.normal, msg.priority!)
        XCTAssertEqual(0.0, msg.percentComplete!)
        XCTAssertEqual(0x00000000, (msg.senderEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.senderEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.senderEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.senderEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=ANCA ENTERPRISE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=ROBERTD\u{00}", (msg.senderEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual(0x00160000, msg.internetMailOverrideFormat!)
        XCTAssertEqual(4294967295, msg.iconIndex!)
        XCTAssertEqual(1351039496.0, msg.clientSubmitTime!.timeIntervalSince1970)
        XCTAssertFalse(msg.originatorDeliveryReportRequested!)
        XCTAssertEqual(2147483647, msg.taskOrdinal!)
        XCTAssertEqual(.readOnly, msg.accessLevel!)
        XCTAssertEqual("duncan@anca.com", msg.internetAccountName!)
        XCTAssertEqual("RE: [Redmine - Bug #10180] redmine not truncating emails properly", msg.subject!)
        XCTAssertEqual("<redmine.issue-10180.20120928175420@anca.com> <redmine.journal-5787.20121005124505@anca.com>", msg.internetReferences!)
        XCTAssertEqual(0, msg.taskEstimatedEffort!)
        XCTAssertEqual(126661, msg.currentVersion!)
        XCTAssertEqual(1, msg.taskVersion!)
        XCTAssertEqual(.normal, msg.sensitivity!)
        XCTAssertTrue(msg.alternateRecipientAllowed!)
        XCTAssertEqual("00000002\u{01}ANCA-EXCHANGE/o=ANCA Enterprise/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=robertd\u{01}duncan@anca.com", msg.nextSendAcct!)
        XCTAssertEqual(.notAssigned, msg.taskMode!)
        XCTAssertEqual([0x00, 0x00, 0x00, 0x00, 0xBE, 0x0B, 0xB7, 0xAC, 0x92, 0x08, 0xDB, 0x4E, 0x83, 0xFE, 0x9D, 0xDD, 0x4B, 0x29, 0xAB, 0xE0, 0x01, 0x00, 0x49, 0x5A, 0xFE, 0x65, 0x39, 0x8B, 0xEE, 0x44, 0x88, 0xC4, 0xB6, 0x89, 0x72, 0x73, 0xD9, 0x16, 0x00, 0x01, 0xD3, 0xB7, 0x07, 0xCA, 0x00, 0x00], [UInt8]((msg.getProperty(id: .tagSentMailEntryId) as Data?)!))
        XCTAssertEqual(1, msg.predecessorChangeList!.values.count)
        XCTAssertEqual(UUID(uuidString: "65FE5A49-8B39-44EE-88C4-B6897273D916"), msg.predecessorChangeList!.values[0].namespaceGuid)
        XCTAssertEqual([0x00, 0x33, 0xCA, 0xE0, 0x3A, 0x35], msg.predecessorChangeList!.values[0].localId)
        XCTAssertFalse(msg.recipientReassignmentProhibited!)
        XCTAssertEqual("EX", (msg.getProperty(id: .tagSenderAddressType) as String?)!)
        XCTAssertEqual(.notAssigned, msg.taskOwnership!)
        XCTAssertFalse(msg.useTnef!)
        XCTAssertEqual("00000002\u{01}ANCA-EXCHANGE/o=ANCA Enterprise/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=robertd\u{01}duncan@anca.com", msg.primarySendAccount!)
        XCTAssertFalse(msg.agingDontAgeMe!)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x41, 0x4E, 0x43, 0x41, 0x20, 0x45, 0x4E, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x4F, 0x42, 0x45, 0x52, 0x54, 0x44, 0x00], [UInt8](msg.sentRepresentingSearchKey!))
        XCTAssertEqual(0x01, msg.conversationIndex!.header.reserved)
        XCTAssertEqual(0xCD, msg.conversationIndex!.header.currentFileTime.0)
        XCTAssertEqual(0xA2, msg.conversationIndex!.header.currentFileTime.1)
        XCTAssertEqual(0xA3, msg.conversationIndex!.header.currentFileTime.2)
        XCTAssertEqual(0x6F, msg.conversationIndex!.header.currentFileTime.3)
        XCTAssertEqual(0x35, msg.conversationIndex!.header.currentFileTime.4)
        XCTAssertEqual(UUID(uuidString: "C1C0E99E-736D-4BE4-901D-5759DD2D07BF"), msg.conversationIndex!.header.guid)
        XCTAssertEqual(1, msg.conversationIndex!.responseLevels.count)
        XCTAssertEqual(0xE111B703, msg.conversationIndex!.responseLevels[0].dcAndDeltaTime)
        XCTAssertEqual(0x90, msg.conversationIndex!.responseLevels[0].random)
        XCTAssertEqual("Robert Duncan", (msg.getProperty(id: .tagSenderName) as String?)!)
        XCTAssertEqual(UUID(uuidString: "65FE5A49-8B39-44EE-88C4-B6897273D916"), msg.changeKey!.namespaceGuid)
        XCTAssertEqual([0x00, 0x33, 0xCA, 0xE0, 0x3A, 0x35], msg.changeKey!.localId)

        XCTAssertEqual(2, msg.recipients.count)
        XCTAssertEqual(0, msg.recipients[0].recipientOrder!)
        XCTAssertEqual(.mailUser, msg.recipients[0].objectType!)
        XCTAssertEqual("'applsoft-redmine@anca.com'", msg.recipients[0].displayName!)
        XCTAssertEqual([0x00, 0x0A, 0x8C, 0x14], [UInt8](msg.recipients[0].instanceKey!))
        XCTAssertEqual(0, (msg.recipients[0].getProperty(id: .unknown0x5FF2) as UInt32?)!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x41, 0x50, 0x50, 0x4C, 0x53, 0x4F, 0x46, 0x54, 0x2D, 0x52, 0x45, 0x44, 0x4D, 0x49, 0x4E, 0x45, 0x40, 0x41, 0x4E, 0x43, 0x41, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.recipients[0].searchKey!))
        XCTAssertEqual("applsoft-redmine@anca.com", msg.recipients[0].emailAddress!)
        XCTAssertEqual(.sendable, msg.recipients[0].recipientFlags!)
        XCTAssertEqual(0, msg.recipients[0].sendInternetEncoding!)
        XCTAssertEqual(0, (msg.recipients[0].getProperty(id: .unknown0x5FEF) as UInt32?)!)
        XCTAssertEqual(0, (msg.recipients[0].getProperty(id: .unknown0x5FEB) as UInt32?)!)
        XCTAssertEqual(0, msg.recipients[0].rowid!)
        XCTAssertEqual(0x00000000, (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("applsoft-redmine@anca.com", (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("applsoft-redmine@anca.com", (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual(.mailUser, msg.recipients[0].displayType!)
        XCTAssertEqual("applsoft-redmine@anca.com", msg.recipients[0].recipientDisplayName!)
        XCTAssertEqual(.primaryRecipient, msg.recipients[0].recipientType!)
        XCTAssertEqual("SMTP", msg.recipients[0].addressType!)
        XCTAssertFalse(msg.recipients[0].sendRichInfo!)
        XCTAssertEqual(0, (msg.recipients[0].getProperty(id: .tagRecipientResourceState) as UInt32?)!)
        XCTAssertEqual(.none, msg.recipients[0].recipientTrackStatus!)
        XCTAssertEqual(0, (msg.recipients[0].getProperty(id: .unknown0x5FF5) as UInt32?)!)
        XCTAssertTrue(msg.recipients[0].responsibility!)
        XCTAssertEqual(0x00000000, (msg.recipients[0].entryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.recipients[0].entryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.recipients[0].entryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode, OneOffEntryFlags(rawValue: 0x1000)], (msg.recipients[0].entryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("applsoft-redmine@anca.com", (msg.recipients[0].entryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.recipients[0].entryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("applsoft-redmine@anca.com", (msg.recipients[0].entryId as? OneOffEntryID)!.emailAddress)

        XCTAssertEqual(1, msg.recipients[1].recipientOrder!)
        XCTAssertEqual(.mailUser, msg.recipients[1].objectType!)
        XCTAssertEqual("'rob@thegopedal.com'", msg.recipients[1].displayName!)
        XCTAssertEqual([0x00, 0x0A, 0x8C, 0x17], [UInt8](msg.recipients[1].instanceKey!))
        XCTAssertEqual("rob@thegopedal.com", msg.recipients[1].emailAddress!)
        XCTAssertEqual(.sendable, msg.recipients[1].recipientFlags!)
        XCTAssertEqual(0, msg.recipients[1].sendInternetEncoding!)
        XCTAssertEqual(1, msg.recipients[1].rowid!)
        XCTAssertEqual([0x00, 0x00, 0x00, 0x00, 0x81, 0x2B, 0x1F, 0xA4, 0xBE, 0xA3, 0x10, 0x19, 0x9D, 0x6E, 0x00, 0xDD, 0x01, 0x0F, 0x54, 0x02, 0x00, 0x00, 0x01, 0x90, 0x72, 0x00, 0x6F, 0x00, 0x62, 0x00, 0x40, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x67, 0x00, 0x6F, 0x00, 0x70, 0x00, 0x65, 0x00, 0x64, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x2E, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x00, 0x00, 0x53, 0x00, 0x4D, 0x00, 0x54, 0x00, 0x50, 0x00, 0x00, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x62, 0x00, 0x40, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x67, 0x00, 0x6F, 0x00, 0x70, 0x00, 0x65, 0x00, 0x64, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x2E, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x00, 0x00], [UInt8](msg.recipients[1].recordKey!))
        XCTAssertEqual(0x00000000, (msg.recipients[1].recipientEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.recipients[1].recipientEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.recipients[1].recipientEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode, OneOffEntryFlags(rawValue: 0x1000)], (msg.recipients[1].recipientEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("rob@thegopedal.com", (msg.recipients[1].recipientEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.recipients[1].recipientEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("rob@thegopedal.com", (msg.recipients[1].recipientEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual(.mailUser, msg.recipients[1].displayType!)
        XCTAssertEqual("rob@thegopedal.com", msg.recipients[1].recipientDisplayName!)
        XCTAssertEqual(.primaryRecipient, msg.recipients[1].recipientType!)
        XCTAssertEqual("SMTP", msg.recipients[1].addressType!)
        XCTAssertFalse(msg.recipients[1].sendRichInfo!)
        XCTAssertEqual(0, (msg.recipients[1].getProperty(id: .tagRecipientResourceState) as UInt32?)!)
        XCTAssertEqual(.none, msg.recipients[1].recipientTrackStatus!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x52, 0x4F, 0x42, 0x40, 0x54, 0x48, 0x45, 0x47, 0x4F, 0x50, 0x45, 0x44, 0x41, 0x4C, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.recipients[1].searchKey!))
        XCTAssertTrue(msg.recipients[1].responsibility!)
        XCTAssertEqual(0x00000000, (msg.recipients[1].entryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.recipients[1].entryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.recipients[1].entryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode, OneOffEntryFlags(rawValue: 0x1000)], (msg.recipients[1].entryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("rob@thegopedal.com", (msg.recipients[1].entryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.recipients[1].entryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("rob@thegopedal.com", (msg.recipients[1].entryId as? OneOffEntryID)!.emailAddress)

        XCTAssertEqual(0, msg.attachments.count)
    }

    func testReadConfusedCat7() throws {
        let data = try getData(name: "TheConfusedCat/msgparser/simple sent")
        let msg = try MsgFile(data: data)
        
        XCTAssertEqual("BitDaddys Software", msg.conversationTopic!)
        XCTAssertEqual("", msg.displayCc!)
        XCTAssertEqual(1196302382.0, msg.messageDeliveryTime!.timeIntervalSince1970)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x4A, 0x44, 0x4F, 0x45, 0x53, 0x40, 0x53, 0x4F, 0x4D, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.senderSearchKey!))
        XCTAssertEqual(0x00000000, (msg.sentRepresentingEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.sentRepresentingEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.sentRepresentingEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.sentRepresentingEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("John Doe", (msg.sentRepresentingEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.sentRepresentingEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("jdoes@someserver.com", (msg.sentRepresentingEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual("SMTP", (msg.getProperty(id: .tagSenderAddressType) as String?)!)
        XCTAssertEqual(1196302382.0, msg.creationTime!.timeIntervalSince1970)
        XCTAssertEqual("Dear BitDaddys Corp.,\r\n\r\nWe have added your software to our approved list.\r\n\r\nThank you for your efforts,\r\nSincerely,\r\nJohn Doe\r\nSome Server Company\r\n", msg.body!)
        XCTAssertEqual(0x01, msg.conversationIndex!.header.reserved)
        XCTAssertEqual(0xC8, msg.conversationIndex!.header.currentFileTime.0)
        XCTAssertEqual(0x32, msg.conversationIndex!.header.currentFileTime.1)
        XCTAssertEqual(0x2D, msg.conversationIndex!.header.currentFileTime.2)
        XCTAssertEqual(0x5E, msg.conversationIndex!.header.currentFileTime.3)
        XCTAssertEqual(0xEE, msg.conversationIndex!.header.currentFileTime.4)
        XCTAssertEqual(UUID(uuidString: "550F33BB-B536-494F-8CEB-041C084C42C0"), msg.conversationIndex!.header.guid)
        XCTAssertEqual(0, msg.conversationIndex!.responseLevels.count)
        XCTAssertNotNil(msg.rtfCompressed)
        XCTAssertEqual([0x3F, 0x75, 0xFD, 0xDA, 0x5A, 0xC4, 0xA8, 0x43, 0xB0, 0xD0, 0xE3, 0x62, 0x7A, 0xFA, 0xB2, 0xE4], [UInt8](msg.searchKey!))
        XCTAssertEqual("sales@bitdaddys.com\u{00}", msg.displayTo!)
        XCTAssertEqual("(outlookEMLandMSGconverter Trial Version Import) BitDaddys Software", msg.subject!)
        XCTAssertEqual([.read], msg.messageFlags)
        XCTAssertEqual(0x00000000, (msg.senderEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.senderEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.senderEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.senderEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("John Doe", (msg.senderEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.senderEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("jdoes@someserver.com", (msg.senderEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual(1155407125.0, msg.clientSubmitTime!.timeIntervalSince1970)
        XCTAssertEqual("", msg.displayBcc!)
        XCTAssertEqual(.normal, msg.importance!)
        XCTAssertTrue(msg.rtfInSync!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x4A, 0x44, 0x4F, 0x45, 0x53, 0x40, 0x53, 0x4F, 0x4D, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.sentRepresentingSearchKey!))
        XCTAssertEqual(344061, (msg.getProperty(id: .tagStoreUnicodeMask) as UInt32?)!)
        XCTAssertEqual("(outlookEMLandMSGconverter Trial Version Import) BitDaddys Software", msg.normalizedSubject!)
        XCTAssertEqual("SMTP", msg.sentRepresentingAddressType!)
        XCTAssertEqual(.readOnly, msg.accessLevel!)
        XCTAssertEqual("", msg.subjectPrefix!)
        XCTAssertEqual("John Doe", msg.sentRepresentingName!)
        XCTAssertEqual("John Doe", (msg.getProperty(id: .tagSenderName) as String?)!)
        XCTAssertNotNil(msg.transportMessageHeaders)
        XCTAssertEqual(28591, msg.internetCodepage!)
        XCTAssertEqual(1196302382.0, msg.lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual("IPM.Note", msg.messageClass!)
        XCTAssertEqual("jdoes@someserver.com", msg.senderEmailAddress!)
        XCTAssertEqual([.read], msg.access)
        XCTAssertEqual("jdoes@someserver.com", msg.sentRepresentingEmailAddress!)

        XCTAssertEqual(1, msg.recipients.count)
        XCTAssertEqual("sales@bitdaddys.com", msg.recipients[0].emailAddress!)
        XCTAssertEqual("sales@bitdaddys.com", msg.recipients[0].displayName!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x53, 0x41, 0x4C, 0x45, 0x53, 0x40, 0x42, 0x49, 0x54, 0x44, 0x41, 0x44, 0x44, 0x59, 0x53, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.recipients[0].searchKey!))
        XCTAssertEqual(0, msg.recipients[0].rowid!)
        XCTAssertEqual("SMTP", msg.recipients[0].addressType!)
        XCTAssertEqual([0x00, 0x05, 0x8C, 0xD4], [UInt8](msg.recipients[0].instanceKey!))
        XCTAssertEqual(.primaryRecipient, msg.recipients[0].recipientType!)
        XCTAssertEqual(0x00000000, (msg.recipients[0].entryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.recipients[0].entryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.recipients[0].entryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.recipients[0].entryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("sales@bitdaddys.com", (msg.recipients[0].entryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.recipients[0].entryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("sales@bitdaddys.com", (msg.recipients[0].entryId as? OneOffEntryID)!.emailAddress)

        XCTAssertEqual(0, msg.attachments.count)
    }

    func testReadConfusedCat8() throws {
        let data = try getData(name: "TheConfusedCat/msgparser/unsent draft")
        let msg = try MsgFile(data: data)
        
        XCTAssertEqual(.normal, msg.sensitivity!)
        XCTAssertFalse(msg.`private`!)
        XCTAssertEqual(4294967295, msg.iconIndex!)
        XCTAssertTrue(msg.alternateRecipientAllowed!)
        XCTAssertEqual(1456239470.0, msg.lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual("", msg.displayBcc!)
        XCTAssertEqual([.read], msg.access)
        XCTAssertEqual(.normal, msg.priority!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.storeSupportMask)
        XCTAssertEqual("MSG Test File", msg.normalizedSubject!)
        XCTAssertTrue(msg.rtfInSync!)
        XCTAssertEqual("", msg.displayCc!)
        XCTAssertEqual(20127, msg.internetCodepage!)
        XCTAssertEqual(154783, msg.currentVersion!)
        XCTAssertEqual(1033, (msg.getProperty(set: .common, lid: 0x000085EB) as UInt32?)!)
        XCTAssertEqual([.unsent], msg.messageFlags)
        XCTAssertEqual(1033, msg.messageLocaleId!)
        XCTAssertEqual([], msg.sideEffects)
        XCTAssertFalse(msg.reminderSet!)
        XCTAssertEqual("MSG Test File", msg.conversationTopic!)
        XCTAssertEqual([0x3C, 0x3F, 0x78, 0x6D, 0x6C, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x3D, 0x22, 0x31, 0x2E, 0x30, 0x22, 0x20, 0x65, 0x6E, 0x63, 0x6F, 0x64, 0x69, 0x6E, 0x67, 0x3D, 0x22, 0x55, 0x54, 0x46, 0x2D, 0x38, 0x22, 0x20, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x61, 0x6C, 0x6F, 0x6E, 0x65, 0x3D, 0x22, 0x79, 0x65, 0x73, 0x22, 0x3F, 0x3E, 0x0D, 0x0A, 0x3C, 0x61, 0x3A, 0x63, 0x6C, 0x72, 0x4D, 0x61, 0x70, 0x20, 0x78, 0x6D, 0x6C, 0x6E, 0x73, 0x3A, 0x61, 0x3D, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x73, 0x63, 0x68, 0x65, 0x6D, 0x61, 0x73, 0x2E, 0x6F, 0x70, 0x65, 0x6E, 0x78, 0x6D, 0x6C, 0x66, 0x6F, 0x72, 0x6D, 0x61, 0x74, 0x73, 0x2E, 0x6F, 0x72, 0x67, 0x2F, 0x64, 0x72, 0x61, 0x77, 0x69, 0x6E, 0x67, 0x6D, 0x6C, 0x2F, 0x32, 0x30, 0x30, 0x36, 0x2F, 0x6D, 0x61, 0x69, 0x6E, 0x22, 0x20, 0x62, 0x67, 0x31, 0x3D, 0x22, 0x6C, 0x74, 0x31, 0x22, 0x20, 0x74, 0x78, 0x31, 0x3D, 0x22, 0x64, 0x6B, 0x31, 0x22, 0x20, 0x62, 0x67, 0x32, 0x3D, 0x22, 0x6C, 0x74, 0x32, 0x22, 0x20, 0x74, 0x78, 0x32, 0x3D, 0x22, 0x64, 0x6B, 0x32, 0x22, 0x20, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x31, 0x3D, 0x22, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x31, 0x22, 0x20, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x32, 0x3D, 0x22, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x32, 0x22, 0x20, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x33, 0x3D, 0x22, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x33, 0x22, 0x20, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x34, 0x3D, 0x22, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x34, 0x22, 0x20, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x35, 0x3D, 0x22, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x35, 0x22, 0x20, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x36, 0x3D, 0x22, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x36, 0x22, 0x20, 0x68, 0x6C, 0x69, 0x6E, 0x6B, 0x3D, 0x22, 0x68, 0x6C, 0x69, 0x6E, 0x6B, 0x22, 0x20, 0x66, 0x6F, 0x6C, 0x48, 0x6C, 0x69, 0x6E, 0x6B, 0x3D, 0x22, 0x66, 0x6F, 0x6C, 0x48, 0x6C, 0x69, 0x6E, 0x6B, 0x22, 0x2F, 0x3E], [UInt8]((msg.getProperty(set: .common, lid: 0x000085C3) as Data?)!))
        XCTAssertNotNil(msg.rtfCompressed)
        XCTAssertEqual(0, msg.reminderDelta!)
        XCTAssertEqual(.notAssigned, msg.taskMode!)
        XCTAssertEqual("time2talk@online-convert.com\u{00}", msg.displayTo!)
        XCTAssertEqual("", msg.subjectPrefix!)
        XCTAssertEqual("15.0", msg.currentVersionName!)
        XCTAssertFalse(msg.agingDontAgeMe!)
        XCTAssertEqual(.readOnly, msg.accessLevel!)
        XCTAssertEqual(1456239470.0, msg.creationTime!.timeIntervalSince1970)
        XCTAssertFalse(msg.deleteAfterSubmit!)
        XCTAssertEqual("MSG test file\r\nPurpose: Provide example of this file type\r\nDocument file type: MSG\r\nVersion: 1.0\r\nRemark:\r\n\r\nExample content:\r\nThe names \"John Doe\" for males, \"Jane Doe\" or \"Jane Roe\" for females,\r\nor \"Jonnie Doe\" and \"Janie Doe\" for children, or just \"Doe\"\r\nnon-gender-specifically are used as placeholder names for a party whose\r\ntrue identity is unknown or must be withheld in a legal action, case, or\r\ndiscussion. The names are also used to refer to acorpse or hospital\r\npatient whose identity is unknown. This practice is widely used in the\r\nUnited States and Canada, but is rarely used in other English-speaking\r\ncountries including the United Kingdom itself, from where the use of\r\n\"John Doe\" in a legal context originates. The names Joe Bloggs or John\r\nSmith are used in the UK instead, as well as in Australia and New\r\nZealand. \r\n\r\nJohn Doe is sometimes used to refer to a typical male in other contexts\r\nas well, in a similar manner to John Q. Public, known in Great Britain\r\nas Joe Public, John Smith or Joe Bloggs. For example, the first name\r\nlisted on a form is often John Doe, along with a fictional address or\r\nother fictional information to provide an example of how to fill in the\r\nform. The name is also used frequently in popular culture, for example\r\nin the Frank Capra film Meet John Doe. John Doe was also the name of a\r\n2002 American television series. \r\n\r\nSimilarly, a child or baby whose identity is unknown may be referred to\r\nas Baby Doe. A notorious murder case in Kansas City, Missouri, referred\r\nto the baby victim as Precious Doe. Other unidentified female murder\r\nvictims are Cali Doe and Princess Doe. Additional persons may be called\r\nJames Doe, Judy Doe, etc. However, to avoid possible confusion, if two\r\nanonymous or unknown parties are cited in a specific case or action, the\r\nsurnames Doe and Roe may be used simultaneously; for example, \"John Doe\r\nv. Jane Roe\". If several anonymous parties are referenced, they may\r\nsimply be labelled John Doe #1, John Doe #2, etc. (the U.S. Operation\r\nDelego cited 21 (numbered) \"John Doe\"s) or labelled with other variants\r\nof Doe / Roe / Poe / etc. Other early alternatives such as John Stiles\r\nand Richard Miles are now rarely used, and Mary Major has been used in\r\nsome American federal cases. \r\n\r\nFile created by http://www.online-convert.com\r\n<http://www.online-convert.com> \r\nMore example files: http://www.online-convert.com/file-type\r\n<http://www.online-convert.com/file-type> \r\nText of Example content: Wikipedia\r\n<http://en.wikipedia.org/wiki/John_Doe> \r\nLicense: Attribution-ShareAlike 3.0 Unported\r\n<http://creativecommons.org/licenses/by-sa/3.0/> \r\n\r\nFeel free to use and share the file according to the license above.\r\n", msg.body!)
        XCTAssertFalse(msg.originatorDeliveryReportRequested!)
        XCTAssertEqual("IPM.Note", msg.messageClass!)
        XCTAssertEqual("MSG Test File", msg.subject!)
        XCTAssertFalse(msg.readReceiptRequested!)
        XCTAssertEqual([0x50, 0x4B, 0x03, 0x04, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0xE9, 0xDE, 0x0F, 0xBF, 0xFF, 0x00, 0x00, 0x00, 0x1C, 0x02, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x5B, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x5F, 0x54, 0x79, 0x70, 0x65, 0x73, 0x5D, 0x2E, 0x78, 0x6D, 0x6C, 0xAC, 0x91, 0xCB, 0x4E, 0xC3, 0x30, 0x10, 0x45, 0xF7, 0x48, 0xFC, 0x83, 0xE5, 0x2D, 0x4A, 0x9C, 0xB2, 0x40, 0x08, 0x25, 0xE9, 0x82, 0xC7, 0x8E, 0xC7, 0xA2, 0x7C, 0xC0, 0xC8, 0x99, 0x24, 0x16, 0xC9, 0xD8, 0xB2, 0xA7, 0x55, 0xFB, 0xF7, 0x4C, 0xD2, 0x54, 0x42, 0xA8, 0x20, 0x16, 0x6C, 0x2C, 0xD9, 0x33, 0xF7, 0x9E, 0x3B, 0xE3, 0x72, 0xBD, 0x1F, 0x07, 0xB5, 0xC3, 0x98, 0x9C, 0xA7, 0x4A, 0xAF, 0xF2, 0x42, 0x2B, 0x24, 0xEB, 0x1B, 0x47, 0x5D, 0xA5, 0xDF, 0x37, 0x4F, 0xD9, 0xAD, 0x56, 0x89, 0x81, 0x1A, 0x18, 0x3C, 0x61, 0xA5, 0x0F, 0x98, 0xF4, 0xBA, 0xBE, 0xBC, 0x28, 0x37, 0x87, 0x80, 0x49, 0x89, 0x9A, 0x52, 0xA5, 0x7B, 0xE6, 0x70, 0x67, 0x4C, 0xB2, 0x3D, 0x8E, 0x90, 0x72, 0x1F, 0x90, 0xA4, 0xD2, 0xFA, 0x38, 0x02, 0xCB, 0x35, 0x76, 0x26, 0x80, 0xFD, 0x80, 0x0E, 0xCD, 0x75, 0x51, 0xDC, 0x18, 0xEB, 0x89, 0x91, 0x38, 0xE3, 0xC9, 0x43, 0xD7, 0xE5, 0x03, 0xB6, 0xB0, 0x1D, 0x58, 0x3D, 0xEE, 0xE5, 0xF9, 0x98, 0x24, 0xE2, 0x90, 0xB4, 0xBA, 0x3F, 0x36, 0x4E, 0xAC, 0x4A, 0x43, 0x08, 0x83, 0xB3, 0xC0, 0x92, 0xD4, 0xEC, 0xA8, 0xF9, 0x46, 0xC9, 0x16, 0x42, 0x2E, 0xCA, 0xB9, 0x27, 0xF5, 0x2E, 0xA4, 0x2B, 0x89, 0xA1, 0xCD, 0x59, 0xC2, 0x54, 0xF9, 0x19, 0xB0, 0xE8, 0x5E, 0x65, 0x35, 0xD1, 0x35, 0xA8, 0xDE, 0x20, 0xF2, 0x0B, 0x8C, 0x12, 0xC3, 0xB0, 0x0C, 0x89, 0x5F, 0xCF, 0x67, 0x20, 0x19, 0x2D, 0xE6, 0xBF, 0x3B, 0x9E, 0x89, 0xEC, 0xDB, 0xD6, 0x59, 0x6C, 0xBC, 0xDD, 0x8E, 0xB2, 0x8E, 0x7C, 0x36, 0x5E, 0xCC, 0x4E, 0xC1, 0xFF, 0x14, 0x60, 0xF5, 0x3F, 0xE8, 0x13, 0xD3, 0xCC, 0x7F, 0x5B, 0x7F, 0x02, 0x00, 0x00, 0xFF, 0xFF, 0x03, 0x00, 0x50, 0x4B, 0x03, 0x04, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0xA5, 0xD6, 0xA7, 0xE7, 0xC0, 0x00, 0x00, 0x00, 0x36, 0x01, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x5F, 0x72, 0x65, 0x6C, 0x73, 0x2F, 0x2E, 0x72, 0x65, 0x6C, 0x73, 0x84, 0x8F, 0xCF, 0x6A, 0xC3, 0x30, 0x0C, 0x87, 0xEF, 0x85, 0xBD, 0x83, 0xD1, 0x7D, 0x51, 0xD2, 0xC3, 0x18, 0x25, 0x76, 0x2F, 0xA5, 0x90, 0x43, 0x2F, 0xA3, 0x7D, 0x00, 0xE1, 0x28, 0x7F, 0x68, 0x22, 0x1B, 0xDB, 0x1B, 0xEB, 0xDB, 0x4F, 0xC7, 0x06, 0x0A, 0xBB, 0x08, 0x84, 0xA4, 0xEF, 0xF7, 0xA9, 0x3D, 0xFE, 0xAE, 0x8B, 0xF9, 0xE1, 0x94, 0xE7, 0x20, 0x16, 0x9A, 0xAA, 0x06, 0xC3, 0xE2, 0x43, 0x3F, 0xCB, 0x68, 0xE1, 0x76, 0x3D, 0xBF, 0x7F, 0x82, 0xC9, 0x85, 0xA4, 0xA7, 0x25, 0x08, 0x5B, 0x78, 0x70, 0x86, 0xA3, 0x7B, 0xDB, 0xB5, 0x5F, 0xBC, 0x50, 0xD1, 0xA3, 0x3C, 0xCD, 0x31, 0x1B, 0xA5, 0x48, 0xB6, 0x30, 0x95, 0x12, 0x0F, 0x88, 0xD9, 0x4F, 0xBC, 0x52, 0xAE, 0x42, 0x64, 0xD1, 0xC9, 0x10, 0xD2, 0x4A, 0x45, 0xDB, 0x34, 0x62, 0x24, 0x7F, 0xA7, 0x91, 0x71, 0x5F, 0xD7, 0x1F, 0x98, 0x9E, 0x19, 0xE0, 0x36, 0x4C, 0xD3, 0xF5, 0x16, 0x52, 0xD7, 0x37, 0x60, 0xAE, 0x8F, 0xA8, 0xC9, 0xFF, 0xB3, 0xC3, 0x30, 0xCC, 0x9E, 0x4F, 0xC1, 0x7F, 0xAF, 0x2C, 0xE5, 0x45, 0x04, 0x6E, 0x37, 0x94, 0x4C, 0x69, 0xE4, 0x62, 0xA1, 0xA8, 0x2F, 0xE3, 0x53, 0xBD, 0x90, 0xA8, 0x65, 0xAA, 0xD4, 0x1E, 0xD0, 0xB5, 0xB8, 0xF9, 0xD6, 0xFD, 0x01, 0x00, 0x00, 0xFF, 0xFF, 0x03, 0x00, 0x50, 0x4B, 0x03, 0x04, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0x6B, 0x79, 0x96, 0x16, 0x83, 0x00, 0x00, 0x00, 0x8A, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x4D, 0x61, 0x6E, 0x61, 0x67, 0x65, 0x72, 0x2E, 0x78, 0x6D, 0x6C, 0x0C, 0xCC, 0x4D, 0x0A, 0xC3, 0x20, 0x10, 0x40, 0xE1, 0x7D, 0xA1, 0x77, 0x90, 0xD9, 0x37, 0x63, 0xBB, 0x28, 0x45, 0x62, 0xB2, 0xCB, 0xAE, 0xBB, 0xF6, 0x00, 0x43, 0x9C, 0x1A, 0x41, 0xC7, 0xA0, 0xD2, 0x9F, 0xDB, 0xD7, 0xE5, 0xE3, 0x83, 0x37, 0xCE, 0xDF, 0x14, 0xD5, 0x9B, 0x4B, 0x0D, 0x59, 0x2C, 0x9C, 0x07, 0x0D, 0x8A, 0x65, 0xCD, 0x2E, 0x88, 0xB7, 0xF0, 0x7C, 0x2C, 0xA7, 0x1B, 0xA8, 0xDA, 0x48, 0x1C, 0xC5, 0x2C, 0x6C, 0xE1, 0xC7, 0x15, 0xE6, 0xE9, 0x78, 0x18, 0xC9, 0xB4, 0x8D, 0x13, 0xDF, 0x49, 0xC8, 0x73, 0x51, 0x7D, 0x23, 0xD5, 0x90, 0x85, 0xAD, 0xB5, 0xDD, 0x20, 0xD6, 0xB5, 0x2B, 0xD5, 0x21, 0xEF, 0x2C, 0xDD, 0x5E, 0xB9, 0x24, 0x6A, 0x3D, 0x8B, 0x47, 0x57, 0xE8, 0xD3, 0xF7, 0x29, 0xE2, 0x45, 0xEB, 0x2B, 0x26, 0x0A, 0x02, 0x38, 0xFD, 0x01, 0x00, 0x00, 0xFF, 0xFF, 0x03, 0x00, 0x50, 0x4B, 0x03, 0x04, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0xAA, 0x52, 0x25, 0xDF, 0xC6, 0x06, 0x00, 0x00, 0x8B, 0x1A, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x31, 0x2E, 0x78, 0x6D, 0x6C, 0xEC, 0x59, 0x5D, 0x8B, 0xDB, 0x46, 0x14, 0x7D, 0x2F, 0xF4, 0x3F, 0x08, 0xBD, 0x3B, 0xFE, 0x92, 0xFC, 0xB1, 0xC4, 0x1B, 0x6C, 0xD9, 0xCE, 0xB6, 0xD9, 0x4D, 0x42, 0xEC, 0xA4, 0xE4, 0x71, 0x6C, 0x8F, 0xAD, 0xC9, 0x8E, 0x34, 0x46, 0x33, 0xDE, 0x8D, 0x09, 0x81, 0x92, 0x3C, 0x16, 0x0A, 0xA5, 0x69, 0xE9, 0x43, 0x03, 0x7D, 0xEB, 0x43, 0x69, 0x1B, 0x48, 0xA0, 0x2F, 0xE9, 0xAF, 0xD9, 0x36, 0xA5, 0x4D, 0x21, 0x7F, 0xA1, 0x77, 0x46, 0xB6, 0x3C, 0x63, 0x8F, 0xBB, 0x9B, 0x25, 0x85, 0xA5, 0x64, 0x0D, 0x8B, 0x34, 0x3A, 0xF7, 0xCE, 0x99, 0x7B, 0xAF, 0xCE, 0x1D, 0x49, 0x97, 0xAF, 0xDC, 0x8F, 0xA8, 0x73, 0x84, 0x13, 0x4E, 0x58, 0xDC, 0x70, 0x8B, 0x97, 0x0A, 0xAE, 0x83, 0xE3, 0x21, 0x1B, 0x91, 0x78, 0xD2, 0x70, 0x6F, 0xF7, 0xBB, 0xB9, 0x9A, 0xEB, 0x70, 0x81, 0xE2, 0x11, 0xA2, 0x2C, 0xC6, 0x0D, 0x77, 0x8E, 0xB9, 0x7B, 0x65, 0xF7, 0xC3, 0x0F, 0x2E, 0xA3, 0x1D, 0x11, 0xE2, 0x08, 0x3B, 0x60, 0x1F, 0xF3, 0x1D, 0xD4, 0x70, 0x43, 0x21, 0xA6, 0x3B, 0xF9, 0x3C, 0x1F, 0xC2, 0x30, 0xE2, 0x97, 0xD8, 0x14, 0xC7, 0x70, 0x6D, 0xCC, 0x92, 0x08, 0x09, 0x38, 0x4D, 0x26, 0xF9, 0x51, 0x82, 0x8E, 0xC1, 0x6F, 0x44, 0xF3, 0xA5, 0x42, 0xA1, 0x92, 0x8F, 0x10, 0x89, 0x5D, 0x27, 0x46, 0x11, 0xB8, 0xBD, 0x31, 0x1E, 0x93, 0x21, 0x76, 0xFA, 0xD2, 0xA5, 0xBB, 0xBB, 0x74, 0xDE, 0xA1, 0x70, 0x1A, 0x0B, 0x2E, 0x07, 0x86, 0x34, 0xE9, 0x49, 0xD7, 0xD8, 0xB0, 0x50, 0xD8, 0xD1, 0x61, 0x51, 0x22, 0xF8, 0x9C, 0x07, 0x34, 0x71, 0x8E, 0x10, 0x6D, 0xB8, 0x30, 0xCF, 0x88, 0x1D, 0xF7, 0xF1, 0x7D, 0xE1, 0x3A, 0x14, 0x71, 0x01, 0x17, 0x1A, 0x6E, 0x41, 0xFD, 0xB9, 0xF9, 0xDD, 0xCB, 0x79, 0xB4, 0xB3, 0x30, 0xA2, 0x62, 0x8B, 0xAD, 0x66, 0xD7, 0x55, 0x7F, 0x0B, 0xBB, 0x85, 0xC1, 0xE8, 0xB0, 0xA4, 0xE6, 0x4C, 0x26, 0x83, 0x6C, 0x52, 0xCF, 0xF3, 0xBD, 0x4A, 0x33, 0xF3, 0xAF, 0x00, 0x54, 0x6C, 0xE2, 0x3A, 0xD5, 0x4E, 0xA5, 0x53, 0xC9, 0xFC, 0x29, 0x00, 0x1A, 0x0E, 0x61, 0xA5, 0x29, 0x17, 0xDD, 0xA7, 0xDF, 0xAA, 0xB7, 0xDA, 0xFE, 0x02, 0xAB, 0x81, 0xD2, 0x43, 0x8B, 0xEF, 0x76, 0xB5, 0x5D, 0x2E, 0x1A, 0x78, 0xCD, 0x7F, 0x79, 0x83, 0x73, 0xD3, 0x97, 0x3F, 0x03, 0xAF, 0x40, 0xA9, 0x7F, 0x6F, 0x03, 0xDF, 0xED, 0x06, 0x10, 0x45, 0x03, 0xAF, 0x40, 0x29, 0xDE, 0xDF, 0xC0, 0x7B, 0x5E, 0xB5, 0x14, 0x78, 0x06, 0x5E, 0x81, 0x52, 0x7C, 0x65, 0x03, 0x5F, 0x2D, 0x34, 0xDB, 0x5E, 0xD5, 0xC0, 0x2B, 0x50, 0x48, 0x49, 0x7C, 0xB8, 0x81, 0x2E, 0xF8, 0x95, 0x72, 0xB0, 0x5C, 0x6D, 0x06, 0x19, 0x33, 0xBA, 0x67, 0x85, 0xD7, 0x7D, 0xAF, 0x5B, 0x2D, 0x2D, 0x9C, 0xAF, 0x50, 0x50, 0x0D, 0x59, 0x75, 0xC9, 0x29, 0xC6, 0x2C, 0x16, 0xDB, 0x6A, 0x2D, 0x42, 0xF7, 0x58, 0xD2, 0x05, 0x80, 0x04, 0x52, 0x24, 0x48, 0xEC, 0x88, 0xF9, 0x14, 0x8F, 0xD1, 0x10, 0xAA, 0x38, 0x40, 0x94, 0x0C, 0x12, 0xE2, 0xEC, 0x93, 0x49, 0x08, 0x85, 0x37, 0x45, 0x31, 0xE3, 0x30, 0x5C, 0x28, 0x15, 0xBA, 0x85, 0x32, 0xFC, 0x97, 0x3F, 0x4F, 0x1D, 0xA9, 0x88, 0xA0, 0x1D, 0x8C, 0x34, 0x6B, 0xC9, 0x0B, 0x98, 0xF0, 0x8D, 0x21, 0xC9, 0xC7, 0xE1, 0xC3, 0x84, 0x4C, 0x45, 0xC3, 0xFD, 0x18, 0xBC, 0xBA, 0x1A, 0xE4, 0xCD, 0xCB, 0x1F, 0xDF, 0xBC, 0x7C, 0xEE, 0x9C, 0x3C, 0x7A, 0x71, 0xF2, 0xE8, 0x97, 0x93, 0xC7, 0x8F, 0x4F, 0x1E, 0xFD, 0x9C, 0x3A, 0x32, 0xAC, 0xF6, 0x50, 0x3C, 0xD1, 0xAD, 0x5E, 0x7F, 0xFF, 0xC5, 0xDF, 0x4F, 0x3F, 0x75, 0xFE, 0x7A, 0xFE, 0xDD, 0xEB, 0x27, 0x5F, 0xD9, 0xF1, 0x5C, 0xC7, 0xFF, 0xFE, 0xD3, 0x67, 0xBF, 0xFD, 0xFA, 0xA5, 0x1D, 0x08, 0x2B, 0x5D, 0x85, 0xE0, 0xD5, 0xD7, 0xCF, 0xFE, 0x78, 0xF1, 0xEC, 0xD5, 0x37, 0x9F, 0xFF, 0xF9, 0xC3, 0x13, 0x0B, 0xBC, 0x99, 0xA0, 0x81, 0x0E, 0xEF, 0x93, 0x08, 0x73, 0xE7, 0x3A, 0x3E, 0x76, 0x6E, 0xB1, 0x08, 0x16, 0xA6, 0x42, 0x60, 0x32, 0xC7, 0x83, 0xE4, 0xED, 0x2C, 0xFA, 0x21, 0x22, 0xBA, 0x45, 0x33, 0x9E, 0x70, 0x14, 0x23, 0x39, 0x8B, 0xC5, 0x7F, 0x47, 0x84, 0x06, 0xFA, 0xFA, 0x1C, 0x51, 0x64, 0xC1, 0xB5, 0xB0, 0x19, 0xC1, 0x3B, 0x09, 0x48, 0x8C, 0x0D, 0x78, 0x75, 0x76, 0xCF, 0x20, 0xDC, 0x0B, 0x93, 0x99, 0x20, 0x16, 0x8F, 0xD7, 0xC2, 0xC8, 0x00, 0x1E, 0x30, 0x46, 0x5B, 0x2C, 0xB1, 0x46, 0xE1, 0x9A, 0x9C, 0x4B, 0x0B, 0x73, 0x7F, 0x16, 0x4F, 0xEC, 0x93, 0x27, 0x33, 0x1D, 0x77, 0x0B, 0xA1, 0x23, 0xDB, 0xDC, 0x01, 0x8A, 0x8D, 0xFC, 0x76, 0x66, 0x53, 0xD0, 0x56, 0x62, 0x73, 0x19, 0x84, 0xD8, 0xA0, 0x79, 0x93, 0xA2, 0x58, 0xA0, 0x09, 0x8E, 0xB1, 0x70, 0xE4, 0x35, 0x76, 0x88, 0xB1, 0x65, 0x75, 0x77, 0x09, 0x31, 0xE2, 0x7A, 0x40, 0x86, 0x09, 0xE3, 0x6C, 0x2C, 0x9C, 0xBB, 0xC4, 0x69, 0x21, 0x62, 0x0D, 0x49, 0x9F, 0x0C, 0x8C, 0x6A, 0x5A, 0x19, 0xED, 0x91, 0x08, 0xF2, 0x32, 0xB7, 0x11, 0x84, 0x7C, 0x1B, 0xB1, 0x39, 0xB8, 0xE3, 0xB4, 0x18, 0xB5, 0xAD, 0xBA, 0x8D, 0x8F, 0x4C, 0x24, 0xDC, 0x15, 0x88, 0x5A, 0xC8, 0xF7, 0x31, 0x35, 0xC2, 0x78, 0x15, 0xCD, 0x04, 0x8A, 0x6C, 0x2E, 0xFB, 0x28, 0xA2, 0x7A, 0xC0, 0xF7, 0x91, 0x08, 0x6D, 0x24, 0x7B, 0xF3, 0x64, 0xA8, 0xE3, 0x3A, 0x5C, 0x40, 0xA6, 0x27, 0x98, 0x32, 0xA7, 0x33, 0xC2, 0x9C, 0xDB, 0x6C, 0x6E, 0x24, 0xB0, 0x5E, 0x2D, 0xE9, 0xD7, 0x40, 0x5E, 0xEC, 0x69, 0x3F, 0xA0, 0xF3, 0xC8, 0x44, 0x26, 0x82, 0x1C, 0xDA, 0x7C, 0xEE, 0x23, 0xC6, 0x74, 0x64, 0x9B, 0x1D, 0x06, 0x21, 0x8A, 0xA6, 0x36, 0x6C, 0x8F, 0xC4, 0xA1, 0x8E, 0xFD, 0x88, 0x1F, 0x42, 0x89, 0x22, 0xE7, 0x26, 0x13, 0x36, 0xF8, 0x01, 0x33, 0xEF, 0x10, 0x79, 0x0E, 0x79, 0x40, 0xF1, 0xD6, 0x74, 0xDF, 0x21, 0xD8, 0x48, 0xF7, 0xE9, 0x6A, 0x70, 0x1B, 0x94, 0x55, 0xA7, 0xB4, 0x2A, 0x10, 0x79, 0x65, 0x96, 0x58, 0x72, 0x79, 0x15, 0x33, 0xA3, 0x7E, 0x7B, 0x73, 0x3A, 0x46, 0x58, 0x49, 0x0D, 0x08, 0xBF, 0xA1, 0xE7, 0x11, 0x89, 0x4F, 0x15, 0xF7, 0x35, 0x59, 0xF7, 0xFF, 0x5B, 0x59, 0x07, 0x21, 0x7D, 0xF5, 0xED, 0x53, 0xCB, 0xAA, 0x2E, 0xAA, 0xA0, 0x37, 0x13, 0x62, 0xBD, 0xA3, 0xF6, 0xD6, 0x64, 0x7C, 0x1B, 0x6E, 0x5D, 0xBC, 0x03, 0x96, 0x8C, 0xC8, 0xC5, 0xD7, 0xEE, 0x36, 0x9A, 0xC5, 0x37, 0x31, 0xDC, 0x2E, 0x9B, 0x0D, 0xEC, 0xBD, 0x74, 0xBF, 0x97, 0x6E, 0xF7, 0x7F, 0x2F, 0xDD, 0xDB, 0xEE, 0xE7, 0x77, 0x2F, 0xD8, 0x2B, 0x8D, 0x06, 0xF9, 0x96, 0x5B, 0xC5, 0x74, 0xAB, 0xAE, 0x36, 0xEE, 0xD1, 0xD6, 0x7D, 0xFB, 0x98, 0x50, 0xDA, 0x13, 0x73, 0x8A, 0xF7, 0xB9, 0xDA, 0xBA, 0x73, 0xE8, 0x4C, 0xA3, 0x2E, 0x0C, 0x4A, 0x3B, 0xF5, 0xCC, 0x8A, 0xB3, 0xE7, 0xB8, 0x69, 0x08, 0x87, 0xF2, 0x4E, 0x86, 0x09, 0x0C, 0xDC, 0x24, 0x41, 0xCA, 0xC6, 0x49, 0x98, 0xF8, 0x84, 0x88, 0xB0, 0x17, 0xA2, 0x29, 0xEC, 0xEF, 0x8B, 0xAE, 0x74, 0x32, 0xE1, 0x0B, 0xD7, 0x13, 0xEE, 0x4C, 0x19, 0x87, 0x6D, 0xBF, 0x1A, 0xB6, 0xFA, 0x96, 0x78, 0x3A, 0x8B, 0x0E, 0xD8, 0x28, 0x7D, 0x5C, 0x2D, 0x16, 0xE5, 0xA3, 0x69, 0x2A, 0x1E, 0x1C, 0x89, 0xD5, 0x78, 0xC1, 0xCF, 0xC6, 0xE1, 0x51, 0x43, 0xA4, 0xE8, 0x4A, 0x75, 0xF5, 0x08, 0x96, 0xB9, 0x57, 0x6C, 0x27, 0xEA, 0x51, 0x79, 0x49, 0x40, 0xDA, 0xBE, 0x0D, 0x09, 0x6D, 0x32, 0x93, 0x44, 0xD9, 0x42, 0xA2, 0xBA, 0x1C, 0x94, 0x41, 0x52, 0x0F, 0xE6, 0x10, 0x34, 0x0B, 0x09, 0xB5, 0xB2, 0x77, 0xC2, 0xA2, 0x6E, 0x61, 0x51, 0x93, 0xEE, 0x97, 0xA9, 0xDA, 0x60, 0x01, 0xD4, 0xB2, 0xAC, 0xC0, 0xD6, 0xC9, 0x81, 0x0D, 0x57, 0xC3, 0xF5, 0x3D, 0x30, 0x01, 0x23, 0x78, 0xA2, 0x42, 0x14, 0x8F, 0x64, 0x9E, 0xD2, 0x54, 0x2F, 0xB3, 0xAB, 0x92, 0xF9, 0x2E, 0x33, 0xBD, 0x2D, 0x98, 0x46, 0x05, 0xC0, 0x3E, 0x62, 0x59, 0x01, 0xAB, 0x4C, 0xD7, 0x25, 0xD7, 0xAD, 0xCB, 0x93, 0xAB, 0x4B, 0x4B, 0xED, 0x0C, 0x99, 0x36, 0x48, 0x68, 0xE5, 0x66, 0x92, 0x50, 0x91, 0x51, 0x3D, 0x8C, 0x87, 0x68, 0x84, 0x17, 0xD5, 0x29, 0x47, 0xCF, 0x42, 0xE3, 0x6D, 0x73, 0x5D, 0x5F, 0xA5, 0xD4, 0xA0, 0x27, 0x43, 0xA1, 0xE6, 0x83, 0xD2, 0x5A, 0xD1, 0xA8, 0xD6, 0xFE, 0x8D, 0xC5, 0x79, 0x73, 0x0D, 0x76, 0xEB, 0xDA, 0x40, 0x63, 0x5D, 0x29, 0x68, 0xEC, 0x1C, 0x37, 0xDC, 0x4A, 0xD9, 0x87, 0x92, 0x19, 0xA2, 0x69, 0xC3, 0x1D, 0xC3, 0x63, 0x3F, 0x1C, 0x46, 0x53, 0xA8, 0x1D, 0x2E, 0xB7, 0xBC, 0x88, 0x4E, 0xE0, 0xDD, 0xD9, 0x50, 0x24, 0xE9, 0x0D, 0x7F, 0x1E, 0x65, 0x99, 0x26, 0x5C, 0xB4, 0x11, 0x0F, 0xD3, 0x80, 0x2B, 0xD1, 0x49, 0xD5, 0x20, 0x22, 0x02, 0x27, 0x0E, 0x25, 0x51, 0xC3, 0x95, 0xCB, 0xCF, 0xD2, 0x40, 0x63, 0xA5, 0x21, 0x8A, 0x5B, 0xB1, 0x04, 0x82, 0x70, 0x61, 0xC9, 0xD5, 0x41, 0x56, 0x2E, 0x1A, 0x39, 0x48, 0xBA, 0x99, 0x64, 0x3C, 0x1E, 0xE3, 0xA1, 0xD0, 0xD3, 0xAE, 0x8D, 0xC8, 0x48, 0xA7, 0xA7, 0xA0, 0xF0, 0xA9, 0x56, 0x58, 0xAF, 0x2A, 0xF3, 0xF3, 0x83, 0xA5, 0x25, 0x9B, 0x41, 0xBA, 0x7B, 0xE1, 0xE8, 0xD8, 0x19, 0xD0, 0x59, 0x72, 0x0B, 0x41, 0x89, 0xF9, 0xD5, 0xA2, 0x0C, 0xE0, 0x88, 0x70, 0x78, 0xFB, 0x53, 0x4C, 0xA3, 0x39, 0x22, 0xF0, 0x3A, 0x33, 0x13, 0xB2, 0x55, 0xFD, 0xAD, 0x35, 0xA6, 0x85, 0xEC, 0xEA, 0xEF, 0x13, 0x55, 0x0D, 0xA5, 0xE3, 0x88, 0x4E, 0x43, 0xB4, 0xE8, 0x28, 0xBA, 0x98, 0xA7, 0x70, 0x25, 0xE5, 0x19, 0x1D, 0x75, 0x96, 0xC5, 0x40, 0x3B, 0x5B, 0xAC, 0x19, 0x02, 0xAA, 0x85, 0x64, 0xD1, 0x08, 0x07, 0x13, 0xD9, 0x60, 0xF5, 0xA0, 0x1A, 0xDD, 0x34, 0xEB, 0x1A, 0x29, 0x87, 0xAD, 0x5D, 0xF7, 0x74, 0x23, 0x19, 0x39, 0x4D, 0x34, 0x57, 0x3D, 0xD3, 0x50, 0x15, 0xD9, 0x35, 0xED, 0x2A, 0x66, 0xCC, 0xB0, 0x6C, 0x03, 0x6B, 0xB1, 0x3C, 0x5F, 0x93, 0xD7, 0x58, 0x2D, 0x43, 0x0C, 0x9A, 0xA6, 0x77, 0xF8, 0x54, 0xBA, 0xD7, 0x25, 0xB7, 0xBE, 0xD4, 0xBA, 0xB5, 0x7D, 0x42, 0xD6, 0x25, 0x20, 0xE0, 0x59, 0xFC, 0x2C, 0x5D, 0xF7, 0x0C, 0x0D, 0x41, 0xA3, 0xB6, 0x9A, 0xCC, 0xA0, 0x26, 0x19, 0x6F, 0xCA, 0xB0, 0xD4, 0xEC, 0xC5, 0xA8, 0xD9, 0x3B, 0x96, 0x0B, 0x3C, 0x85, 0xDA, 0x59, 0x9A, 0x84, 0xA6, 0xFA, 0x95, 0xA5, 0xDB, 0xB5, 0xB8, 0x65, 0x3D, 0xC2, 0x3A, 0x1D, 0x0C, 0x9E, 0xAB, 0xF3, 0x83, 0xDD, 0x7A, 0xD5, 0xC2, 0xD0, 0x78, 0xB9, 0xAF, 0x54, 0x91, 0x56, 0xDF, 0x3D, 0xF4, 0x4F, 0x13, 0x6C, 0x70, 0x0F, 0xC4, 0xA3, 0x0D, 0x2F, 0x81, 0x67, 0x54, 0x70, 0x95, 0x4A, 0xF8, 0xF0, 0x90, 0x20, 0xD8, 0x10, 0xF5, 0xD4, 0x9E, 0x24, 0x95, 0x0D, 0xB8, 0x45, 0xEE, 0x8B, 0xC5, 0xAD, 0x01, 0x47, 0xCE, 0x2C, 0x21, 0x0D, 0xF7, 0x41, 0xC1, 0x6F, 0x7A, 0x41, 0xC9, 0x0F, 0x72, 0x85, 0x9A, 0xDF, 0xC9, 0x79, 0x65, 0xAF, 0x90, 0xAB, 0xF9, 0xCD, 0x72, 0xAE, 0xE9, 0xFB, 0xE5, 0x62, 0xC7, 0x2F, 0x16, 0xDA, 0xAD, 0xD2, 0x43, 0x68, 0x2C, 0x22, 0x8C, 0x8A, 0x7E, 0xFA, 0xCD, 0xA5, 0x0B, 0xAF, 0xA2, 0xE8, 0x7C, 0xF1, 0xE5, 0x45, 0x8D, 0x6F, 0x7C, 0x7D, 0x89, 0x96, 0x6F, 0xDB, 0x2E, 0x0D, 0x59, 0x94, 0x67, 0xEA, 0xEB, 0x4A, 0x5E, 0x11, 0x57, 0x5F, 0x5F, 0x8A, 0xA5, 0xED, 0x5F, 0x5F, 0x1C, 0x02, 0xA2, 0xF3, 0xA0, 0x52, 0xEA, 0xD6, 0xCB, 0xF5, 0x56, 0x25, 0x57, 0x2F, 0x37, 0xBB, 0x39, 0xAF, 0xDD, 0xAA, 0xE5, 0xEA, 0x41, 0xA5, 0x95, 0x6B, 0x57, 0x82, 0x6A, 0xBB, 0xDB, 0x0E, 0xFC, 0x5A, 0xBD, 0xFB, 0xD0, 0x75, 0x8E, 0x14, 0xD8, 0x6B, 0x96, 0x03, 0xAF, 0xD2, 0xA9, 0xE5, 0x2A, 0xC5, 0x20, 0xC8, 0x79, 0x95, 0x82, 0xA4, 0x5F, 0xAB, 0xE7, 0xAA, 0x5E, 0xA9, 0xD4, 0xF4, 0xAA, 0xCD, 0x5A, 0xC7, 0x6B, 0x3E, 0x5C, 0x6C, 0x63, 0x60, 0xE5, 0xA9, 0x7C, 0x2C, 0x62, 0x01, 0xE1, 0x55, 0xBC, 0x76, 0xFF, 0x01, 0x00, 0x00, 0xFF, 0xFF, 0x03, 0x00, 0x50, 0x4B, 0x03, 0x04, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0x0D, 0xD1, 0x90, 0x9F, 0xB6, 0x00, 0x00, 0x00, 0x1B, 0x01, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x5F, 0x72, 0x65, 0x6C, 0x73, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x4D, 0x61, 0x6E, 0x61, 0x67, 0x65, 0x72, 0x2E, 0x78, 0x6D, 0x6C, 0x2E, 0x72, 0x65, 0x6C, 0x73, 0x84, 0x8F, 0x4D, 0x0A, 0xC2, 0x30, 0x14, 0x84, 0xF7, 0x82, 0x77, 0x08, 0x6F, 0x6F, 0xD3, 0xBA, 0x10, 0x91, 0x26, 0xDD, 0x88, 0xD0, 0xAD, 0xD4, 0x03, 0x84, 0xE4, 0x35, 0x0D, 0x36, 0x3F, 0x24, 0x51, 0xEC, 0xED, 0x0D, 0xAE, 0x2C, 0x08, 0x2E, 0x87, 0x61, 0xBE, 0x99, 0x69, 0xBB, 0x97, 0x9D, 0xC9, 0x13, 0x63, 0x32, 0xDE, 0x31, 0x68, 0xAA, 0x1A, 0x08, 0x3A, 0xE9, 0x95, 0x71, 0x9A, 0xC1, 0x6D, 0xB8, 0xEC, 0x8E, 0x40, 0x52, 0x16, 0x4E, 0x89, 0xD9, 0x3B, 0x64, 0xB0, 0x60, 0x82, 0x8E, 0x6F, 0x37, 0xED, 0x15, 0x67, 0x91, 0x4B, 0x28, 0x4D, 0x26, 0x24, 0x52, 0x28, 0x2E, 0x31, 0x98, 0x72, 0x0E, 0x27, 0x4A, 0x93, 0x9C, 0xD0, 0x8A, 0x54, 0xF9, 0x80, 0xAE, 0x38, 0xA3, 0x8F, 0x56, 0xE4, 0x22, 0xA3, 0xA6, 0x41, 0xC8, 0xBB, 0xD0, 0x48, 0xF7, 0x75, 0x7D, 0xA0, 0xF1, 0x9B, 0x01, 0x7C, 0xC5, 0x24, 0xBD, 0x62, 0x10, 0x7B, 0xD5, 0x00, 0x19, 0x96, 0x50, 0x9A, 0xFF, 0xB3, 0xFD, 0x38, 0x1A, 0x89, 0x67, 0x2F, 0x1F, 0x16, 0x5D, 0xFE, 0x51, 0x41, 0x73, 0xD9, 0x85, 0x05, 0x28, 0xA2, 0xC6, 0xCC, 0xE0, 0x23, 0x9B, 0xAA, 0x4C, 0x04, 0xCA, 0x5B, 0xBA, 0xBA, 0xC4, 0xDF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x03, 0x00, 0x50, 0x4B, 0x01, 0x02, 0x2D, 0x00, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0xE9, 0xDE, 0x0F, 0xBF, 0xFF, 0x00, 0x00, 0x00, 0x1C, 0x02, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5B, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x5F, 0x54, 0x79, 0x70, 0x65, 0x73, 0x5D, 0x2E, 0x78, 0x6D, 0x6C, 0x50, 0x4B, 0x01, 0x02, 0x2D, 0x00, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0xA5, 0xD6, 0xA7, 0xE7, 0xC0, 0x00, 0x00, 0x00, 0x36, 0x01, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x01, 0x00, 0x00, 0x5F, 0x72, 0x65, 0x6C, 0x73, 0x2F, 0x2E, 0x72, 0x65, 0x6C, 0x73, 0x50, 0x4B, 0x01, 0x02, 0x2D, 0x00, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0x6B, 0x79, 0x96, 0x16, 0x83, 0x00, 0x00, 0x00, 0x8A, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x02, 0x00, 0x00, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x4D, 0x61, 0x6E, 0x61, 0x67, 0x65, 0x72, 0x2E, 0x78, 0x6D, 0x6C, 0x50, 0x4B, 0x01, 0x02, 0x2D, 0x00, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0xAA, 0x52, 0x25, 0xDF, 0xC6, 0x06, 0x00, 0x00, 0x8B, 0x1A, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD6, 0x02, 0x00, 0x00, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x31, 0x2E, 0x78, 0x6D, 0x6C, 0x50, 0x4B, 0x01, 0x02, 0x2D, 0x00, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0x0D, 0xD1, 0x90, 0x9F, 0xB6, 0x00, 0x00, 0x00, 0x1B, 0x01, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD0, 0x09, 0x00, 0x00, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x2F, 0x5F, 0x72, 0x65, 0x6C, 0x73, 0x2F, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x4D, 0x61, 0x6E, 0x61, 0x67, 0x65, 0x72, 0x2E, 0x78, 0x6D, 0x6C, 0x2E, 0x72, 0x65, 0x6C, 0x73, 0x50, 0x4B, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x5D, 0x01, 0x00, 0x00, 0xCB, 0x0A, 0x00, 0x00, 0x00, 0x00], [UInt8]((msg.getProperty(set: .common, lid: 0x000085C2) as Data?)!))
        XCTAssertEqual(0x01, msg.conversationIndex!.header.reserved)
        XCTAssertEqual(0xD1, msg.conversationIndex!.header.currentFileTime.0)
        XCTAssertEqual(0x6E, msg.conversationIndex!.header.currentFileTime.1)
        XCTAssertEqual(0x4A, msg.conversationIndex!.header.currentFileTime.2)
        XCTAssertEqual(0x85, msg.conversationIndex!.header.currentFileTime.3)
        XCTAssertEqual(0x6E, msg.conversationIndex!.header.currentFileTime.4)
        XCTAssertEqual(UUID(uuidString: "55272F7F-9CA0-4AE3-8A0F-F778094D6DB8"), msg.conversationIndex!.header.guid)
        XCTAssertEqual(0, msg.conversationIndex!.responseLevels.count)
        XCTAssertEqual(.normal, msg.importance!)
        XCTAssertEqual([0xA9, 0xED, 0x18, 0x77, 0x63, 0x5C, 0x5F, 0x4E, 0x82, 0xBD, 0xFF, 0x1F, 0x38, 0x84, 0x76, 0xDA], [UInt8](msg.searchKey!))

        XCTAssertEqual(1, msg.recipients.count)
        XCTAssertFalse(msg.recipients[0].sendRichInfo!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x54, 0x49, 0x4D, 0x45, 0x32, 0x54, 0x41, 0x4C, 0x4B, 0x40, 0x4F, 0x4E, 0x4C, 0x49, 0x4E, 0x45, 0x2D, 0x43, 0x4F, 0x4E, 0x56, 0x45, 0x52, 0x54, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.recipients[0].searchKey!))
        XCTAssertEqual(.mailUser, msg.recipients[0].objectType!)
        XCTAssertEqual(0x00000000, (msg.recipients[0].entryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.recipients[0].entryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.recipients[0].entryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.recipients[0].entryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("time2talk@online-convert.com", (msg.recipients[0].entryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.recipients[0].entryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("time2talk@online-convert.com", (msg.recipients[0].entryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual("time2talk@online-convert.com", msg.recipients[0].displayName!)
        XCTAssertEqual(.mailUser, msg.recipients[0].displayType!)
        XCTAssertEqual(.primaryRecipient, msg.recipients[0].recipientType!)
        XCTAssertEqual(0, msg.recipients[0].sendInternetEncoding!)
        XCTAssertEqual(0, msg.recipients[0].recipientOrder!)
        XCTAssertEqual(0x00000000, (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("time2talk@online-convert.com", (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("time2talk@online-convert.com", (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual("time2talk@online-convert.com", msg.recipients[0].recipientDisplayName!)
        XCTAssertEqual("time2talk@online-convert.com", msg.recipients[0].emailAddress!)
        XCTAssertEqual([0x00, 0x00, 0x00, 0x6F], [UInt8](msg.recipients[0].instanceKey!))
        XCTAssertEqual(0, (msg.recipients[0].getProperty(id: .tagRecipientResourceState) as UInt32?)!)
        XCTAssertEqual("SMTP", msg.recipients[0].addressType!)
        XCTAssertEqual(.sendable, msg.recipients[0].recipientFlags!)
        XCTAssertEqual(0, msg.recipients[0].rowid!)
        XCTAssertEqual(.none, msg.recipients[0].recipientTrackStatus!)
        XCTAssertEqual([0x00, 0x00, 0x00, 0x00, 0x81, 0x2B, 0x1F, 0xA4, 0xBE, 0xA3, 0x10, 0x19, 0x9D, 0x6E, 0x00, 0xDD, 0x01, 0x0F, 0x54, 0x02, 0x00, 0x00, 0x01, 0x90, 0x74, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x32, 0x00, 0x74, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x6B, 0x00, 0x40, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x2D, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x74, 0x00, 0x2E, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x00, 0x00, 0x53, 0x00, 0x4D, 0x00, 0x54, 0x00, 0x50, 0x00, 0x00, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x32, 0x00, 0x74, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x6B, 0x00, 0x40, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x2D, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x74, 0x00, 0x2E, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x00, 0x00], [UInt8](msg.recipients[0].recordKey!))

        XCTAssertEqual(0, msg.attachments.count)
    }

    func testReadSicos19771() throws {
        let data = try getData(name: "Sicos1977/MSGReader/EmailWith2Attachments")
        let msg = try MsgFile(data: data)
        
        XCTAssertEqual(9, (msg.getProperty(id: .unknown0x3666) as UInt32?)!)
        XCTAssertEqual(127, (msg.getProperty(set: .common, lid: 0x000085EB) as UInt32?)!)
        XCTAssertTrue(msg.messageRecipientMe!)
        XCTAssertEqual("", (msg.getProperty(set: .common, name: "TeeNextScenario") as String?)!)
        XCTAssertEqual([0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x15, 0x00, 0x00, 0x00, 0x17, 0x1C, 0x99, 0x9E, 0x5A, 0x5C, 0x16, 0x4B, 0x86, 0x2E, 0x76, 0xB5, 0xED, 0x3D, 0xC0, 0x00], [UInt8]((msg.getProperty(id: .PR_SENT_REPRESENTING_SID) as Data?)!))
        XCTAssertEqual([0x00, 0x0A, 0x08, 0x03, 0x07, 0x0B, 0x13, 0x23, 0x4B, 0x51, 0x57, 0x12, 0x1B, 0x05, 0x09, 0x0D, 0x15, 0x17, 0x19, 0x1B, 0x1D, 0x1F, 0x21, 0x2B, 0x31, 0x33, 0x35, 0x37, 0x39, 0x3B, 0x3D, 0x47, 0x49, 0x4D, 0x4F, 0x53, 0x55, 0x59, 0x5D, 0x6D, 0x1A, 0x06, 0x01, 0x11, 0x27, 0x2D, 0x3F, 0x65, 0x22, 0x18, 0x00, 0x00, 0xC8, 0x42, 0x5C, 0x8F, 0x42, 0x3E, 0x00, 0x00, 0x80, 0x3F, 0x5C, 0x8F, 0x42, 0x3E, 0x71, 0x3D, 0x4A, 0x3F, 0xEF, 0x75, 0xAC, 0x3D, 0x2A, 0x06, 0x0F, 0x25, 0x29, 0x41, 0x43, 0x45, 0x32, 0x02, 0x2F, 0x5B, 0x3A, 0x03, 0x06, 0xB0, 0x05], [UInt8]((msg.getProperty(id: .unknown0x3677) as Data?)!))
        XCTAssertEqual([], msg.sideEffects)
        XCTAssertEqual("EX", (msg.getProperty(id: .tagCreatorAddressType) as String?)!)
        XCTAssertEqual(.readOnly, msg.accessLevel!)
        XCTAssertEqual("", msg.displayBcc!)
        XCTAssertEqual("/O=EXCHANGELABS/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=FD82E4A2A0A8484D89F5A3FCB20D87D2-KEES VAN SP", msg.sentRepresentingEmailAddress!)
        XCTAssertFalse((msg.getProperty(guid: UUID(uuidString: "0B63E350-9CCC-11D0-BCDB-00805FCCCE04")!, name: "IsPartiallyIndexed") as Bool?)!)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x4C, 0x41, 0x42, 0x53, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x46, 0x44, 0x38, 0x32, 0x45, 0x34, 0x41, 0x32, 0x41, 0x30, 0x41, 0x38, 0x34, 0x38, 0x34, 0x44, 0x38, 0x39, 0x46, 0x35, 0x41, 0x33, 0x46, 0x43, 0x42, 0x32, 0x30, 0x44, 0x38, 0x37, 0x44, 0x32, 0x2D, 0x4B, 0x45, 0x45, 0x53, 0x20, 0x56, 0x41, 0x4E, 0x20, 0x53, 0x50, 0x00], [UInt8](msg.senderSearchKey!))
        XCTAssertNotNil(msg.transportMessageHeaders)
        XCTAssertEqual("EX", msg.receivedByAddressType!)
        XCTAssertEqual(UUID(uuidString: "1859B757-721E-4FA4-8490-D7B6A21E37B9"), (msg.getProperty(guid: UUID(uuidString: "0B63E350-9CCC-11D0-BCDB-00805FCCCE04")!, name: "BigFunnelCorrelationId") as UUID?)!)
        XCTAssertEqual(2047, (msg.getProperty(id: .unknown0x3663) as UInt32?)!)
        XCTAssertEqual(0, (msg.getProperty(set: .xmlExtractedEntities, name: "ConversationContributions") as UInt32?)!)
        XCTAssertEqual("2603:10a6:20b:114::8", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-organization-originalserveripaddress") as String?)!)
        XCTAssertEqual("Spelde van, CMMA (Kees)", (msg.getProperty(id: .tagCreatorSimpleDisplayName) as String?)!)
        XCTAssertFalse(msg.useTnef!)
        XCTAssertEqual(UUID(uuidString: "C708CED8-AC98-4383-8743-1BB5B4675E81"), (msg.getProperty(set: .xmlExtractedEntities, name: "InferenceMessageIdentifier") as UUID?)!)
        XCTAssertEqual(60171, (msg.getProperty(id: .unknown0x0E2F) as UInt32?)!)
        XCTAssertEqual("kees.van.spelde@achmea.nl", msg.receivedBySmtpAddress!)
        XCTAssertEqual([0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x15, 0x00, 0x00, 0x00, 0x17, 0x1C, 0x99, 0x9E, 0x5A, 0x5C, 0x16, 0x4B, 0x86, 0x2E, 0x76, 0xB5, 0xED, 0x3D, 0xC0, 0x00], [UInt8]((msg.getProperty(id: .PR_CREATOR_SID) as Data?)!))
        XCTAssertTrue(msg.rtfInSync!)
        XCTAssertEqual("AA303388", (msg.getProperty(id: .unknown0x4034) as String?)!)
        XCTAssertEqual(0x00000000, (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGELABS/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=FD82E4A2A0A8484D89F5A3FCB20D87D2-KEES VAN SP\u{00}", (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual("20191119.25", (msg.getProperty(set: .common, name: "TeeVersion") as String?)!)
        XCTAssertEqual("/O=EXCHANGELABS/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=FD82E4A2A0A8484D89F5A3FCB20D87D2-KEES VAN SP", msg.receivedRepresentingEmailAddress!)
        XCTAssertEqual("EX", (msg.getProperty(id: .tagSenderAddressType) as String?)!)
        XCTAssertEqual(0x01, msg.conversationIndex!.header.reserved)
        XCTAssertEqual(0xD5, msg.conversationIndex!.header.currentFileTime.0)
        XCTAssertEqual(0xA8, msg.conversationIndex!.header.currentFileTime.1)
        XCTAssertEqual(0xEC, msg.conversationIndex!.header.currentFileTime.2)
        XCTAssertEqual(0xAD, msg.conversationIndex!.header.currentFileTime.3)
        XCTAssertEqual(0xB5, msg.conversationIndex!.header.currentFileTime.4)
        XCTAssertEqual(UUID(uuidString: "B02CC035-250F-4D66-9B17-2E241565867B"), msg.conversationIndex!.header.guid)
        XCTAssertEqual(0, msg.conversationIndex!.responseLevels.count)
        XCTAssertFalse((msg.getProperty(set: .messaging, name: "IsReadReceipt") as Bool?)!)
        XCTAssertEqual("kees.van.spelde@achmea.nl", msg.sentRepresentingSmtpAddress!)
        XCTAssertEqual(1, (msg.getProperty(set: .common, name: "CurrentMessageSafetyFlags") as UInt32?)!)
        XCTAssertEqual("", msg.addressBookExtensionAttribute3!)
        XCTAssertEqual("Spelde van, CMMA (Kees)", msg.sentRepresentingName!)
        XCTAssertEqual(1575276261.0, (msg.getProperty(id: .unknown0x0F02) as Date?)!.timeIntervalSince1970)
        XCTAssertEqual("<AM7P189MB07920EE2DBDD12A2C694C81CBF430@AM7P189MB0792.EURP189.PROD.OUTLOOK.COM>", (msg.getProperty(id: .tagInternetMessageId) as String?)!)
        XCTAssertFalse(msg.`private`!)
        XCTAssertEqual(.notAssigned, msg.taskMode!)
        XCTAssertEqual(["ExtractLanguage", "KeyPhraseExtraction", "ExtractLanguage1.0", "KeyPhraseExtraction2.0"], (msg.getProperty(set: .common, name: "EntityNamesDelayed") as [String]?)!)
        XCTAssertEqual(67108864, (msg.getProperty(set: .xmlExtractedEntities, name: "InferenceClassificationResult") as UInt32?)!)
        XCTAssertEqual("kees.van.spelde@achmea.nl", msg.receivedRepresentingSmtpAddress!)
        XCTAssertEqual(.normal, msg.importance!)
        XCTAssertTrue(msg.messageToMe!)
        XCTAssertEqual(1043, msg.messageLocaleId!)
        XCTAssertFalse(msg.agingDontAgeMe!)
        XCTAssertEqual("[\r\n  {\r\n    \"@outputVersion\": \"1.0\",\r\n    \"@IRankerModelVersion\": \"ModelV4\",\r\n    \"@emailRelevanceScore\": \"0.9989581979273\",\r\n    \"IsImportantByIRanker\": \"True\",\r\n    \"FromIsTopCollab\": \"0.0\",\r\n    \"@EntityId\": \"59fbd420-c2fc-428c-b887-37acced70b9d\",\r\n    \"@correlationTrail\": \"AssetId=3ce91b7f-48e6-4613-a106-aee4a5cbdc04;ExtractionId=2981a80b-75fe-49b9-a049-d93cd4fade4c;EntityId=59fbd420-c2fc-428c-b887-37acced70b9d\",\r\n    \"@extractionTimeUtc\": \"2019-12-02T08:44:21.3099422Z\"\r\n  }\r\n]", (msg.getProperty(set: .common, name: "EntityExtraction/IRankerScoreDev1.0") as String?)!)
        XCTAssertEqual("[{\r\n  \"@context\": \"http://schema.org\",\r\n  \"type\": \"ExtractLanguage\",\r\n  \"entities\": [\r\n  {\r\n    \"@type\": \"ExtractLanguage\",\r\n    \"@context\": \"http://schema.microsoft.com\",\r\n    \"@outputVersion\": \"1.0\",\r\n    \"Language\": {\r\n      \"@type\": \"Language\",\r\n      \"Locale\": \"nl-NL\",\r\n      \"name\": \"Dutch (Netherlands)\",\r\n      \"BestGuessLanguage\": \"nl\"\r\n    },\r\n    \"@source\": \"Exchange\",\r\n    \"LanguageScores\": {\r\n      \"Dutch\": 86.6666641\r\n    },\r\n    \"@EntityId\": \"5530c71b-2dd1-4caa-9f93-eaf3b0243d02\",\r\n    \"@correlationTrail\": \"AssetId=55ce16d4-da3c-4f77-8e53-6702e00fb282;ExtractionId=2d05f7f6-67ac-43b3-8fe7-ef55e2730956;EntityId=5530c71b-2dd1-4caa-9f93-eaf3b0243d02\",\r\n    \"@extractionTimeUtc\": \"2019-12-02T08:44:22.1711511Z\"\r\n  }\r\n]\r\n}]", (msg.getProperty(set: .common, name: "EntityDocumentDelayed") as String?)!)
        XCTAssertEqual("[\r\n  {\r\n    \"@type\": \"ExtractLanguage\",\r\n    \"@context\": \"http://schema.microsoft.com\",\r\n    \"@outputVersion\": \"1.0\",\r\n    \"Language\": {\r\n      \"@type\": \"Language\",\r\n      \"Locale\": \"nl-NL\",\r\n      \"name\": \"Dutch (Netherlands)\",\r\n      \"BestGuessLanguage\": \"nl\"\r\n    },\r\n    \"@source\": \"Exchange\",\r\n    \"LanguageScores\": {\r\n      \"Dutch\": 86.6666641\r\n    },\r\n    \"@EntityId\": \"5530c71b-2dd1-4caa-9f93-eaf3b0243d02\",\r\n    \"@correlationTrail\": \"AssetId=55ce16d4-da3c-4f77-8e53-6702e00fb282;ExtractionId=2d05f7f6-67ac-43b3-8fe7-ef55e2730956;EntityId=5530c71b-2dd1-4caa-9f93-eaf3b0243d02\",\r\n    \"@extractionTimeUtc\": \"2019-12-02T08:44:22.1711511Z\"\r\n  }\r\n]", (msg.getProperty(set: .common, name: "EntityExtraction/ExtractLanguage1.0") as String?)!)
        XCTAssertEqual("AM7P189MB0792.EURP189.PROD.OUTLOOK.COM", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-organization-authsource") as String?)!)
        XCTAssertFalse((msg.getProperty(set: .xmlExtractedEntities, name: "ConversationWasFocused") as Bool?)!)
        XCTAssertEqual(1575276261.0, msg.messageDeliveryTime!.timeIntervalSince1970)
        XCTAssertEqual([0x30, 0x00, 0x00, 0x00, 0x7C, 0x2C, 0x9D, 0x8E, 0xC5, 0x4E, 0x2B, 0x9E], [UInt8]((msg.getProperty(id: .unknown0x3014) as Data?)!))
        XCTAssertEqual(0, (msg.getProperty(id: .unknown0x365A) as UInt32?)!)
        XCTAssertEqual(60172, (msg.getProperty(id: .tagInternetArticleNumber) as UInt32?)!)
        XCTAssertFalse((msg.getProperty(set: .messaging, name: "HasQuotedText") as Bool?)!)
        XCTAssertEqual(1, msg.predecessorChangeList!.values.count)
        XCTAssertEqual(UUID(uuidString: "CE58E2F6-3358-4A47-A8B6-78DBA6482C22"), msg.predecessorChangeList!.values[0].namespaceGuid)
        XCTAssertEqual([0x00, 0x01, 0x0B, 0xDA, 0x59, 0x51], msg.predecessorChangeList!.values[0].localId)
        XCTAssertEqual("{\"diagnosticsCodes\":[\"DomainNotAllowed\"]}", (msg.getProperty(set: .common, name: "MessageCardExtractionDiagnosticContext") as String?)!)
        XCTAssertEqual("[\r\n  {\r\n    \"@outputVersion\": \"1.0\",\r\n    \"@source\": \"im-3\",\r\n    \"@emailRelevanceScore\": \"0.9989581979273\",\r\n    \"IsImportantByIRanker\": \"true\",\r\n    \"@EntityId\": \"87bf7fb8-2bad-4906-ab6d-404999713cc7\"\r\n  }\r\n]", (msg.getProperty(set: .common, name: "EntityExtraction/IRankerScore1.0") as String?)!)
        XCTAssertEqual("[\"ExtractionId\",\"2d05f7f6-67ac-43b3-8fe7-ef55e2730956\",\"TeeEngineVersion\",\"52.0.0\",\"BuildNumber\",\"20191119.25\",\"ChangesetNumber\",\"1cd8419a472d7dad6cfa0cfb669b90e1cacdcd19\",\"Locale\",\"nl-NL\",\"MessageId\",\"\\u003cAM7P189MB07920EE2DBDD12A2C694C81CBF430@AM7P189MB0792.EURP189.PROD.OUTLOOK.COM\\u003e\",\"ReferenceTime\",\"2019-12-02T08:44:21.0000000Z\",\"Flights\",\"TEEReplyWithShipWW;TEEM2HPayloadEnabledFlight;TEEAddBestGuessLanguageFlight;CheckJunkMailHeadersFlight;TEEImportantMail;TEEImportantContact;TEECompliantInferencesShortcut;TEEInferencesForSubscription;TEEEnableInferenceWithUserEdits;TEEInboxPlusFlight;TEEEnableTermFrequency;TEEEnableExperimentalTermFrequency;TEEEvents_agavehp;TEEEvents_agave;TEEEventsOffboxABFlight;TEEFirstBodyFlight;TEEReplyWithCoverageFilterFlight;TEECouponRankerFlight;TEEOffBoxNewVirtualService;KtgClassifierSentItemsFlight;QasTestKPEOffBoxB2;QasAcronymExtractorOffBoxB2;TEEExtractedOnlineMeetingInfoFlight\",\"StartTime\",\"2019-12-02T08:44:22.1641814Z\",\"EndTime\",\"2019-12-02T08:44:22.1711511Z\"]", (msg.getProperty(set: .common, name: "EntityExtractionServiceDiagnosticContextDelayed") as String?)!)
        XCTAssertEqual("", msg.displayCc!)
        XCTAssertEqual([0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x15, 0x00, 0x00, 0x00, 0x17, 0x1C, 0x99, 0x9E, 0x5A, 0x5C, 0x16, 0x4B, 0x86, 0x2E, 0x76, 0xB5, 0xED, 0x3D, 0xC0, 0x00], [UInt8]((msg.getProperty(id: .PR_SENDER_SID) as Data?)!))
        XCTAssertFalse(msg.readReceiptRequested!)
        XCTAssertEqual([0xAF, 0x4A, 0xF4, 0x8C, 0x4D, 0x94, 0x0F, 0x4D, 0xB8, 0x81, 0x21, 0x75, 0xA1, 0xD5, 0x91, 0x39], [UInt8]((msg.getProperty(set: .common, name: "InTransitMessageCorrelator") as Data?)!))
        XCTAssertEqual("E-mail with 2 attachments", msg.subject!)
        XCTAssertFalse((msg.getProperty(set: .messaging, name: "IsSigned") as Bool?)!)
        XCTAssertEqual("EX", (msg.getProperty(id: .unknown0x4024) as String?)!)
        XCTAssertTrue((msg.getProperty(set: .common, name: "EntityExtractionSuccess") as Bool?)!)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x4C, 0x41, 0x42, 0x53, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x46, 0x44, 0x38, 0x32, 0x45, 0x34, 0x41, 0x32, 0x41, 0x30, 0x41, 0x38, 0x34, 0x38, 0x34, 0x44, 0x38, 0x39, 0x46, 0x35, 0x41, 0x33, 0x46, 0x43, 0x42, 0x32, 0x30, 0x44, 0x38, 0x37, 0x44, 0x32, 0x2D, 0x4B, 0x45, 0x45, 0x53, 0x20, 0x56, 0x41, 0x4E, 0x20, 0x53, 0x50, 0x00], [UInt8](msg.receivedBySearchKey!))
        XCTAssertEqual("/O=EXCHANGELABS/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=FD82E4A2A0A8484D89F5A3FCB20D87D2-KEES VAN SP", (msg.getProperty(id: .unknown0x4025) as String?)!)
        XCTAssertEqual("EX", msg.sentRepresentingAddressType!)
        XCTAssertEqual("E-mail with 2 attachments", msg.normalizedSubject!)
        XCTAssertEqual(["IRankerScore", "IRankerScoreDev", "ExtractLanguage", "IRankerScore1.0", "IRankerScoreDev1.0", "ExtractLanguage1.0"], (msg.getProperty(set: .common, name: "EntityNames") as [String]?)!)
        XCTAssertEqual(1575276280.0, msg.creationTime!.timeIntervalSince1970)
        XCTAssertEqual([0x01, 0x00, 0x00, 0x00, 0x01, 0x13, 0xF5, 0x88, 0x99], [UInt8]((msg.getProperty(id: .unknown0x120B) as Data?)!))
        XCTAssertEqual("AA303388", (msg.getProperty(id: .unknown0x4035) as String?)!)
        XCTAssertEqual([0xC4, 0x1C, 0x83, 0xD0, 0x33, 0x2C, 0x80, 0x4D, 0x9C, 0x79, 0x06, 0xF6, 0xAA, 0xC2, 0x84, 0x26], [UInt8]((msg.getProperty(id: .unknown0x0E4C) as Data?)!))
        XCTAssertEqual("[145.219.16.11]", (msg.getProperty(set: .internetHeaders, name: "x-originating-ip") as String?)!)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x4C, 0x41, 0x42, 0x53, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x46, 0x44, 0x38, 0x32, 0x45, 0x34, 0x41, 0x32, 0x41, 0x30, 0x41, 0x38, 0x34, 0x38, 0x34, 0x44, 0x38, 0x39, 0x46, 0x35, 0x41, 0x33, 0x46, 0x43, 0x42, 0x32, 0x30, 0x44, 0x38, 0x37, 0x44, 0x32, 0x2D, 0x4B, 0x45, 0x45, 0x53, 0x20, 0x56, 0x41, 0x4E, 0x20, 0x53, 0x50, 0x00], [UInt8](msg.sentRepresentingSearchKey!))
        XCTAssertTrue(msg.alternateRecipientAllowed!)
        XCTAssertEqual(0, (msg.getProperty(id: .PR_MODIFIER_FLAG) as UInt32?)!)
        XCTAssertEqual("E-mail with 2 attachments", msg.conversationTopic!)
        XCTAssertEqual(1575276261.0, (msg.getProperty(id: .unknown0x0F0A) as Date?)!.timeIntervalSince1970)
        XCTAssertEqual("kees.van.spelde@achmea.nl", (msg.getProperty(id: .tagSenderSmtpAddress) as String?)!)
        XCTAssertEqual(0x00000000, (msg.receivedByEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.receivedByEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.receivedByEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.receivedByEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGELABS/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=FD82E4A2A0A8484D89F5A3FCB20D87D2-KEES VAN SP\u{00}", (msg.receivedByEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual("R9RYzlXmySXHjiSrtpxS/6LK+Aws2uL7Q1ThyCQItAWMtSY0eww18tAs+fFdNtCBfDb1MR+rUchKpNLeoiXrJ9FQdKRXf/yPp+7JijLOTfxNmbLGPkcZ2fSXTzdWhnFUL9m/AzHeEcoutcU55pppYZt1eL5+Z9aHa8KZP1jYKayiBfYuTz/WlNmvSZ+g+W+5pY50gKSq8Vw1zMxOGQmy/IFd1xE7vey6VtQUGmKPI36PLozB9UZ+adjunUxnFPtyq8dYh/QBjxonCDC/oYX/0UQLVknTj4pNIsOu/YzHjyBSNQYqH+74KcPK7UfVSUrqU3uo0pP3lDcfkr9dcpTBb+K3ksvIvmea++8/XRg8vcMWlOmcRSUGMEBTEF09b5siLQ2brn3m7gkT8HkKkh5pNpviHrGiiHbg+mDa4lxAlmdTvS67HcTKXALosyW+TZmEzKjVOorEcoyDNVtVNKb3dfMX7TG65AGskqqX+psXBuQzQnGfL7zJIpYCVdNqxCKD", (msg.getProperty(set: .common, name: "X-Microsoft-Antispam-Message-Info") as String?)!)
        XCTAssertEqual(" \r\n\r\n \r\n\r\nMet vriendelijke groet,\r\n\r\n \r\n\r\nAchmea | IT | DC Generiek | DCG Build Archiefdiensten\r\n\r\n \r\n\r\nKees van Spelde\r\n\r\nSoftware engineer / Specialist ECM / Security Coördinator OpenText\r\n\r\n \r\n\r\nSpoorlaan 298 | 5017 JZ Tilburg\r\n\r\nGSM: +31 - (0)6 - 10547615\r\n\r\nE-mail : kees.van.spelde@achmea.nl <mailto:kees.van.spelde@achmea.nl> \r\n\r\n \r\n\r\nP Denk aan het milieu en print dit bericht alleen als het noodzakelijk is\r\n\r\n \r\n\r\n", msg.body!)
        XCTAssertTrue(msg.conversationIndexTracking!)
        XCTAssertTrue(msg.sendRichInfo!)
        XCTAssertEqual("145.219.16.11", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-organization-originalclientipaddress") as String?)!)
        XCTAssertEqual("kees.van.spelde@achmea.nl", msg.internetAccountName!)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x4C, 0x41, 0x42, 0x53, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x46, 0x44, 0x38, 0x32, 0x45, 0x34, 0x41, 0x32, 0x41, 0x30, 0x41, 0x38, 0x34, 0x38, 0x34, 0x44, 0x38, 0x39, 0x46, 0x35, 0x41, 0x33, 0x46, 0x43, 0x42, 0x32, 0x30, 0x44, 0x38, 0x37, 0x44, 0x32, 0x2D, 0x4B, 0x45, 0x45, 0x53, 0x20, 0x56, 0x41, 0x4E, 0x20, 0x53, 0x50, 0x00], [UInt8](msg.receivedRepresentingSearchKey!))
        XCTAssertEqual(28591, msg.internetCodepage!)
        XCTAssertEqual("Spelde van, CMMA (Kees)", msg.lastModifierName!)
        XCTAssertEqual("AM7P189MB0680", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-transport-crosstenantheadersstamped") as String?)!)
        XCTAssertEqual(UUID(uuidString: "2E7E6AFA-ED05-4F5D-56DB-08D77703D2F9"), (msg.getProperty(set: .common, name: "NetworkMessageId") as UUID?)!)
        XCTAssertEqual("00000002\u{01}/o=ExchangeLabs/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=fd82e4a2a0a8484d89f5a3fcb20d87d2-Kees van Sp", msg.internetAccountStamp!)
        XCTAssertEqual("[{\r\n  \"@context\": \"http://schema.org\",\r\n  \"type\": \"IRankerScore\",\r\n  \"entities\": [\r\n  {\r\n    \"@outputVersion\": \"1.0\",\r\n    \"@source\": \"im-3\",\r\n    \"@emailRelevanceScore\": \"0.9989581979273\",\r\n    \"IsImportantByIRanker\": \"true\",\r\n    \"@EntityId\": \"87bf7fb8-2bad-4906-ab6d-404999713cc7\"\r\n  }\r\n]\r\n},{\r\n  \"@context\": \"http://schema.org\",\r\n  \"type\": \"IRankerScoreDev\",\r\n  \"entities\": [\r\n  {\r\n    \"@outputVersion\": \"1.0\",\r\n    \"@IRankerModelVersion\": \"ModelV4\",\r\n    \"@emailRelevanceScore\": \"0.9989581979273\",\r\n    \"IsImportantByIRanker\": \"True\",\r\n    \"FromIsTopCollab\": \"0.0\",\r\n    \"@EntityId\": \"59fbd420-c2fc-428c-b887-37acced70b9d\",\r\n    \"@correlationTrail\": \"AssetId=3ce91b7f-48e6-4613-a106-aee4a5cbdc04;ExtractionId=2981a80b-75fe-49b9-a049-d93cd4fade4c;EntityId=59fbd420-c2fc-428c-b887-37acced70b9d\",\r\n    \"@extractionTimeUtc\": \"2019-12-02T08:44:21.3099422Z\"\r\n  }\r\n]\r\n},{\r\n  \"@context\": \"http://schema.org\",\r\n  \"type\": \"ExtractLanguage\",\r\n  \"entities\": [\r\n  {\r\n    \"@type\": \"ExtractLanguage\",\r\n    \"@context\": \"http://schema.microsoft.com\",\r\n    \"@outputVersion\": \"1.0\",\r\n    \"Language\": {\r\n      \"@type\": \"Language\",\r\n      \"Locale\": \"nl-NL\",\r\n      \"name\": \"Dutch (Netherlands)\",\r\n      \"BestGuessLanguage\": \"nl\"\r\n    },\r\n    \"@source\": \"Exchange\",\r\n    \"LanguageScores\": {\r\n      \"Dutch\": 86.6666641\r\n    },\r\n    \"@EntityId\": \"1027368e-46be-4a78-92e9-c6720e16469b\",\r\n    \"@correlationTrail\": \"AssetId=3ce91b7f-48e6-4613-a106-aee4a5cbdc04;ExtractionId=2981a80b-75fe-49b9-a049-d93cd4fade4c;EntityId=1027368e-46be-4a78-92e9-c6720e16469b\",\r\n    \"@extractionTimeUtc\": \"2019-12-02T08:44:21.3099422Z\"\r\n  }\r\n]\r\n}]", (msg.getProperty(set: .common, name: "EntityDocument") as String?)!)
        XCTAssertEqual("Spelde van, CMMA (Kees)", msg.receivedRepresentingName!)
        XCTAssertEqual("/O=EXCHANGELABS/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=FD82E4A2A0A8484D89F5A3FCB20D87D2-KEES VAN SP", (msg.getProperty(id: .tagCreatorEmailAddress) as String?)!)
        XCTAssertEqual(0, (msg.getProperty(id: .unknown0x1213) as UInt32?)!)
        XCTAssertEqual("kees.van.spelde@achmea.nl", (msg.getProperty(id: .unknown0x5D0A) as String?)!)
        XCTAssertFalse((msg.getProperty(set: .messaging, name: "IsQuotedTextChanged") as Bool?)!)
        XCTAssertEqual("IPM.Note", msg.messageClass!)
        XCTAssertEqual(0x00000000, (msg.sentRepresentingEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.sentRepresentingEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.sentRepresentingEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.sentRepresentingEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/o=ExchangeLabs/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=fd82e4a2a0a8484d89f5a3fcb20d87d2-Kees van Sp\u{00}", (msg.sentRepresentingEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual(1252, msg.messageCodepage!)
        XCTAssertEqual("Spelde van, CMMA (Kees)\u{00}", msg.displayTo!)
        XCTAssertEqual(.html, msg.nativeBody!)
        XCTAssertEqual(.normal, msg.sensitivity!)
        XCTAssertEqual("[\"ExtractionId\",\"2981a80b-75fe-49b9-a049-d93cd4fade4c\",\"TeeEngineVersion\",\"52.0.0\",\"BuildNumber\",\"20191119.25\",\"ChangesetNumber\",\"1cd8419a472d7dad6cfa0cfb669b90e1cacdcd19\",\"Locale\",\"nl-NL\",\"MessageId\",\"\\u003cAM7P189MB07920EE2DBDD12A2C694C81CBF430@AM7P189MB0792.EURP189.PROD.OUTLOOK.COM\\u003e\",\"ReferenceTime\",\"2019-12-02T08:44:20.0000000Z\",\"Flights\",\"TEEReplyWithShipWW;TEEM2HPayloadEnabledFlight;TEEAddBestGuessLanguageFlight;CheckJunkMailHeadersFlight;TEEImportantMail;TEEImportantContact;TEECompliantInferencesShortcut;TEEInferencesForSubscription;TEEEnableInferenceWithUserEdits;TEEInboxPlusFlight;TEEEnableTermFrequency;TEEEnableExperimentalTermFrequency;TEEEvents_agavehp;TEEEvents_agave;TEEEventsOffboxABFlight;TEEFirstBodyFlight;TEEReplyWithCoverageFilterFlight;TEECouponRankerFlight;TEEOffBoxNewVirtualService;KtgClassifierSentItemsFlight;QasTestKPEOffBoxB2;QasAcronymExtractorOffBoxB2;TEEExtractedOnlineMeetingInfoFlight\",\"StartTime\",\"2019-12-02T08:44:21.3069554Z\",\"EndTime\",\"2019-12-02T08:44:21.3099422Z\"]", (msg.getProperty(set: .common, name: "EntityExtractionServiceDiagnosticContext") as String?)!)
        XCTAssertEqual("", msg.subjectPrefix!)
        XCTAssertEqual(32, (msg.getProperty(set: .common, name: "ExchangeApplicationFlags") as UInt32?)!)
        XCTAssertEqual("/O=EXCHANGELABS/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=FD82E4A2A0A8484D89F5A3FCB20D87D2-KEES VAN SP", msg.senderEmailAddress!)
        XCTAssertEqual("Email", (msg.getProperty(set: .internetHeaders, name: "x-ms-publictraffictype") as String?)!)
        XCTAssertEqual("Postvak IN", (msg.getProperty(id: .tagParentDisplay) as String?)!)
        XCTAssertEqual("achmea.nl; dkim=none (message not signed) header.d=none;achmea.nl; dmarc=none action=none header.from=achmea.nl;", (msg.getProperty(set: .internetHeaders, name: "authentication-results") as String?)!)
        XCTAssertEqual("nl", (msg.getProperty(guid: UUID(uuidString: "0B63E350-9CCC-11D0-BCDB-00805FCCCE04")!, name: "DetectedLanguage") as String?)!)
        XCTAssertNotNil(msg.tnefCorrelationKey)
        XCTAssertEqual("Spelde van, CMMA (Kees)", (msg.getProperty(id: .tagLastModifierSimpleDisplayName) as String?)!)
        XCTAssertFalse(msg.originatorDeliveryReportRequested!)
        XCTAssertEqual("Internal", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-organization-authas") as String?)!)
        XCTAssertEqual([.read, .unmodified, .hasAttachment, .fromMe], msg.messageFlags)
        XCTAssertEqual("[\r\n  {\r\n    \"@outputVersion\": \"2.0\",\r\n    \"@formatter\": \"TeeKpeBondCbpBase64\",\r\n    \"@schema\": \"Microsoft.Exchange.Relevance.TeeKpeBondResponse.TeeKpe.TeeKpeResponse\",\r\n    \"keyPhrases\": \"Q0IBAAA=\",\r\n    \"@type\": \"KeyPhraseExtraction\",\r\n    \"@context\": \"http://schema.microsoft.com\",\r\n    \"@EntityId\": \"170f78dd-f2b4-445f-b091-cc092e0dc79c\",\r\n    \"@correlationTrail\": \"AssetId=55ce16d4-da3c-4f77-8e53-6702e00fb282;ExtractionId=2d05f7f6-67ac-43b3-8fe7-ef55e2730956;EntityId=170f78dd-f2b4-445f-b091-cc092e0dc79c\",\r\n    \"@extractionTimeUtc\": \"2019-12-02T08:44:22.1711511Z\"\r\n  }\r\n]", (msg.getProperty(set: .common, name: "EntityExtraction/KeyPhraseExtraction2.0") as String?)!)
        XCTAssertEqual("sip:kees.van.spelde@achmea.nl", (msg.getProperty(id: .unknown0x5FE5) as String?)!)
        XCTAssertEqual(1575276261.0, (msg.getProperty(guid: UUID(uuidString: "0B63E350-9CCC-11D0-BCDB-00805FCCCE04")!, name: "LastIndexingAttemptTime") as Date?)!.timeIntervalSince1970)
        XCTAssertEqual("BCAT=NotBulkDueToSenderIsYou;SCAT=ImportantByPeopleModel, ImportantByPeopleModelWeak, MailboxOwner, SameOrganization;RFV=1032232302:-1=6^1810071250:1486739464=688^1352796317:1486739464=688^;SV=16.01.2363.000;SN=AM7P189MB0792;MV=5010;CT=12/2/2019 8:44:21 AM;ODF=Inbox;IFIC=<null>;HDTR=1;HDTF=V129", (msg.getProperty(set: .xmlExtractedEntities, name: "InferenceClassificationTrackingEx") as String?)!)
        XCTAssertFalse(msg.messageCcMe!)
        XCTAssertNotNil(msg.getProperty(set: .xmlExtractedEntities, name: "TriageHeuristicsFeatureSet"))
        XCTAssertEqual([0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x15, 0x00, 0x00, 0x00, 0x17, 0x1C, 0x99, 0x9E, 0x5A, 0x5C, 0x16, 0x4B, 0x86, 0x2E, 0x76, 0xB5, 0xED, 0x3D, 0xC0, 0x00], [UInt8]((msg.getProperty(id: .PR_LAST_MODIFIER_SID) as Data?)!))
        XCTAssertFalse((msg.getProperty(id: .unknown0x0ECD) as Bool?)!)
        XCTAssertFalse(msg.reminderSet!)
        XCTAssertEqual(1575276280.0, msg.lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual(0x00000000, (msg.lastModifierEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.lastModifierEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.lastModifierEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.lastModifierEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGELABS/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=FD82E4A2A0A8484D89F5A3FCB20D87D2-KEES VAN SP\u{00}", (msg.lastModifierEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual([0x01, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00], [UInt8]((msg.getProperty(set: .messaging, name: "HeaderBodyFragmentList") as Data?)!))
        XCTAssertEqual("Spelde van, CMMA (Kees)", (msg.getProperty(id: .tagSenderName) as String?)!)
        XCTAssertEqual(0, msg.reminderDelta!)
        XCTAssertEqual("nl-NL, en-US", (msg.getProperty(set: .internetHeaders, name: "acceptlanguage") as String?)!)
        XCTAssertTrue(msg.hasAttachments!)
        XCTAssertEqual("EX", msg.receivedRepresentingAddressType!)
        XCTAssertTrue((msg.getProperty(set: .common, name: "EntityExtractionSuccessDelayed") as Bool?)!)
        XCTAssertNotNil(msg.rtfCompressed)
        XCTAssertEqual(13, (msg.getProperty(id: .unknown0x3668) as UInt32?)!)
        XCTAssertEqual(.html, msg.messageEditorFormat!)
        XCTAssertEqual("kees.van.spelde@achmea.nl", (msg.getProperty(id: .unknown0x5D0B) as String?)!)
        XCTAssertEqual("Spelde van, CMMA (Kees)", (msg.getProperty(id: .tagSentRepresentingSimpleDisplayName) as String?)!)
        XCTAssertEqual(54, (msg.getProperty(set: .xmlExtractedEntities, name: "LatestMessageWordCount") as UInt32?)!)
        XCTAssertEqual("SFV:SKI;SFS:;DIR:INB;SFP:;SCL:-1;SRVR:AM7P189MB0680;H:AM7P189MB0792.EURP189.PROD.OUTLOOK.COM;FPR:;SPF:None;LANG:nl;", (msg.getProperty(set: .internetHeaders, name: "x-forefront-antispam-report") as String?)!)
        XCTAssertEqual(0x00160000, msg.internetMailOverrideFormat!)
        XCTAssertEqual([0xC9, 0xF8, 0xBB, 0x8A, 0x99, 0xEC, 0x5B, 0x43, 0x90, 0xB3, 0x04, 0x6A, 0xEA, 0x89, 0xDC, 0x74], [UInt8](msg.searchKey!))
        XCTAssertEqual("Spelde van, CMMA (Kees)", (msg.getProperty(id: .tagSenderSimpleDisplayName) as String?)!)
        XCTAssertEqual(4294967295, msg.iconIndex!)
        XCTAssertEqual("Hosted", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-crosstenant-fromentityheader") as String?)!)
        XCTAssertEqual(.normal, msg.priority!)
        XCTAssertEqual("/O=EXCHANGELABS/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=FD82E4A2A0A8484D89F5A3FCB20D87D2-KEES VAN SP", msg.receivedByEmailAddress!)
        XCTAssertEqual("02 Dec 2019 08:44:20.3710 (UTC)", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-crosstenant-originalarrivaltime") as String?)!)
        XCTAssertEqual([0xB0, 0x2C, 0xC0, 0x35, 0x25, 0x0F, 0x4D, 0x66, 0x9B, 0x17, 0x2E, 0x24, 0x15, 0x65, 0x86, 0x7B], [UInt8]((msg.getProperty(id: .unknown0x0F03) as Data?)!))
        XCTAssertEqual("Spelde van, CMMA (Kees)", msg.receivedByName!)
        XCTAssertFalse(msg.smartNoAttach!)
        XCTAssertEqual("04", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-organization-authmechanism") as String?)!)
        XCTAssertTrue(msg.hasDeferredActionMessages!)
        XCTAssertEqual("ucf:0;jmr:0;ex:0;auth:0;dest:I;ENG:(750127)(520011016)(706158)(944506383)(944626516);", (msg.getProperty(set: .common, name: "X-Microsoft-Antispam-Mailbox-Delivery") as String?)!)
        XCTAssertEqual(1575276260.0, msg.clientSubmitTime!.timeIntervalSince1970)
        XCTAssertEqual("Client=MSExchangeRPC", (msg.getProperty(set: .messaging, name: "ClientInfo") as String?)!)
        XCTAssertEqual(UUID(uuidString: "CE58E2F6-3358-4A47-A8B6-78DBA6482C22"), msg.changeKey!.namespaceGuid)
        XCTAssertEqual([0x00, 0x01, 0x0B, 0xDA, 0x59, 0x51], msg.changeKey!.localId)
        XCTAssertFalse(msg.nonReceiptNotificationRequested!)
        XCTAssertEqual("BCL:0;", (msg.getProperty(set: .internetHeaders, name: "x-microsoft-antispam") as String?)!)
        XCTAssertEqual("c37ef212-d4a3-44b6-92df-0d1dff85604f", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-crosstenant-id") as String?)!)
        XCTAssertEqual("BT=1;II=[CID=35c02cb0-0f25-664d-9b17-2e241565867b;IDXHEAD=D5A8ECADB5;IDXCOUNT=1];SBMID=25;RTP=Self;TFR=NotForking;FIXUP=27.4166;Version=Version 15.20 (Build 2495.0), Stage=H13;UP=10;DP=1C5;QT=6", (msg.getProperty(guid: UUID(uuidString: "33EBA41F-7AA8-422E-BE7B-79E1A98E54B3")!, name: "ConversationIndexTrackingEx") as String?)!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.storeSupportMask)
        XCTAssertEqual([.read], msg.access)
        XCTAssertEqual(0x00000000, (msg.senderEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.senderEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.senderEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.senderEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/o=ExchangeLabs/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=fd82e4a2a0a8484d89f5a3fcb20d87d2-Kees van Sp\u{00}", (msg.senderEntryId as? AddressBookEntryID)!.x500DN)

        XCTAssertEqual(1, msg.recipients.count)
        XCTAssertEqual([0x00, 0x00, 0x00, 0x00, 0xDC, 0xA7, 0x40, 0xC8, 0xC0, 0x42, 0x10, 0x1A, 0xB4, 0xB9, 0x08, 0x00, 0x2B, 0x2F, 0xE1, 0x82, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x6F, 0x3D, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6E, 0x67, 0x65, 0x4C, 0x61, 0x62, 0x73, 0x2F, 0x6F, 0x75, 0x3D, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6E, 0x67, 0x65, 0x20, 0x41, 0x64, 0x6D, 0x69, 0x6E, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x20, 0x47, 0x72, 0x6F, 0x75, 0x70, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x63, 0x6E, 0x3D, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6E, 0x74, 0x73, 0x2F, 0x63, 0x6E, 0x3D, 0x66, 0x64, 0x38, 0x32, 0x65, 0x34, 0x61, 0x32, 0x61, 0x30, 0x61, 0x38, 0x34, 0x38, 0x34, 0x64, 0x38, 0x39, 0x66, 0x35, 0x61, 0x33, 0x66, 0x63, 0x62, 0x32, 0x30, 0x64, 0x38, 0x37, 0x64, 0x32, 0x2D, 0x4B, 0x65, 0x65, 0x73, 0x20, 0x76, 0x61, 0x6E, 0x20, 0x53, 0x70, 0x00], [UInt8](msg.recipients[0].recordKey!))
        XCTAssertEqual(0x00000000, (msg.recipients[0].entryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.recipients[0].entryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.recipients[0].entryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.recipients[0].entryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/o=ExchangeLabs/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=fd82e4a2a0a8484d89f5a3fcb20d87d2-Kees van Sp\u{00}", (msg.recipients[0].entryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual("AA303388", msg.recipients[0].addressBookDisplayNamePrintable!)
        XCTAssertEqual("Spelde van, CMMA (Kees)", msg.recipients[0].transmittableDisplayName!)
        XCTAssertEqual([0xC4, 0x1C, 0x83, 0xD0, 0x33, 0x2C, 0x80, 0x4D, 0x9C, 0x79, 0x06, 0xF6, 0xAA, 0xC2, 0x84, 0x26], [UInt8]((msg.recipients[0].getProperty(id: .tagAbProviders) as Data?)!))
        XCTAssertEqual(0, (msg.recipients[0].getProperty(id: .tagRecipientResourceState) as UInt32?)!)
        XCTAssertEqual(.primaryRecipient, msg.recipients[0].recipientType!)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x4C, 0x41, 0x42, 0x53, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x46, 0x44, 0x38, 0x32, 0x45, 0x34, 0x41, 0x32, 0x41, 0x30, 0x41, 0x38, 0x34, 0x38, 0x34, 0x44, 0x38, 0x39, 0x46, 0x35, 0x41, 0x33, 0x46, 0x43, 0x42, 0x32, 0x30, 0x44, 0x38, 0x37, 0x44, 0x32, 0x2D, 0x4B, 0x45, 0x45, 0x53, 0x20, 0x56, 0x41, 0x4E, 0x20, 0x53, 0x50, 0x00], [UInt8](msg.recipients[0].searchKey!))
        XCTAssertEqual(.sendable, msg.recipients[0].recipientFlags!)
        XCTAssertEqual(0x00000000, (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/o=ExchangeLabs/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=fd82e4a2a0a8484d89f5a3fcb20d87d2-Kees van Sp\u{00}", (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual("/o=ExchangeLabs/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=fd82e4a2a0a8484d89f5a3fcb20d87d2-Kees van Sp", msg.recipients[0].emailAddress!)
        XCTAssertEqual(0, msg.recipients[0].rowid!)
        XCTAssertEqual("AA303388", msg.recipients[0].account!)
        XCTAssertEqual([DisplayTypeEx(rawValue: 0x40000000)], msg.recipients[0].displayTypeEx)
        XCTAssertEqual(0, msg.recipients[0].recipientOrder!)
        XCTAssertEqual([0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x15, 0x00, 0x00, 0x00, 0x17, 0x1C, 0x99, 0x9E, 0x5A, 0x5C, 0x16, 0x4B, 0x86, 0x2E, 0x76, 0xB5, 0xED, 0x3D, 0xC0, 0x00], [UInt8]((msg.recipients[0].getProperty(id: .unknown0x0C24) as Data?)!))
        XCTAssertEqual("sip:kees.van.spelde@achmea.nl", (msg.recipients[0].getProperty(id: .unknown0x5FE5) as String?)!)
        XCTAssertEqual("EX", msg.recipients[0].addressType!)
        XCTAssertEqual([0xC4, 0x1C, 0x83, 0xD0, 0x33, 0x2C, 0x80, 0x4D, 0x9C, 0x79, 0x06, 0xF6, 0xAA, 0xC2, 0x84, 0x26], [UInt8]((msg.recipients[0].getProperty(id: .unknown0x0C25) as Data?)!))
        XCTAssertEqual("kees.van.spelde@achmea.nl", msg.recipients[0].smtpAddress!)
        XCTAssertEqual(.mailUser, msg.recipients[0].objectType!)
        XCTAssertTrue(msg.recipients[0].responsibility!)
        XCTAssertEqual(.none, msg.recipients[0].recipientTrackStatus!)
        XCTAssertEqual("Spelde van, CMMA (Kees)", msg.recipients[0].displayName!)
        XCTAssertTrue(msg.recipients[0].sendRichInfo!)
        XCTAssertEqual(.mailUser, msg.recipients[0].displayType!)
        XCTAssertEqual([0x00, 0x07, 0xF4, 0x76], [UInt8](msg.recipients[0].instanceKey!))
        XCTAssertEqual("Spelde van, CMMA (Kees)", msg.recipients[0].recipientDisplayName!)

        XCTAssertEqual(2, msg.attachments.count)
        XCTAssertEqual("EnUs", msg.attachments[0].language!)
        XCTAssertEqual(.byValue, msg.attachments[0].attachMethod!)
        XCTAssertEqual("", (msg.attachments[0].getProperty(set: .attachment, name: "AttachmentOriginalUrl") as String?)!)
        XCTAssertEqual([], [UInt8](msg.attachments[0].attachEncoding!))
        XCTAssertEqual(0x00000000, msg.attachments[0].attachmentFlags!)
        XCTAssertEqual("Installatie handleiding.docx", msg.attachments[0].displayName!)
        XCTAssertEqual("Instal~1.doc", msg.attachments[0].attachFilename!)
        XCTAssertEqual([], msg.attachments[0].attachFlags)
        XCTAssertNotNil(msg.attachments[0].attachRendering)
        XCTAssertEqual(79870665600.0, msg.attachments[0].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual("Installatie handleiding.docx", msg.attachments[0].attachLongFilename!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[0].storeSupportMask)
        XCTAssertEqual([.read], msg.attachments[0].access)
        XCTAssertEqual(4294967295, msg.attachments[0].renderingPosition!)
        XCTAssertEqual(0, msg.attachments[0].attachmentLinkId!)
        XCTAssertEqual([0xD1, 0xCC, 0xC7, 0x25, 0x20, 0x48, 0xBB, 0x43, 0x89, 0xB2, 0x0C, 0xCC, 0xCF, 0xED, 0xFA, 0x4E], [UInt8]((msg.attachments[0].getProperty(id: .unknown0x371D) as Data?)!))
        XCTAssertEqual(1575276255.0, msg.attachments[0].creationTime!.timeIntervalSince1970)
        XCTAssertFalse((msg.attachments[0].getProperty(set: .attachment, name: "AttachmentWasSavedToCloud") as Bool?)!)
        XCTAssertEqual(79870665600.0, msg.attachments[0].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual(".docx", msg.attachments[0].attachExtension!)
        XCTAssertEqual(.attachment, msg.attachments[0].objectType!)
        XCTAssertEqual(1575276255.0, msg.attachments[0].lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual([0x00, 0x00, 0x00, 0x00], [UInt8](msg.attachments[0].recordKey!))
        XCTAssertEqual(0, msg.attachments[0].attachNumber!)
        XCTAssertNotNil(msg.attachments[0].attachDataBinary)
        XCTAssertFalse(msg.attachments[0].attachmentContactPhoto!)
        XCTAssertEqual(.readOnly, msg.attachments[0].accessLevel!)
        XCTAssertFalse(msg.attachments[0].attachmentHidden!)

        XCTAssertNotNil(msg.attachments[1].attachRendering)
        XCTAssertFalse(msg.attachments[1].attachmentHidden!)
        XCTAssertEqual([0x01, 0x00, 0x00, 0x00], [UInt8](msg.attachments[1].recordKey!))
        XCTAssertFalse((msg.attachments[1].getProperty(set: .attachment, name: "AttachmentWasSavedToCloud") as Bool?)!)
        XCTAssertEqual(".xlsx", msg.attachments[1].attachExtension!)
        XCTAssertEqual(.byValue, msg.attachments[1].attachMethod!)
        XCTAssertEqual(1575276257.0, msg.attachments[1].lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual(1575276257.0, msg.attachments[1].creationTime!.timeIntervalSince1970)
        XCTAssertEqual([0xBB, 0x6A, 0xEC, 0x7B, 0x70, 0x6C, 0xA4, 0x4D, 0xBB, 0xCE, 0x19, 0x28, 0xEF, 0xEF, 0x6A, 0xAE], [UInt8]((msg.attachments[1].getProperty(id: .unknown0x371D) as Data?)!))
        XCTAssertEqual("EnUs", msg.attachments[1].language!)
        XCTAssertEqual(0x00000000, msg.attachments[1].attachmentFlags!)
        XCTAssertEqual(79870665600.0, msg.attachments[1].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual("Instal~1.xls", msg.attachments[1].attachFilename!)
        XCTAssertEqual([.read], msg.attachments[1].access)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[1].storeSupportMask)
        XCTAssertEqual(.attachment, msg.attachments[1].objectType!)
        XCTAssertFalse(msg.attachments[1].attachmentContactPhoto!)
        XCTAssertEqual(79870665600.0, msg.attachments[1].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual([], [UInt8](msg.attachments[1].attachEncoding!))
        XCTAssertEqual(0, msg.attachments[1].attachmentLinkId!)
        XCTAssertNotNil(msg.attachments[1].attachDataBinary)
        XCTAssertEqual("Installatiehandleiding S&I Agro.xlsx", msg.attachments[1].displayName!)
        XCTAssertEqual("", (msg.attachments[1].getProperty(set: .attachment, name: "AttachmentOriginalUrl") as String?)!)
        XCTAssertEqual("Installatiehandleiding S&I Agro.xlsx", msg.attachments[1].attachLongFilename!)
        XCTAssertEqual([], msg.attachments[1].attachFlags)
        XCTAssertEqual(.readOnly, msg.attachments[1].accessLevel!)
        XCTAssertEqual(4294967295, msg.attachments[1].renderingPosition!)
        XCTAssertEqual(1, msg.attachments[1].attachNumber!)
    }

    func testReadSicos19772() throws {
        let data = try getData(name: "Sicos1977/MSGReader/EmailWithAttachments")
        let msg = try MsgFile(data: data)
        
        XCTAssertEqual(.message, msg.objectType!)
        XCTAssertEqual([.unmodified, .hasAttachment], msg.messageFlags)
        XCTAssertEqual(.modify, msg.accessLevel!)
        XCTAssertEqual("Kees", (msg.getProperty(id: .tagCreatorSimpleDisplayName) as String?)!)
        XCTAssertEqual(1516988260.0, msg.creationTime!.timeIntervalSince1970)
        XCTAssertEqual("This is the subject", msg.subject!)
        XCTAssertEqual("Hello Neverland text", msg.body!)
        XCTAssertEqual("This is the subject", msg.conversationTopic!)
        XCTAssertEqual("peterpan@neverland.com", msg.senderEmailAddress!)
        XCTAssertEqual(0x00000000, (msg.senderEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.senderEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.senderEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode, OneOffEntryFlags(rawValue: 0x6800)], (msg.senderEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("Kees", (msg.senderEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.senderEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("peterpan@neverland.com", (msg.senderEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual("Kees", (msg.getProperty(id: .tagSenderName) as String?)!)
        XCTAssertEqual("SMTP", (msg.getProperty(id: .tagSenderAddressType) as String?)!)
        XCTAssertTrue(msg.hasAttachments!)
        XCTAssertEqual("tinkerbel@neverland.com", msg.displayCc!)
        XCTAssertEqual(65001, msg.internetCodepage!)
        XCTAssertEqual(1043, msg.initialDetailsPane!)
        XCTAssertEqual([.modify, .read, .delete], msg.access)
        XCTAssertEqual("SMTP", (msg.getProperty(id: .tagCreatorAddressType) as String?)!)
        XCTAssertNotNil(msg.bodyHtml)
        XCTAssertTrue(msg.alternateRecipientAllowed!)
        XCTAssertEqual(0x00016466, msg.messageSize!)
        XCTAssertEqual(0x00000103, msg.iconIndex!)
        XCTAssertEqual(.normal, msg.priority!)
        XCTAssertEqual([0xBC, 0xC3, 0xFF, 0x3F], [UInt8](msg.instanceKey!))
        XCTAssertEqual(327736, (msg.getProperty(id: .tagStoreUnicodeMask) as UInt32?)!)
        XCTAssertEqual("peterpan@neverland.com", (msg.getProperty(id: .tagCreatorEmailAddress) as String?)!)
        XCTAssertEqual(1480788534.0, msg.clientSubmitTime!.timeIntervalSince1970)
        XCTAssertEqual("This is the subject", msg.normalizedSubject!)
        XCTAssertEqual("wendy@neverland.com", msg.displayBcc!)
        XCTAssertEqual("crocodile@neverland.com", msg.displayTo!)
        XCTAssertEqual(0x00350030, (msg.entryId as? GeneralEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "31003400-6500-3100-3800-64002D003600"), (msg.entryId as? GeneralEntryID)!.providerUid)
        XCTAssertEqual([0x37, 0x00, 0x62, 0x00, 0x38, 0x00, 0x2D, 0x00, 0x34, 0x00, 0x62, 0x00, 0x65, 0x00, 0x65, 0x00, 0x2D, 0x00, 0x61, 0x00, 0x65, 0x00, 0x36, 0x00, 0x66, 0x00, 0x2D, 0x00, 0x39, 0x00, 0x37, 0x00, 0x66, 0x00, 0x62, 0x00, 0x33, 0x00, 0x34, 0x00, 0x32, 0x00, 0x62, 0x00, 0x65, 0x00, 0x65, 0x00, 0x32, 0x00, 0x62, 0x00], (msg.entryId as? GeneralEntryID)!.providerData)
        XCTAssertEqual("", msg.subjectPrefix!)
        XCTAssertEqual(1516988260.0, msg.lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual("IPM.Note", msg.messageClass!)
        XCTAssertEqual(.normal, msg.importance!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00010038)], msg.storeSupportMask)

        XCTAssertEqual(3, msg.recipients.count)
        XCTAssertEqual("crocodile@neverland.com", msg.recipients[0].emailAddress!)
        XCTAssertEqual(.mailUser, msg.recipients[0].displayType!)
        XCTAssertEqual([0x53, 0x00, 0x4D, 0x00, 0x54, 0x00, 0x50, 0x00, 0x63, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x40, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x2E, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x6D, 0x00], [UInt8](msg.recipients[0].searchKey!))
        XCTAssertEqual([0xBC, 0xC3, 0xFF, 0x3F], [UInt8](msg.recipients[0].instanceKey!))
        XCTAssertEqual(0, msg.recipients[0].rowid!)
        XCTAssertEqual(.mailUser, msg.recipients[0].objectType!)
        XCTAssertEqual(0x00300030, (msg.recipients[0].entryId as? GeneralEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "62003500-3300-3800-3400-39002D006500"), (msg.recipients[0].entryId as? GeneralEntryID)!.providerUid)
        XCTAssertEqual([0x36, 0x00, 0x34, 0x00, 0x64, 0x00, 0x2D, 0x00, 0x34, 0x00, 0x64, 0x00, 0x33, 0x00, 0x37, 0x00, 0x2D, 0x00, 0x38, 0x00, 0x30, 0x00, 0x37, 0x00, 0x39, 0x00, 0x2D, 0x00, 0x66, 0x00, 0x36, 0x00, 0x37, 0x00, 0x37, 0x00, 0x31, 0x00, 0x65, 0x00, 0x39, 0x00, 0x65, 0x00, 0x61, 0x00, 0x30, 0x00, 0x62, 0x00, 0x63, 0x00], (msg.recipients[0].entryId as? GeneralEntryID)!.providerData)
        XCTAssertEqual(.primaryRecipient, msg.recipients[0].recipientType!)
        XCTAssertEqual("SMTP", msg.recipients[0].addressType!)
        XCTAssertEqual("crocodile@neverland.com", msg.recipients[0].displayName!)

        XCTAssertEqual([0x53, 0x00, 0x4D, 0x00, 0x54, 0x00, 0x50, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x6B, 0x00, 0x65, 0x00, 0x72, 0x00, 0x62, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x40, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x2E, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x6D, 0x00], [UInt8](msg.recipients[1].searchKey!))
        XCTAssertEqual(.mailUser, msg.recipients[1].displayType!)
        XCTAssertEqual(1, msg.recipients[1].rowid!)
        XCTAssertEqual(.ccRecipient, msg.recipients[1].recipientType!)
        XCTAssertEqual(0x00650034, (msg.recipients[1].entryId as? GeneralEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "31006100-6600-6500-3500-32002D006100"), (msg.recipients[1].entryId as? GeneralEntryID)!.providerUid)
        XCTAssertEqual([0x65, 0x00, 0x66, 0x00, 0x64, 0x00, 0x2D, 0x00, 0x34, 0x00, 0x33, 0x00, 0x39, 0x00, 0x38, 0x00, 0x2D, 0x00, 0x62, 0x00, 0x61, 0x00, 0x62, 0x00, 0x39, 0x00, 0x2D, 0x00, 0x36, 0x00, 0x33, 0x00, 0x35, 0x00, 0x66, 0x00, 0x64, 0x00, 0x30, 0x00, 0x37, 0x00, 0x63, 0x00, 0x34, 0x00, 0x63, 0x00, 0x36, 0x00, 0x37, 0x00], (msg.recipients[1].entryId as? GeneralEntryID)!.providerData)
        XCTAssertEqual("tinkerbel@neverland.com", msg.recipients[1].emailAddress!)
        XCTAssertEqual([0xBC, 0xC3, 0xFF, 0x3F], [UInt8](msg.recipients[1].instanceKey!))
        XCTAssertEqual(.mailUser, msg.recipients[1].objectType!)
        XCTAssertEqual("tinkerbel@neverland.com", msg.recipients[1].displayName!)
        XCTAssertEqual("SMTP", msg.recipients[1].addressType!)

        XCTAssertEqual("wendy@neverland.com", msg.recipients[2].displayName!)
        XCTAssertEqual([0x53, 0x00, 0x4D, 0x00, 0x54, 0x00, 0x50, 0x00, 0x77, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x79, 0x00, 0x40, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x2E, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x6D, 0x00], [UInt8](msg.recipients[2].searchKey!))
        XCTAssertEqual(.mailUser, msg.recipients[2].objectType!)
        XCTAssertEqual(0x00360061, (msg.recipients[2].entryId as? GeneralEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "32003500-3400-6300-3300-30002D003100"), (msg.recipients[2].entryId as? GeneralEntryID)!.providerUid)
        XCTAssertEqual([0x36, 0x00, 0x34, 0x00, 0x33, 0x00, 0x2D, 0x00, 0x34, 0x00, 0x31, 0x00, 0x39, 0x00, 0x37, 0x00, 0x2D, 0x00, 0x39, 0x00, 0x64, 0x00, 0x61, 0x00, 0x62, 0x00, 0x2D, 0x00, 0x63, 0x00, 0x34, 0x00, 0x38, 0x00, 0x33, 0x00, 0x36, 0x00, 0x36, 0x00, 0x38, 0x00, 0x35, 0x00, 0x36, 0x00, 0x65, 0x00, 0x66, 0x00, 0x35, 0x00], (msg.recipients[2].entryId as? GeneralEntryID)!.providerData)
        XCTAssertEqual("SMTP", msg.recipients[2].addressType!)
        XCTAssertEqual(.bccRecipient, msg.recipients[2].recipientType!)
        XCTAssertEqual(2, msg.recipients[2].rowid!)
        XCTAssertEqual([0xBC, 0xC3, 0xFF, 0x3F], [UInt8](msg.recipients[2].instanceKey!))
        XCTAssertEqual(.mailUser, msg.recipients[2].displayType!)
        XCTAssertEqual("wendy@neverland.com", msg.recipients[2].emailAddress!)

        XCTAssertEqual(2, msg.attachments.count)
        XCTAssertNotNil(msg.attachments[0].attachDataBinary)
        XCTAssertEqual("peterpan.jpg", msg.attachments[0].displayName!)
        XCTAssertEqual(1516988260.0, msg.attachments[0].creationTime!.timeIntervalSince1970)
        XCTAssertEqual(39150, msg.attachments[0].attachSize!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00010038)], msg.attachments[0].storeSupportMask)
        XCTAssertEqual([0xBC, 0xC3, 0xFF, 0x3F], [UInt8](msg.attachments[0].instanceKey!))
        XCTAssertEqual(.byValue, msg.attachments[0].attachMethod!)
        XCTAssertEqual(0, msg.attachments[0].attachNumber!)
        XCTAssertEqual("peterpan.jpg", msg.attachments[0].attachLongFilename!)
        XCTAssertEqual([0xDA, 0x35, 0x2F, 0xF2, 0xAA, 0xC2, 0x22, 0x40, 0x92, 0x3B, 0xF5, 0x6D, 0xC8, 0xDF, 0x4B, 0x2D], [UInt8](msg.attachments[0].recordKey!))
        XCTAssertEqual(1516988260.0, msg.attachments[0].lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual("PETERPAN.JPG", msg.attachments[0].attachFilename!)
        XCTAssertEqual(4294967295, msg.attachments[0].renderingPosition!)
        XCTAssertEqual("image/jpeg", msg.attachments[0].attachMimeTag!)
        XCTAssertEqual(".jpg", msg.attachments[0].attachExtension!)

        XCTAssertNotNil(msg.attachments[1].attachDataBinary)
        XCTAssertEqual("tinkerbell.jpg", msg.attachments[1].displayName!)
        XCTAssertEqual(1516988260.0, msg.attachments[1].creationTime!.timeIntervalSince1970)
        XCTAssertTrue(msg.attachments[1].attachmentHidden!)
        XCTAssertEqual(49353, msg.attachments[1].attachSize!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00010038)], msg.attachments[1].storeSupportMask)
        XCTAssertEqual([0xBC, 0xC3, 0xFF, 0x3F], [UInt8](msg.attachments[1].instanceKey!))
        XCTAssertEqual("tinkerbell.jpg", msg.attachments[1].attachContentId!)
        XCTAssertEqual(.byValue, msg.attachments[1].attachMethod!)
        XCTAssertEqual(1, msg.attachments[1].attachNumber!)
        XCTAssertEqual("tinkerbell.jpg", msg.attachments[1].attachLongFilename!)
        XCTAssertEqual([0x63, 0xD4, 0x27, 0x25, 0x2F, 0x19, 0x46, 0x47, 0xAD, 0x1D, 0x6C, 0x01, 0x02, 0x0D, 0x98, 0x14], [UInt8](msg.attachments[1].recordKey!))
        XCTAssertEqual(1516988260.0, msg.attachments[1].lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual("TINKER~1.JPG", msg.attachments[1].attachFilename!)
        XCTAssertEqual(4294967295, msg.attachments[1].renderingPosition!)
        XCTAssertEqual("image/jpeg", msg.attachments[1].attachMimeTag!)
        XCTAssertEqual(".jpg", msg.attachments[1].attachExtension!)
    }

    func testReadSicos19773() throws {
        let data = try getData(name: "Sicos1977/MSGReader/HtmlSampleEmail")
        let msg = try MsgFile(data: data)
        
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON", msg.sentRepresentingEmailAddress!)
        XCTAssertNotNil(msg.transportMessageHeaders)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.storeSupportMask)
        XCTAssertEqual("Chris.Wilson@leeds.gov.uk", msg.sentRepresentingSmtpAddress!)
        XCTAssertEqual(1508744136.0, msg.creationTime!.timeIntervalSince1970)
        XCTAssertEqual("scan successful", (msg.getProperty(set: .internetHeaders, name: "x-kse-antivirus-interceptor-info") as String?)!)
        XCTAssertEqual(0x00000000, (msg.senderEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.senderEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.senderEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.senderEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON\u{00}", (msg.senderEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual([.read], msg.access)
        XCTAssertFalse(msg.readReceiptRequested!)
        XCTAssertFalse(msg.messageCcMe!)
        XCTAssertEqual(1033, msg.messageLocaleId!)
        XCTAssertEqual(0x00000000, (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON\u{00}", (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x43, 0x48, 0x52, 0x49, 0x53, 0x2E, 0x57, 0x49, 0x4C, 0x53, 0x4F, 0x4E, 0x00], [UInt8](msg.senderSearchKey!))
        XCTAssertEqual(.normal, msg.sensitivity!)
        XCTAssertEqual(0, (msg.getProperty(id: .tagSentRepresentingFlags) as UInt32?)!)
        XCTAssertEqual("Wilson, Chris", (msg.getProperty(id: .tagSenderName) as String?)!)
        XCTAssertEqual("HtmlSampleEmail", msg.normalizedSubject!)
        XCTAssertFalse(msg.reminderSet!)
        XCTAssertEqual("Wilson, Chris", msg.sentRepresentingName!)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON", msg.receivedByEmailAddress!)
        XCTAssertFalse((msg.getProperty(set: .messaging, name: "IsReadReceipt") as Bool?)!)
        XCTAssertEqual("Chris.Wilson@leeds.gov.uk", (msg.getProperty(id: .tagSenderSmtpAddress) as String?)!)
        XCTAssertEqual("[10.184.253.12]", (msg.getProperty(set: .internetHeaders, name: "x-originating-ip") as String?)!)
        XCTAssertEqual(0x00000000, (msg.receivedByEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.receivedByEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.receivedByEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.receivedByEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON\u{00}", (msg.receivedByEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual("<6BA412B7BBD2FD42861293C22F31BF8F1AEC9B57@pifmbx04.Leeds.gov.uk>", (msg.getProperty(id: .tagInternetMessageId) as String?)!)
        XCTAssertFalse(msg.agingDontAgeMe!)
        XCTAssertEqual("HtmlSampleEmail", msg.subject!)
        XCTAssertEqual("Clean, bases: 23/10/2017 05:31:00", (msg.getProperty(set: .internetHeaders, name: "x-kse-antivirus-info") as String?)!)
        XCTAssertNotNil(msg.body)
        XCTAssertFalse(msg.`private`!)
        XCTAssertEqual("BT=7;II=01D34BD0DEB63F62F427259045958B0068D1BB58684A;FIXUP=7.2008;Version=Version 14.3 (Build 361.0), Stage=H4", (msg.getProperty(guid: UUID(uuidString: "33EBA41F-7AA8-422E-BE7B-79E1A98E54B3")!, name: "ConversationIndexTrackingEx") as String?)!)
        XCTAssertEqual([0x89, 0xCB, 0x9B, 0x63, 0x0C, 0xA8, 0x21, 0x4B, 0xB5, 0x22, 0xA9, 0xB8, 0x28, 0x5E, 0x86, 0xDF], [UInt8](msg.searchKey!))
        XCTAssertEqual(4294967295, msg.iconIndex!)
        XCTAssertEqual("", msg.displayBcc!)
        XCTAssertEqual(0, (msg.getProperty(id: .tagSenderFlags) as UInt32?)!)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON", msg.senderEmailAddress!)
        XCTAssertEqual("sip:chris.wilson@leeds.gov.uk", (msg.getProperty(id: .unknown0x5FE5) as String?)!)
        XCTAssertEqual(0x00000000, (msg.sentRepresentingEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.sentRepresentingEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.sentRepresentingEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.sentRepresentingEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON\u{00}", (msg.sentRepresentingEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual(0x00000000, (msg.lastModifierEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.lastModifierEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.lastModifierEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.lastModifierEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON\u{00}", (msg.lastModifierEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual(2057, (msg.getProperty(set: .common, lid: 0x000085EB) as UInt32?)!)
        XCTAssertTrue(msg.rtfInSync!)
        XCTAssertEqual("Chris.Wilson@leeds.gov.uk", (msg.getProperty(id: .tagSendingSmtpAddress) as String?)!)
        XCTAssertEqual("pifchu08.Leeds.gov.uk", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-organization-authsource") as String?)!)
        XCTAssertEqual("EX", msg.sentRepresentingAddressType!)
        XCTAssertNotNil(msg.tnefCorrelationKey)
        XCTAssertEqual("EX", (msg.getProperty(id: .tagCreatorAddressType) as String?)!)
        XCTAssertEqual(28591, msg.internetCodepage!)
        XCTAssertTrue(msg.alternateRecipientAllowed!)
        XCTAssertFalse(msg.useTnef!)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x43, 0x48, 0x52, 0x49, 0x53, 0x2E, 0x57, 0x49, 0x4C, 0x53, 0x4F, 0x4E, 0x00], [UInt8](msg.receivedRepresentingSearchKey!))
        XCTAssertEqual("", msg.displayCc!)
        XCTAssertEqual("EX", msg.receivedByAddressType!)
        XCTAssertEqual("Chris.Wilson@leeds.gov.uk", msg.internetAccountName!)
        XCTAssertEqual("Internal", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-organization-authas") as String?)!)
        XCTAssertEqual("Wilson, Chris", msg.receivedByName!)
        XCTAssertTrue(msg.conversationIndexTracking!)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x43, 0x48, 0x52, 0x49, 0x53, 0x2E, 0x57, 0x49, 0x4C, 0x53, 0x4F, 0x4E, 0x00], [UInt8](msg.sentRepresentingSearchKey!))
        XCTAssertEqual(.normal, msg.priority!)
        XCTAssertEqual("Wilson, Chris", msg.receivedRepresentingName!)
        XCTAssertEqual(106851, (msg.getProperty(id: .tagInternetArticleNumber) as UInt32?)!)
        XCTAssertEqual([0x02, 0x00, 0x4B, 0x61, 0x73, 0x70, 0x72, 0x4C, 0x61, 0x62, 0xA6, 0xA4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [UInt8]((msg.getProperty(id: .unknown0x0E9D) as Data?)!))
        XCTAssertEqual([], msg.sideEffects)
        XCTAssertEqual(.html, msg.messageEditorFormat!)
        XCTAssertFalse((msg.getProperty(set: .messaging, name: "IsSigned") as Bool?)!)
        XCTAssertEqual(0x00160000, msg.internetMailOverrideFormat!)
        XCTAssertEqual(.normal, msg.importance!)
        XCTAssertEqual(.readOnly, msg.accessLevel!)
        XCTAssertEqual(0, (msg.getProperty(id: .tagReceivedByFlags) as UInt32?)!)
        XCTAssertEqual(.notAssigned, msg.taskMode!)
        XCTAssertEqual("EX", msg.receivedRepresentingAddressType!)
        XCTAssertTrue(msg.messageToMe!)
        XCTAssertEqual("", msg.subjectPrefix!)
        XCTAssertFalse(msg.originatorDeliveryReportRequested!)
        XCTAssertEqual("en-GB, en-US", (msg.getProperty(set: .internetHeaders, name: "acceptlanguage") as String?)!)
        XCTAssertEqual([0xF5, 0x07, 0x00, 0x00, 0x62, 0xF2, 0x8E, 0xB5, 0xAB, 0x9A, 0xCC, 0xC3], [UInt8]((msg.getProperty(id: .unknown0x3014) as Data?)!))
        XCTAssertEqual("IPM.Note", msg.messageClass!)
        XCTAssertEqual(UUID(uuidString: "B712A46B-D2BB-42FD-8612-93C22F31BF8F"), msg.changeKey!.namespaceGuid)
        XCTAssertEqual([0x00, 0x00, 0x1A, 0xEC, 0xAB, 0x61], msg.changeKey!.localId)
        XCTAssertEqual(0, msg.reminderDelta!)
        XCTAssertEqual("EX", (msg.getProperty(id: .tagSenderAddressType) as String?)!)
        XCTAssertEqual("/o=Exchange/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=Chris.Wilson", (msg.getProperty(id: .tagCreatorEmailAddress) as String?)!)
        XCTAssertEqual(1252, msg.messageCodepage!)
        XCTAssertEqual(106851, (msg.getProperty(id: .unknown0x0E2F) as UInt32?)!)
        XCTAssertNotNil(msg.rtfCompressed)
        XCTAssertEqual("Wilson, Chris\u{00}", msg.displayTo!)
        XCTAssertEqual("HtmlSampleEmail", msg.conversationTopic!)
        XCTAssertEqual(1508744136.0, msg.lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual("04", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-organization-authmechanism") as String?)!)
        XCTAssertTrue(msg.trustSender!)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x43, 0x48, 0x52, 0x49, 0x53, 0x2E, 0x57, 0x49, 0x4C, 0x53, 0x4F, 0x4E, 0x00], [UInt8](msg.receivedBySearchKey!))
        XCTAssertEqual([.read, .unmodified, .fromMe], msg.messageFlags)
        XCTAssertEqual(0x01, msg.conversationIndex!.header.reserved)
        XCTAssertEqual(0xD3, msg.conversationIndex!.header.currentFileTime.0)
        XCTAssertEqual(0x4B, msg.conversationIndex!.header.currentFileTime.1)
        XCTAssertEqual(0xD0, msg.conversationIndex!.header.currentFileTime.2)
        XCTAssertEqual(0xDE, msg.conversationIndex!.header.currentFileTime.3)
        XCTAssertEqual(0xB6, msg.conversationIndex!.header.currentFileTime.4)
        XCTAssertEqual(UUID(uuidString: "3F62F427-2590-4595-8B00-68D1BB58684A"), msg.conversationIndex!.header.guid)
        XCTAssertEqual(0, msg.conversationIndex!.responseLevels.count)
        XCTAssertEqual(1, msg.predecessorChangeList!.values.count)
        XCTAssertEqual(UUID(uuidString: "B712A46B-D2BB-42FD-8612-93C22F31BF8F"), msg.predecessorChangeList!.values[0].namespaceGuid)
        XCTAssertEqual([0x00, 0x00, 0x1A, 0xEC, 0xAB, 0x61], msg.predecessorChangeList!.values[0].localId)
        XCTAssertEqual("Wilson, Chris", msg.lastModifierName!)
        XCTAssertTrue(msg.sendRichInfo!)
        XCTAssertEqual(0, (msg.getProperty(id: .tagReceivedRepresentingFlags) as UInt32?)!)
        XCTAssertEqual(1508743863.0, msg.clientSubmitTime!.timeIntervalSince1970)
        XCTAssertEqual(1508743863.0, msg.messageDeliveryTime!.timeIntervalSince1970)
        XCTAssertEqual("00000002\u{01}/o=Exchange/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=Chris.Wilson", msg.internetAccountStamp!)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON", msg.receivedRepresentingEmailAddress!)

        XCTAssertEqual(1, msg.recipients.count)
        XCTAssertEqual(0x00000000, (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/o=Exchange/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=Chris.Wilson\u{00}", (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x43, 0x48, 0x52, 0x49, 0x53, 0x2E, 0x57, 0x49, 0x4C, 0x53, 0x4F, 0x4E, 0x00], [UInt8](msg.recipients[0].searchKey!))
        XCTAssertEqual(0x00000000, (msg.recipients[0].entryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.recipients[0].entryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.recipients[0].entryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.recipients[0].entryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=Chris.Wilson\u{00}", (msg.recipients[0].entryId as? AddressBookEntryID)!.x500DN)
        XCTAssertTrue(msg.recipients[0].sendRichInfo!)
        XCTAssertEqual(0, msg.recipients[0].recipientOrder!)
        XCTAssertEqual("Chris.Wilson", msg.recipients[0].account!)
        XCTAssertEqual(0, (msg.recipients[0].getProperty(id: .tagRecipientResourceState) as UInt32?)!)
        XCTAssertEqual("Wilson, Chris", msg.recipients[0].recipientDisplayName!)
        XCTAssertEqual("Wilson, Chris", msg.recipients[0].transmittableDisplayName!)
        XCTAssertEqual(.primaryRecipient, msg.recipients[0].recipientType!)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=Chris.Wilson", msg.recipients[0].emailAddress!)
        XCTAssertEqual([0x00, 0x10, 0xE9, 0xFF], [UInt8](msg.recipients[0].instanceKey!))
        XCTAssertEqual(.none, msg.recipients[0].recipientTrackStatus!)
        XCTAssertEqual("Chris.Wilson@leeds.gov.uk", msg.recipients[0].smtpAddress!)
        XCTAssertEqual([0x8C, 0x19, 0x7D, 0x7D, 0xB6, 0x6D, 0x91, 0x49, 0x99, 0x59, 0xDE, 0x1B, 0xAC, 0xAB, 0x8E, 0x64], [UInt8]((msg.recipients[0].getProperty(id: .tagAbProviders) as Data?)!))
        XCTAssertEqual(.sendable, msg.recipients[0].recipientFlags!)
        XCTAssertTrue(msg.recipients[0].responsibility!)
        XCTAssertEqual(.mailUser, msg.recipients[0].objectType!)
        XCTAssertEqual("Wilson, Chris", msg.recipients[0].displayName!)
        XCTAssertEqual("EX", msg.recipients[0].addressType!)
        XCTAssertEqual(0, msg.recipients[0].rowid!)
        XCTAssertEqual([DisplayTypeEx(rawValue: 0x40000000)], msg.recipients[0].displayTypeEx)
        XCTAssertEqual("sip:chris.wilson@leeds.gov.uk", (msg.recipients[0].getProperty(id: .unknown0x5FE5) as String?)!)
        XCTAssertEqual(.mailUser, msg.recipients[0].displayType!)

        XCTAssertEqual(0, msg.attachments.count)
    }

    func testReadSicos19774() throws {
        let data = try getData(name: "Sicos1977/MSGReader/HtmlSampleEmailWithAttachment")
        let msg = try MsgFile(data: data)
        
        XCTAssertFalse(msg.agingDontAgeMe!)
        XCTAssertEqual(0x00000000, (msg.senderEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.senderEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.senderEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.senderEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON\u{00}", (msg.senderEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual(1508749622.0, msg.lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual([0x02, 0x00, 0x4B, 0x61, 0x73, 0x70, 0x72, 0x4C, 0x61, 0x62, 0xA6, 0xA4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [UInt8]((msg.getProperty(id: .unknown0x0E9D) as Data?)!))
        XCTAssertEqual("pifchu04.Leeds.gov.uk", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-organization-authsource") as String?)!)
        XCTAssertEqual(1252, msg.messageCodepage!)
        XCTAssertEqual(1508749524.0, msg.clientSubmitTime!.timeIntervalSince1970)
        XCTAssertTrue(msg.alternateRecipientAllowed!)
        XCTAssertEqual(1, msg.predecessorChangeList!.values.count)
        XCTAssertEqual(UUID(uuidString: "B712A46B-D2BB-42FD-8612-93C22F31BF8F"), msg.predecessorChangeList!.values[0].namespaceGuid)
        XCTAssertEqual([0x00, 0x00, 0x1A, 0xEC, 0xAC, 0x2E], msg.predecessorChangeList!.values[0].localId)
        XCTAssertEqual(.normal, msg.sensitivity!)
        XCTAssertEqual(106864, (msg.getProperty(id: .tagInternetArticleNumber) as UInt32?)!)
        XCTAssertEqual(.html, msg.messageEditorFormat!)
        XCTAssertEqual([0x1A, 0xD2, 0x54, 0x18, 0xA5, 0xD5, 0x78, 0x44, 0x91, 0x1A, 0xE4, 0x2C, 0x79, 0x8E, 0x1B, 0x92], [UInt8](msg.searchKey!))
        XCTAssertEqual(1508749622.0, msg.creationTime!.timeIntervalSince1970)
        XCTAssertEqual("Wilson, Chris", msg.lastModifierName!)
        XCTAssertEqual("HtmlSampleEmailWithAttachment", msg.conversationTopic!)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x43, 0x48, 0x52, 0x49, 0x53, 0x2E, 0x57, 0x49, 0x4C, 0x53, 0x4F, 0x4E, 0x00], [UInt8](msg.senderSearchKey!))
        XCTAssertEqual("sip:chris.wilson@leeds.gov.uk", (msg.getProperty(id: .unknown0x5FE5) as String?)!)
        XCTAssertEqual("", msg.subjectPrefix!)
        XCTAssertEqual("EX", msg.receivedRepresentingAddressType!)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON", msg.receivedByEmailAddress!)
        XCTAssertEqual("HtmlSampleEmailWithAttachment", msg.normalizedSubject!)
        XCTAssertEqual([.unmodified, .hasAttachment, .fromMe], msg.messageFlags)
        XCTAssertEqual(0, msg.reminderDelta!)
        XCTAssertEqual(0x00160000, msg.internetMailOverrideFormat!)
        XCTAssertEqual("Internal", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-organization-authas") as String?)!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.storeSupportMask)
        XCTAssertEqual(.notAssigned, msg.taskMode!)
        XCTAssertEqual("", msg.displayCc!)
        XCTAssertEqual(0x00000000, (msg.sentRepresentingEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.sentRepresentingEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.sentRepresentingEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.sentRepresentingEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON\u{00}", (msg.sentRepresentingEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertNotNil(msg.tnefCorrelationKey)
        XCTAssertEqual("/o=Exchange/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=Chris.Wilson", (msg.getProperty(id: .tagCreatorEmailAddress) as String?)!)
        XCTAssertEqual("EX", (msg.getProperty(id: .tagCreatorAddressType) as String?)!)
        XCTAssertEqual(0x00000000, (msg.lastModifierEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.lastModifierEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.lastModifierEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.lastModifierEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON\u{00}", (msg.lastModifierEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual("Wilson, Chris", msg.sentRepresentingName!)
        XCTAssertEqual("<6BA412B7BBD2FD42861293C22F31BF8F1AECAC13@pifmbx04.Leeds.gov.uk>", (msg.getProperty(id: .tagInternetMessageId) as String?)!)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON", msg.receivedRepresentingEmailAddress!)
        XCTAssertEqual("HtmlSampleEmailWithAttachment", msg.subject!)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON", msg.sentRepresentingEmailAddress!)
        XCTAssertEqual(0, (msg.getProperty(id: .tagSentRepresentingFlags) as UInt32?)!)
        XCTAssertFalse((msg.getProperty(set: .messaging, name: "IsReadReceipt") as Bool?)!)
        XCTAssertFalse(msg.readReceiptRequested!)
        XCTAssertEqual("", msg.displayBcc!)
        XCTAssertEqual(0, (msg.getProperty(id: .tagSenderFlags) as UInt32?)!)
        XCTAssertFalse((msg.getProperty(set: .messaging, name: "IsSigned") as Bool?)!)
        XCTAssertEqual("Wilson, Chris", (msg.getProperty(id: .tagSenderName) as String?)!)
        XCTAssertEqual(4294967295, msg.iconIndex!)
        XCTAssertEqual("scan successful", (msg.getProperty(set: .internetHeaders, name: "x-kse-antivirus-interceptor-info") as String?)!)
        XCTAssertNotNil(msg.rtfCompressed)
        XCTAssertEqual("Wilson, Chris", msg.receivedByName!)
        XCTAssertEqual("This is a sample HTML email with an attachment\r\n\r\n \r\n\r\n________________________________\r\n\r\nChris Wilson\r\nLead Developer, eServices\r\nCorporate ICT\r\nLeeds City Council \r\n\r\nTel: 0113 37 85294\r\nEmail: chris.wilson@leeds.gov.uk <https://webmail.leeds.gov.uk/owa/redir.aspx?SURL=lVbSQtOT9u5X5e6zSL35Ve0_WKwARwvE2ZMLgY582yqPdtmZJlrTCG0AYQBpAGwAdABvADoAYwBoAHIAaQBzAC4AdwBpAGwAcwBvAG4AQABsAGUAZQBkAHMALgBnAG8AdgAuAHUAawA.&URL=mailto%3achris.wilson%40leeds.gov.uk> \r\n\r\nwww.leeds.gov.uk <https://webmail.leeds.gov.uk/owa/redir.aspx?SURL=Av9fekN74GzyTqgJmaPeKtQwsNoMgwe5RQwOhMYgc_yPdtmZJlrTCGgAdAB0AHAAOgAvAC8AdwB3AHcALgBsAGUAZQBkAHMALgBnAG8AdgAuAHUAawAvAA..&URL=http%3a%2f%2fwww.leeds.gov.uk%2f> \r\n\r\n \r\n\r\n", msg.body!)
        XCTAssertEqual(2057, (msg.getProperty(set: .common, lid: 0x000085EB) as UInt32?)!)
        XCTAssertEqual("Wilson, Chris", msg.receivedRepresentingName!)
        XCTAssertEqual("[10.184.253.12]", (msg.getProperty(set: .internetHeaders, name: "x-originating-ip") as String?)!)
        XCTAssertEqual(.normal, msg.importance!)
        XCTAssertEqual(0x00000000, (msg.receivedByEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.receivedByEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.receivedByEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.receivedByEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON\u{00}", (msg.receivedByEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x43, 0x48, 0x52, 0x49, 0x53, 0x2E, 0x57, 0x49, 0x4C, 0x53, 0x4F, 0x4E, 0x00], [UInt8](msg.receivedBySearchKey!))
        XCTAssertEqual(0, (msg.getProperty(id: .tagReceivedByFlags) as UInt32?)!)
        XCTAssertEqual(1033, msg.messageLocaleId!)
        XCTAssertEqual(0x01, msg.conversationIndex!.header.reserved)
        XCTAssertEqual(0xD3, msg.conversationIndex!.header.currentFileTime.0)
        XCTAssertEqual(0x4B, msg.conversationIndex!.header.currentFileTime.1)
        XCTAssertEqual(0xDD, msg.conversationIndex!.header.currentFileTime.2)
        XCTAssertEqual(0xE8, msg.conversationIndex!.header.currentFileTime.3)
        XCTAssertEqual(0xAE, msg.conversationIndex!.header.currentFileTime.4)
        XCTAssertEqual(UUID(uuidString: "E5B589B0-CFE7-4409-BF6B-2C3CCD2D01C1"), msg.conversationIndex!.header.guid)
        XCTAssertEqual(0, msg.conversationIndex!.responseLevels.count)
        XCTAssertEqual(1508749525.0, msg.messageDeliveryTime!.timeIntervalSince1970)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x43, 0x48, 0x52, 0x49, 0x53, 0x2E, 0x57, 0x49, 0x4C, 0x53, 0x4F, 0x4E, 0x00], [UInt8](msg.sentRepresentingSearchKey!))
        XCTAssertEqual("00000002\u{01}/o=Exchange/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=Chris.Wilson", msg.internetAccountStamp!)
        XCTAssertEqual([], msg.sideEffects)
        XCTAssertEqual("Wilson, Chris\u{00}", msg.displayTo!)
        XCTAssertEqual([.read], msg.access)
        XCTAssertEqual(.readOnly, msg.accessLevel!)
        XCTAssertTrue(msg.sendRichInfo!)
        XCTAssertEqual("EX", msg.sentRepresentingAddressType!)
        XCTAssertTrue(msg.conversationIndexTracking!)
        XCTAssertTrue(msg.messageToMe!)
        XCTAssertEqual("EX", (msg.getProperty(id: .tagSenderAddressType) as String?)!)
        XCTAssertEqual("Chris.Wilson@leeds.gov.uk", msg.internetAccountName!)
        XCTAssertEqual(0, (msg.getProperty(id: .tagReceivedRepresentingFlags) as UInt32?)!)
        XCTAssertEqual([0x1A, 0x00, 0x00, 0x00, 0x88, 0xD9, 0x3D, 0xD4, 0xEA, 0x4E, 0x2B, 0x8C], [UInt8]((msg.getProperty(id: .unknown0x3014) as Data?)!))
        XCTAssertTrue(msg.hasAttachments!)
        XCTAssertFalse(msg.smartNoAttach!)
        XCTAssertEqual(UUID(uuidString: "B712A46B-D2BB-42FD-8612-93C22F31BF8F"), msg.changeKey!.namespaceGuid)
        XCTAssertEqual([0x00, 0x00, 0x1A, 0xEC, 0xAC, 0x2E], msg.changeKey!.localId)
        XCTAssertEqual("Chris.Wilson@leeds.gov.uk", msg.sentRepresentingSmtpAddress!)
        XCTAssertEqual("en-GB, en-US", (msg.getProperty(set: .internetHeaders, name: "acceptlanguage") as String?)!)
        XCTAssertFalse(msg.messageCcMe!)
        XCTAssertFalse(msg.`private`!)
        XCTAssertEqual("Chris.Wilson@leeds.gov.uk", (msg.getProperty(id: .tagSendingSmtpAddress) as String?)!)
        XCTAssertFalse(msg.originatorDeliveryReportRequested!)
        XCTAssertEqual(0x00000000, (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON\u{00}", (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual(20127, msg.internetCodepage!)
        XCTAssertEqual("EX", msg.receivedByAddressType!)
        XCTAssertEqual("BT=0;II=01D34BDDE8AEE5B589B0CFE74409BF6B2C3CCD2D01C1;FIXUP=0.7301;Version=Version 14.3 (Build 361.0), Stage=H4", (msg.getProperty(guid: UUID(uuidString: "33EBA41F-7AA8-422E-BE7B-79E1A98E54B3")!, name: "ConversationIndexTrackingEx") as String?)!)
        XCTAssertTrue(msg.trustSender!)
        XCTAssertTrue(msg.rtfInSync!)
        XCTAssertEqual(.normal, msg.priority!)
        XCTAssertEqual("IPM.Note", msg.messageClass!)
        XCTAssertEqual("Clean, bases: 23/10/2017 05:31:00", (msg.getProperty(set: .internetHeaders, name: "x-kse-antivirus-info") as String?)!)
        XCTAssertEqual(106864, (msg.getProperty(id: .unknown0x0E2F) as UInt32?)!)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x43, 0x48, 0x52, 0x49, 0x53, 0x2E, 0x57, 0x49, 0x4C, 0x53, 0x4F, 0x4E, 0x00], [UInt8](msg.receivedRepresentingSearchKey!))
        XCTAssertNotNil(msg.transportMessageHeaders)
        XCTAssertFalse(msg.reminderSet!)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON", msg.senderEmailAddress!)
        XCTAssertFalse(msg.useTnef!)
        XCTAssertEqual("Chris.Wilson@leeds.gov.uk", (msg.getProperty(id: .tagSenderSmtpAddress) as String?)!)
        XCTAssertEqual("04", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-organization-authmechanism") as String?)!)

        XCTAssertEqual(1, msg.recipients.count)
        XCTAssertTrue(msg.recipients[0].responsibility!)
        XCTAssertEqual(0, msg.recipients[0].rowid!)
        XCTAssertEqual([0x00, 0x10, 0xEE, 0xDB], [UInt8](msg.recipients[0].instanceKey!))
        XCTAssertEqual(.mailUser, msg.recipients[0].displayType!)
        XCTAssertEqual(.primaryRecipient, msg.recipients[0].recipientType!)
        XCTAssertEqual("EX", msg.recipients[0].addressType!)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=Chris.Wilson", msg.recipients[0].emailAddress!)
        XCTAssertEqual(0x00000000, (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/o=Exchange/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=Chris.Wilson\u{00}", (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual(.sendable, msg.recipients[0].recipientFlags!)
        XCTAssertEqual("Chris.Wilson@leeds.gov.uk", msg.recipients[0].smtpAddress!)
        XCTAssertEqual([DisplayTypeEx(rawValue: 0x40000000)], msg.recipients[0].displayTypeEx)
        XCTAssertEqual("sip:chris.wilson@leeds.gov.uk", (msg.recipients[0].getProperty(id: .unknown0x5FE5) as String?)!)
        XCTAssertEqual("Chris.Wilson", msg.recipients[0].account!)
        XCTAssertEqual("Wilson, Chris", msg.recipients[0].transmittableDisplayName!)
        XCTAssertEqual(0, (msg.recipients[0].getProperty(id: .tagRecipientResourceState) as UInt32?)!)
        XCTAssertEqual(.mailUser, msg.recipients[0].objectType!)
        XCTAssertEqual(0x00000000, (msg.recipients[0].entryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.recipients[0].entryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.recipients[0].entryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.recipients[0].entryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=Chris.Wilson\u{00}", (msg.recipients[0].entryId as? AddressBookEntryID)!.x500DN)
        XCTAssertTrue(msg.recipients[0].sendRichInfo!)
        XCTAssertEqual(.none, msg.recipients[0].recipientTrackStatus!)
        XCTAssertEqual("Wilson, Chris", msg.recipients[0].displayName!)
        XCTAssertEqual([0x8C, 0x19, 0x7D, 0x7D, 0xB6, 0x6D, 0x91, 0x49, 0x99, 0x59, 0xDE, 0x1B, 0xAC, 0xAB, 0x8E, 0x64], [UInt8]((msg.recipients[0].getProperty(id: .tagAbProviders) as Data?)!))
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x43, 0x48, 0x52, 0x49, 0x53, 0x2E, 0x57, 0x49, 0x4C, 0x53, 0x4F, 0x4E, 0x00], [UInt8](msg.recipients[0].searchKey!))
        XCTAssertEqual("Wilson, Chris", msg.recipients[0].recipientDisplayName!)
        XCTAssertEqual(0, msg.recipients[0].recipientOrder!)

        XCTAssertEqual(1, msg.attachments.count)
        XCTAssertEqual(1508749507.0, msg.attachments[0].creationTime!.timeIntervalSince1970)
        XCTAssertEqual([], msg.attachments[0].attachFlags)
        XCTAssertNotNil(msg.attachments[0].attachRendering)
        XCTAssertEqual("", (msg.attachments[0].getProperty(set: .attachment, name: "AttachmentOriginalUrl") as String?)!)
        XCTAssertEqual(0, msg.attachments[0].attachmentLinkId!)
        XCTAssertEqual([0x00, 0x00, 0x00, 0x00], [UInt8](msg.attachments[0].recordKey!))
        XCTAssertEqual(79870665600.0, msg.attachments[0].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual(4294967295, msg.attachments[0].renderingPosition!)
        XCTAssertEqual([.read], msg.attachments[0].access)
        XCTAssertEqual(79870665600.0, msg.attachments[0].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertNotNil(msg.attachments[0].attachDataBinary)
        XCTAssertEqual("SampleAttachment.pdf", msg.attachments[0].attachLongFilename!)
        XCTAssertEqual("Sample~1.pdf", msg.attachments[0].attachFilename!)
        XCTAssertFalse(msg.attachments[0].attachmentContactPhoto!)
        XCTAssertFalse(msg.attachments[0].attachmentHidden!)
        XCTAssertEqual("SampleAttachment.pdf", msg.attachments[0].displayName!)
        XCTAssertEqual(.byValue, msg.attachments[0].attachMethod!)
        XCTAssertEqual([], [UInt8](msg.attachments[0].attachEncoding!))
        XCTAssertEqual(0, msg.attachments[0].attachNumber!)
        XCTAssertEqual(0x00000000, msg.attachments[0].attachmentFlags!)
        XCTAssertEqual(.readOnly, msg.attachments[0].accessLevel!)
        XCTAssertEqual(".pdf", msg.attachments[0].attachExtension!)
        XCTAssertEqual([0x00, 0x00, 0x00, 0x00], [UInt8]((msg.attachments[0].getProperty(id: .unknown0x371D) as Data?)!))
        XCTAssertEqual(1508749507.0, msg.attachments[0].lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual(.attachment, msg.attachments[0].objectType!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[0].storeSupportMask)
    }

    func testReadSicos19775() throws {
        let data = try getData(name: "Sicos1977/MSGReader/RtfSampleEmail")
        let msg = try MsgFile(data: data)
        
        XCTAssertEqual([.read], msg.access)
        XCTAssertNotNil(msg.rtfCompressed)
        XCTAssertEqual("IPM.Note", msg.messageClass!)
        XCTAssertNotNil(msg.transportMessageHeaders)
        XCTAssertEqual("EX", msg.receivedRepresentingAddressType!)
        XCTAssertEqual(1508744136.0, msg.lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual(.notAssigned, msg.taskMode!)
        XCTAssertEqual("EX", msg.receivedByAddressType!)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON", msg.receivedByEmailAddress!)
        XCTAssertFalse(msg.useTnef!)
        XCTAssertEqual("Wilson, Chris", msg.sentRepresentingName!)
        XCTAssertEqual(.normal, msg.sensitivity!)
        XCTAssertEqual(0x00000000, (msg.senderEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.senderEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.senderEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.senderEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON\u{00}", (msg.senderEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual("Wilson, Chris", msg.receivedRepresentingName!)
        XCTAssertEqual(0, (msg.getProperty(id: .tagSenderFlags) as UInt32?)!)
        XCTAssertTrue(msg.conversationIndexTracking!)
        XCTAssertEqual("RtfSampleEmail", msg.normalizedSubject!)
        XCTAssertEqual("Wilson, Chris", (msg.getProperty(id: .tagSenderName) as String?)!)
        XCTAssertEqual("sip:chris.wilson@leeds.gov.uk", (msg.getProperty(id: .unknown0x5FE5) as String?)!)
        XCTAssertFalse(msg.readReceiptRequested!)
        XCTAssertEqual("/o=Exchange/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=Chris.Wilson", (msg.getProperty(id: .tagCreatorEmailAddress) as String?)!)
        XCTAssertTrue(msg.trustSender!)
        XCTAssertEqual("Wilson, Chris", msg.lastModifierName!)
        XCTAssertEqual("Chris.Wilson@leeds.gov.uk", (msg.getProperty(id: .tagSenderSmtpAddress) as String?)!)
        XCTAssertEqual(0x00000000, (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON\u{00}", (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertTrue(msg.rtfInSync!)
        XCTAssertEqual(2057, (msg.getProperty(set: .common, lid: 0x000085EB) as UInt32?)!)
        XCTAssertEqual("EX", msg.sentRepresentingAddressType!)
        XCTAssertFalse((msg.getProperty(set: .messaging, name: "IsSigned") as Bool?)!)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x43, 0x48, 0x52, 0x49, 0x53, 0x2E, 0x57, 0x49, 0x4C, 0x53, 0x4F, 0x4E, 0x00], [UInt8](msg.receivedBySearchKey!))
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x43, 0x48, 0x52, 0x49, 0x53, 0x2E, 0x57, 0x49, 0x4C, 0x53, 0x4F, 0x4E, 0x00], [UInt8](msg.receivedRepresentingSearchKey!))
        XCTAssertEqual(0x00000000, (msg.sentRepresentingEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.sentRepresentingEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.sentRepresentingEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.sentRepresentingEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON\u{00}", (msg.sentRepresentingEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual([], msg.sideEffects)
        XCTAssertEqual("00000002\u{01}/o=Exchange/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=Chris.Wilson", msg.internetAccountStamp!)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON", msg.receivedRepresentingEmailAddress!)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON", msg.sentRepresentingEmailAddress!)
        XCTAssertEqual("<6BA412B7BBD2FD42861293C22F31BF8F1AECAB67@pifmbx04.Leeds.gov.uk>", (msg.getProperty(id: .tagInternetMessageId) as String?)!)
        XCTAssertTrue(msg.alternateRecipientAllowed!)
        XCTAssertEqual(0x00000000, (msg.receivedByEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.receivedByEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.receivedByEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.receivedByEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON\u{00}", (msg.receivedByEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x43, 0x48, 0x52, 0x49, 0x53, 0x2E, 0x57, 0x49, 0x4C, 0x53, 0x4F, 0x4E, 0x00], [UInt8](msg.senderSearchKey!))
        XCTAssertEqual("Chris.Wilson@leeds.gov.uk", (msg.getProperty(id: .tagSendingSmtpAddress) as String?)!)
        XCTAssertEqual(0x00160000, msg.internetMailOverrideFormat!)
        XCTAssertEqual("pifchu02.Leeds.gov.uk", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-organization-authsource") as String?)!)
        XCTAssertEqual("BT=3;II=01D34BD0D6A0F94FEEB3EF5549B5AF9FA616B028595F;FIXUP=3.4516;Version=Version 14.3 (Build 361.0), Stage=H4", (msg.getProperty(guid: UUID(uuidString: "33EBA41F-7AA8-422E-BE7B-79E1A98E54B3")!, name: "ConversationIndexTrackingEx") as String?)!)
        XCTAssertEqual(.normal, msg.importance!)
        XCTAssertEqual("RtfSampleEmail", msg.conversationTopic!)
        XCTAssertFalse(msg.`private`!)
        XCTAssertEqual(.rtf, msg.messageEditorFormat!)
        XCTAssertEqual("", msg.displayCc!)
        XCTAssertEqual([0x02, 0x00, 0x4B, 0x61, 0x73, 0x70, 0x72, 0x4C, 0x61, 0x62, 0xA6, 0xA4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [UInt8]((msg.getProperty(id: .unknown0x0E9D) as Data?)!))
        XCTAssertFalse(msg.originatorDeliveryReportRequested!)
        XCTAssertNotNil(msg.body)
        XCTAssertFalse((msg.getProperty(set: .messaging, name: "IsReadReceipt") as Bool?)!)
        XCTAssertEqual("Chris.Wilson@leeds.gov.uk", msg.sentRepresentingSmtpAddress!)
        XCTAssertFalse(msg.agingDontAgeMe!)
        XCTAssertEqual("scan successful", (msg.getProperty(set: .internetHeaders, name: "x-kse-antivirus-interceptor-info") as String?)!)
        XCTAssertFalse(msg.messageCcMe!)
        XCTAssertEqual([0xF5, 0x07, 0x00, 0x00, 0x62, 0xF2, 0x8E, 0xB5, 0xBB, 0x9A, 0xCC, 0xD1], [UInt8]((msg.getProperty(id: .unknown0x3014) as Data?)!))
        XCTAssertEqual([0xF6, 0x88, 0x45, 0x38, 0x4E, 0x82, 0x22, 0x44, 0xA8, 0xDD, 0xF7, 0x33, 0x45, 0xEC, 0x11, 0x4F], [UInt8](msg.searchKey!))
        XCTAssertEqual(0x00000000, (msg.lastModifierEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.lastModifierEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.lastModifierEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.lastModifierEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON\u{00}", (msg.lastModifierEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual("Wilson, Chris", msg.receivedByName!)
        XCTAssertEqual(1252, msg.messageCodepage!)
        XCTAssertFalse(msg.reminderSet!)
        XCTAssertEqual("EX", (msg.getProperty(id: .tagSenderAddressType) as String?)!)
        XCTAssertEqual("EX", (msg.getProperty(id: .tagCreatorAddressType) as String?)!)
        XCTAssertEqual("04", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-organization-authmechanism") as String?)!)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x43, 0x48, 0x52, 0x49, 0x53, 0x2E, 0x57, 0x49, 0x4C, 0x53, 0x4F, 0x4E, 0x00], [UInt8](msg.sentRepresentingSearchKey!))
        XCTAssertEqual("Chris.Wilson@leeds.gov.uk", msg.internetAccountName!)
        XCTAssertEqual(1508744136.0, msg.creationTime!.timeIntervalSince1970)
        XCTAssertEqual("[10.184.253.12]", (msg.getProperty(set: .internetHeaders, name: "x-originating-ip") as String?)!)
        XCTAssertEqual("", msg.subjectPrefix!)
        XCTAssertEqual("", msg.displayBcc!)
        XCTAssertEqual(106852, (msg.getProperty(id: .unknown0x0E2F) as UInt32?)!)
        XCTAssertEqual(28591, msg.internetCodepage!)
        XCTAssertEqual(4294967295, msg.iconIndex!)
        XCTAssertEqual(0, msg.reminderDelta!)
        XCTAssertEqual(1, msg.predecessorChangeList!.values.count)
        XCTAssertEqual(UUID(uuidString: "B712A46B-D2BB-42FD-8612-93C22F31BF8F"), msg.predecessorChangeList!.values[0].namespaceGuid)
        XCTAssertEqual([0x00, 0x00, 0x1A, 0xEC, 0xAB, 0x71], msg.predecessorChangeList!.values[0].localId)
        XCTAssertEqual(UUID(uuidString: "B712A46B-D2BB-42FD-8612-93C22F31BF8F"), msg.changeKey!.namespaceGuid)
        XCTAssertEqual([0x00, 0x00, 0x1A, 0xEC, 0xAB, 0x71], msg.changeKey!.localId)
        XCTAssertEqual(0, (msg.getProperty(id: .tagReceivedRepresentingFlags) as UInt32?)!)
        XCTAssertTrue(msg.messageToMe!)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON", msg.senderEmailAddress!)
        XCTAssertEqual(.normal, msg.priority!)
        XCTAssertEqual("RtfSampleEmail", msg.subject!)
        XCTAssertEqual("en-GB, en-US", (msg.getProperty(set: .internetHeaders, name: "acceptlanguage") as String?)!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.storeSupportMask)
        XCTAssertEqual(.readOnly, msg.accessLevel!)
        XCTAssertEqual(1508743869.0, msg.clientSubmitTime!.timeIntervalSince1970)
        XCTAssertEqual(1508743869.0, msg.messageDeliveryTime!.timeIntervalSince1970)
        XCTAssertNotNil(msg.tnefCorrelationKey)
        XCTAssertEqual([.read, .unmodified, .fromMe], msg.messageFlags)
        XCTAssertEqual("Internal", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-organization-authas") as String?)!)
        XCTAssertEqual("Wilson, Chris\u{00}", msg.displayTo!)
        XCTAssertTrue(msg.sendRichInfo!)
        XCTAssertEqual(0, (msg.getProperty(id: .tagSentRepresentingFlags) as UInt32?)!)
        XCTAssertEqual(106852, (msg.getProperty(id: .tagInternetArticleNumber) as UInt32?)!)
        XCTAssertEqual(1033, msg.messageLocaleId!)
        XCTAssertEqual(0x01, msg.conversationIndex!.header.reserved)
        XCTAssertEqual(0xD3, msg.conversationIndex!.header.currentFileTime.0)
        XCTAssertEqual(0x4B, msg.conversationIndex!.header.currentFileTime.1)
        XCTAssertEqual(0xD0, msg.conversationIndex!.header.currentFileTime.2)
        XCTAssertEqual(0xD6, msg.conversationIndex!.header.currentFileTime.3)
        XCTAssertEqual(0xA0, msg.conversationIndex!.header.currentFileTime.4)
        XCTAssertEqual(UUID(uuidString: "F94FEEB3-EF55-49B5-AF9F-A616B028595F"), msg.conversationIndex!.header.guid)
        XCTAssertEqual(0, msg.conversationIndex!.responseLevels.count)
        XCTAssertEqual(0, (msg.getProperty(id: .tagReceivedByFlags) as UInt32?)!)
        XCTAssertEqual("Clean, bases: 23/10/2017 05:31:00", (msg.getProperty(set: .internetHeaders, name: "x-kse-antivirus-info") as String?)!)

        XCTAssertEqual(1, msg.recipients.count)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x43, 0x48, 0x52, 0x49, 0x53, 0x2E, 0x57, 0x49, 0x4C, 0x53, 0x4F, 0x4E, 0x00], [UInt8](msg.recipients[0].searchKey!))
        XCTAssertEqual(0x00000000, (msg.recipients[0].entryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.recipients[0].entryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.recipients[0].entryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.recipients[0].entryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=Chris.Wilson\u{00}", (msg.recipients[0].entryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual(.mailUser, msg.recipients[0].displayType!)
        XCTAssertEqual(.none, msg.recipients[0].recipientTrackStatus!)
        XCTAssertEqual("Chris.Wilson", msg.recipients[0].account!)
        XCTAssertTrue(msg.recipients[0].sendRichInfo!)
        XCTAssertEqual("Chris.Wilson@leeds.gov.uk", msg.recipients[0].smtpAddress!)
        XCTAssertTrue(msg.recipients[0].responsibility!)
        XCTAssertEqual(0, msg.recipients[0].recipientOrder!)
        XCTAssertEqual("Wilson, Chris", msg.recipients[0].displayName!)
        XCTAssertEqual([0x8C, 0x19, 0x7D, 0x7D, 0xB6, 0x6D, 0x91, 0x49, 0x99, 0x59, 0xDE, 0x1B, 0xAC, 0xAB, 0x8E, 0x64], [UInt8]((msg.recipients[0].getProperty(id: .tagAbProviders) as Data?)!))
        XCTAssertEqual(.mailUser, msg.recipients[0].objectType!)
        XCTAssertEqual(.sendable, msg.recipients[0].recipientFlags!)
        XCTAssertEqual("Wilson, Chris", msg.recipients[0].recipientDisplayName!)
        XCTAssertEqual([0x00, 0x10, 0xEA, 0x3F], [UInt8](msg.recipients[0].instanceKey!))
        XCTAssertEqual(0, (msg.recipients[0].getProperty(id: .tagRecipientResourceState) as UInt32?)!)
        XCTAssertEqual("EX", msg.recipients[0].addressType!)
        XCTAssertEqual(0x00000000, (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/o=Exchange/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=Chris.Wilson\u{00}", (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual("Wilson, Chris", msg.recipients[0].transmittableDisplayName!)
        XCTAssertEqual([DisplayTypeEx(rawValue: 0x40000000)], msg.recipients[0].displayTypeEx)
        XCTAssertEqual("sip:chris.wilson@leeds.gov.uk", (msg.recipients[0].getProperty(id: .unknown0x5FE5) as String?)!)
        XCTAssertEqual(.primaryRecipient, msg.recipients[0].recipientType!)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=Chris.Wilson", msg.recipients[0].emailAddress!)
        XCTAssertEqual(0, msg.recipients[0].rowid!)

        XCTAssertEqual(0, msg.attachments.count)
    }

    func testReadSicos19776() throws {
        let data = try getData(name: "Sicos1977/MSGReader/RtfSampleEmailWithAttachment")
        let msg = try MsgFile(data: data)
        
        XCTAssertTrue(msg.hasAttachments!)
        XCTAssertEqual(106862, (msg.getProperty(id: .unknown0x0E2F) as UInt32?)!)
        XCTAssertEqual(.normal, msg.importance!)
        XCTAssertEqual("04", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-organization-authmechanism") as String?)!)
        XCTAssertEqual("Chris.Wilson@leeds.gov.uk", (msg.getProperty(id: .tagSenderSmtpAddress) as String?)!)
        XCTAssertEqual(1508749623.0, msg.lastModificationTime!.timeIntervalSince1970)
        XCTAssertTrue(msg.trustSender!)
        XCTAssertEqual(0x00000000, (msg.receivedByEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.receivedByEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.receivedByEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.receivedByEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON\u{00}", (msg.receivedByEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual("Wilson, Chris", msg.receivedByName!)
        XCTAssertEqual(0, (msg.getProperty(id: .tagSenderFlags) as UInt32?)!)
        XCTAssertEqual("Chris.Wilson@leeds.gov.uk", (msg.getProperty(id: .tagSendingSmtpAddress) as String?)!)
        XCTAssertFalse(msg.agingDontAgeMe!)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x43, 0x48, 0x52, 0x49, 0x53, 0x2E, 0x57, 0x49, 0x4C, 0x53, 0x4F, 0x4E, 0x00], [UInt8](msg.senderSearchKey!))
        XCTAssertEqual(.rtf, msg.messageEditorFormat!)
        XCTAssertEqual("Chris.Wilson@leeds.gov.uk", msg.internetAccountName!)
        XCTAssertEqual(0x01, msg.conversationIndex!.header.reserved)
        XCTAssertEqual(0xD3, msg.conversationIndex!.header.currentFileTime.0)
        XCTAssertEqual(0x4B, msg.conversationIndex!.header.currentFileTime.1)
        XCTAssertEqual(0xDD, msg.conversationIndex!.header.currentFileTime.2)
        XCTAssertEqual(0xF8, msg.conversationIndex!.header.currentFileTime.3)
        XCTAssertEqual(0x28, msg.conversationIndex!.header.currentFileTime.4)
        XCTAssertEqual(UUID(uuidString: "55E92191-88D1-4BED-AEFF-67D99F48F800"), msg.conversationIndex!.header.guid)
        XCTAssertEqual(0, msg.conversationIndex!.responseLevels.count)
        XCTAssertEqual(.readOnly, msg.accessLevel!)
        XCTAssertEqual(0, (msg.getProperty(id: .tagReceivedByFlags) as UInt32?)!)
        XCTAssertEqual(1033, msg.messageLocaleId!)
        XCTAssertFalse(msg.useTnef!)
        XCTAssertEqual("", msg.subjectPrefix!)
        XCTAssertNotNil(msg.transportMessageHeaders)
        XCTAssertTrue(msg.messageToMe!)
        XCTAssertEqual(1252, msg.messageCodepage!)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON", msg.receivedByEmailAddress!)
        XCTAssertEqual([0x02, 0x00, 0x4B, 0x61, 0x73, 0x70, 0x72, 0x4C, 0x61, 0x62, 0xA6, 0xA4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [UInt8]((msg.getProperty(id: .unknown0x0E9D) as Data?)!))
        XCTAssertEqual("Wilson, Chris", msg.receivedRepresentingName!)
        XCTAssertEqual("RtfSampleEmailWithAttachment", msg.subject!)
        XCTAssertEqual(.notAssigned, msg.taskMode!)
        XCTAssertFalse(msg.readReceiptRequested!)
        XCTAssertEqual(0, (msg.getProperty(id: .tagSentRepresentingFlags) as UInt32?)!)
        XCTAssertEqual(.normal, msg.priority!)
        XCTAssertEqual("RtfSampleEmailWithAttachment", msg.conversationTopic!)
        XCTAssertFalse(msg.reminderSet!)
        XCTAssertEqual("EX", msg.receivedByAddressType!)
        XCTAssertEqual("en-GB, en-US", (msg.getProperty(set: .internetHeaders, name: "acceptlanguage") as String?)!)
        XCTAssertEqual(0x00000000, (msg.lastModifierEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.lastModifierEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.lastModifierEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.lastModifierEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON\u{00}", (msg.lastModifierEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual("sip:chris.wilson@leeds.gov.uk", (msg.getProperty(id: .unknown0x5FE5) as String?)!)
        XCTAssertEqual("Wilson, Chris", (msg.getProperty(id: .tagSenderName) as String?)!)
        XCTAssertNotNil(msg.rtfCompressed)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x43, 0x48, 0x52, 0x49, 0x53, 0x2E, 0x57, 0x49, 0x4C, 0x53, 0x4F, 0x4E, 0x00], [UInt8](msg.receivedBySearchKey!))
        XCTAssertEqual(20127, msg.internetCodepage!)
        XCTAssertTrue(msg.sendRichInfo!)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON", msg.senderEmailAddress!)
        XCTAssertNotNil(msg.tnefCorrelationKey)
        XCTAssertEqual([0x1A, 0x00, 0x00, 0x00, 0x2C, 0xD8, 0x8D, 0x14, 0xFB, 0x4E, 0x2B, 0x9E], [UInt8]((msg.getProperty(id: .unknown0x3014) as Data?)!))
        XCTAssertEqual("Wilson, Chris", msg.sentRepresentingName!)
        XCTAssertEqual("EX", msg.receivedRepresentingAddressType!)
        XCTAssertEqual("Clean, bases: 23/10/2017 05:31:00", (msg.getProperty(set: .internetHeaders, name: "x-kse-antivirus-info") as String?)!)
        XCTAssertEqual(1508749523.0, msg.messageDeliveryTime!.timeIntervalSince1970)
        XCTAssertEqual(2057, (msg.getProperty(set: .common, lid: 0x000085EB) as UInt32?)!)
        XCTAssertEqual([0xAC, 0x83, 0x99, 0x71, 0x28, 0x62, 0xC5, 0x4E, 0x9F, 0x4E, 0x2A, 0xDB, 0x27, 0xE2, 0x44, 0x87], [UInt8](msg.searchKey!))
        XCTAssertEqual("/o=Exchange/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=Chris.Wilson", (msg.getProperty(id: .tagCreatorEmailAddress) as String?)!)
        XCTAssertEqual("RtfSampleEmailWithAttachment", msg.normalizedSubject!)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON", msg.sentRepresentingEmailAddress!)
        XCTAssertFalse(msg.messageCcMe!)
        XCTAssertFalse(msg.originatorDeliveryReportRequested!)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON", msg.receivedRepresentingEmailAddress!)
        XCTAssertEqual(1, msg.predecessorChangeList!.values.count)
        XCTAssertEqual(UUID(uuidString: "B712A46B-D2BB-42FD-8612-93C22F31BF8F"), msg.predecessorChangeList!.values[0].namespaceGuid)
        XCTAssertEqual([0x00, 0x00, 0x1A, 0xEC, 0xAC, 0x10], msg.predecessorChangeList!.values[0].localId)
        XCTAssertFalse(msg.`private`!)
        XCTAssertEqual(0, msg.reminderDelta!)
        XCTAssertEqual(0x00000000, (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON\u{00}", (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual([.read], msg.access)
        XCTAssertEqual("", msg.displayCc!)
        XCTAssertEqual(4294967295, msg.iconIndex!)
        XCTAssertEqual("EX", msg.sentRepresentingAddressType!)
        XCTAssertEqual("scan successful", (msg.getProperty(set: .internetHeaders, name: "x-kse-antivirus-interceptor-info") as String?)!)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x43, 0x48, 0x52, 0x49, 0x53, 0x2E, 0x57, 0x49, 0x4C, 0x53, 0x4F, 0x4E, 0x00], [UInt8](msg.receivedRepresentingSearchKey!))
        XCTAssertEqual(.normal, msg.sensitivity!)
        XCTAssertEqual("EX", (msg.getProperty(id: .tagSenderAddressType) as String?)!)
        XCTAssertEqual(0x00160000, msg.internetMailOverrideFormat!)
        XCTAssertEqual("Wilson, Chris\u{00}", msg.displayTo!)
        XCTAssertEqual("", msg.displayBcc!)
        XCTAssertEqual("Wilson, Chris", msg.lastModifierName!)
        XCTAssertEqual("BT=0;II=01D34BDDF82855E9219188D14BEDAEFF67D99F48F800;FIXUP=0.9046;Version=Version 14.3 (Build 361.0), Stage=H4", (msg.getProperty(guid: UUID(uuidString: "33EBA41F-7AA8-422E-BE7B-79E1A98E54B3")!, name: "ConversationIndexTrackingEx") as String?)!)
        XCTAssertEqual("pifchu03.Leeds.gov.uk", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-organization-authsource") as String?)!)
        XCTAssertEqual("IPM.Note", msg.messageClass!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.storeSupportMask)
        XCTAssertEqual(0, (msg.getProperty(id: .tagReceivedRepresentingFlags) as UInt32?)!)
        XCTAssertTrue(msg.conversationIndexTracking!)
        XCTAssertFalse(msg.smartNoAttach!)
        XCTAssertFalse((msg.getProperty(set: .messaging, name: "IsReadReceipt") as Bool?)!)
        XCTAssertEqual([], msg.sideEffects)
        XCTAssertTrue(msg.alternateRecipientAllowed!)
        XCTAssertEqual("[10.184.253.12]", (msg.getProperty(set: .internetHeaders, name: "x-originating-ip") as String?)!)
        XCTAssertEqual("EX", (msg.getProperty(id: .tagCreatorAddressType) as String?)!)
        XCTAssertEqual(UUID(uuidString: "B712A46B-D2BB-42FD-8612-93C22F31BF8F"), msg.changeKey!.namespaceGuid)
        XCTAssertEqual([0x00, 0x00, 0x1A, 0xEC, 0xAC, 0x10], msg.changeKey!.localId)
        XCTAssertEqual("<6BA412B7BBD2FD42861293C22F31BF8F1AECABFB@pifmbx04.Leeds.gov.uk>", (msg.getProperty(id: .tagInternetMessageId) as String?)!)
        XCTAssertEqual("This is a sample RTF email with an attachment \r\n\r\n________________________________\r\nChris Wilson\r\nLead Developer, eServices\r\nCorporate ICT\r\nLeeds City Council \r\nTel: 0113 37 85294\r\nEmail: chris.wilson@leeds.gov.uk <https://webmail.leeds.gov.uk/owa/redir.aspx?SURL=lVbSQtOT9u5X5e6zSL35Ve0_WKwARwvE2ZMLgY582yqPdtmZJlrTCG0AYQBpAGwAdABvADoAYwBoAHIAaQBzAC4AdwBpAGwAcwBvAG4AQABsAGUAZQBkAHMALgBnAG8AdgAuAHUAawA.&URL=mailto%3achris.wilson%40leeds.gov.uk> \r\nwww.leeds.gov.uk <https://webmail.leeds.gov.uk/owa/redir.aspx?SURL=Av9fekN74GzyTqgJmaPeKtQwsNoMgwe5RQwOhMYgc_yPdtmZJlrTCGgAdAB0AHAAOgAvAC8AdwB3AHcALgBsAGUAZQBkAHMALgBnAG8AdgAuAHUAawAvAA..&URL=http%3a%2f%2fwww.leeds.gov.uk%2f> \r\n\r\n", msg.body!)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x43, 0x48, 0x52, 0x49, 0x53, 0x2E, 0x57, 0x49, 0x4C, 0x53, 0x4F, 0x4E, 0x00], [UInt8](msg.sentRepresentingSearchKey!))
        XCTAssertEqual(0x00000000, (msg.sentRepresentingEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.sentRepresentingEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.sentRepresentingEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.sentRepresentingEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON\u{00}", (msg.sentRepresentingEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual(1508749623.0, msg.creationTime!.timeIntervalSince1970)
        XCTAssertEqual(1508749521.0, msg.clientSubmitTime!.timeIntervalSince1970)
        XCTAssertEqual(0x00000000, (msg.senderEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.senderEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.senderEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.senderEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON\u{00}", (msg.senderEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual("Internal", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-organization-authas") as String?)!)
        XCTAssertEqual("Chris.Wilson@leeds.gov.uk", msg.sentRepresentingSmtpAddress!)
        XCTAssertFalse((msg.getProperty(set: .messaging, name: "IsSigned") as Bool?)!)
        XCTAssertTrue(msg.rtfInSync!)
        XCTAssertEqual(106862, (msg.getProperty(id: .tagInternetArticleNumber) as UInt32?)!)
        XCTAssertEqual([.unmodified, .hasAttachment, .fromMe], msg.messageFlags)
        XCTAssertEqual("00000002\u{01}/o=Exchange/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=Chris.Wilson", msg.internetAccountStamp!)

        XCTAssertEqual(1, msg.recipients.count)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=Chris.Wilson", msg.recipients[0].emailAddress!)
        XCTAssertTrue(msg.recipients[0].responsibility!)
        XCTAssertEqual("sip:chris.wilson@leeds.gov.uk", (msg.recipients[0].getProperty(id: .unknown0x5FE5) as String?)!)
        XCTAssertEqual(0x00000000, (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/o=Exchange/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=Chris.Wilson\u{00}", (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual(.mailUser, msg.recipients[0].displayType!)
        XCTAssertEqual(.sendable, msg.recipients[0].recipientFlags!)
        XCTAssertEqual(.none, msg.recipients[0].recipientTrackStatus!)
        XCTAssertEqual(0x00000000, (msg.recipients[0].entryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.recipients[0].entryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.recipients[0].entryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.recipients[0].entryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=Chris.Wilson\u{00}", (msg.recipients[0].entryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual("Chris.Wilson", msg.recipients[0].account!)
        XCTAssertEqual([DisplayTypeEx(rawValue: 0x40000000)], msg.recipients[0].displayTypeEx)
        XCTAssertEqual(.mailUser, msg.recipients[0].objectType!)
        XCTAssertEqual(0, msg.recipients[0].rowid!)
        XCTAssertEqual("Wilson, Chris", msg.recipients[0].displayName!)
        XCTAssertTrue(msg.recipients[0].sendRichInfo!)
        XCTAssertEqual(.primaryRecipient, msg.recipients[0].recipientType!)
        XCTAssertEqual("EX", msg.recipients[0].addressType!)
        XCTAssertEqual([0x8C, 0x19, 0x7D, 0x7D, 0xB6, 0x6D, 0x91, 0x49, 0x99, 0x59, 0xDE, 0x1B, 0xAC, 0xAB, 0x8E, 0x64], [UInt8]((msg.recipients[0].getProperty(id: .tagAbProviders) as Data?)!))
        XCTAssertEqual("Wilson, Chris", msg.recipients[0].recipientDisplayName!)
        XCTAssertEqual([0x00, 0x10, 0xEE, 0xAC], [UInt8](msg.recipients[0].instanceKey!))
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x43, 0x48, 0x52, 0x49, 0x53, 0x2E, 0x57, 0x49, 0x4C, 0x53, 0x4F, 0x4E, 0x00], [UInt8](msg.recipients[0].searchKey!))
        XCTAssertEqual(0, msg.recipients[0].recipientOrder!)
        XCTAssertEqual("Chris.Wilson@leeds.gov.uk", msg.recipients[0].smtpAddress!)
        XCTAssertEqual("Wilson, Chris", msg.recipients[0].transmittableDisplayName!)
        XCTAssertEqual(0, (msg.recipients[0].getProperty(id: .tagRecipientResourceState) as UInt32?)!)

        XCTAssertEqual(1, msg.attachments.count)
        XCTAssertEqual([.read], msg.attachments[0].access)
        XCTAssertEqual([0x00, 0x00, 0x00, 0x00], [UInt8]((msg.attachments[0].getProperty(id: .unknown0x371D) as Data?)!))
        XCTAssertEqual(".pdf", msg.attachments[0].attachExtension!)
        XCTAssertEqual(0, msg.attachments[0].attachNumber!)
        XCTAssertEqual("", (msg.attachments[0].getProperty(set: .attachment, name: "AttachmentOriginalUrl") as String?)!)
        XCTAssertEqual(1508749515.0, msg.attachments[0].lastModificationTime!.timeIntervalSince1970)
        XCTAssertNotNil(msg.attachments[0].attachDataBinary)
        XCTAssertEqual("SampleAttachment.pdf", msg.attachments[0].displayName!)
        XCTAssertEqual(0, msg.attachments[0].attachmentLinkId!)
        XCTAssertFalse(msg.attachments[0].attachmentHidden!)
        XCTAssertEqual(.byValue, msg.attachments[0].attachMethod!)
        XCTAssertEqual(1508749515.0, msg.attachments[0].creationTime!.timeIntervalSince1970)
        XCTAssertEqual([], msg.attachments[0].attachFlags)
        XCTAssertEqual(.attachment, msg.attachments[0].objectType!)
        XCTAssertEqual("Sample~1.pdf", msg.attachments[0].attachFilename!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[0].storeSupportMask)
        XCTAssertFalse(msg.attachments[0].attachmentContactPhoto!)
        XCTAssertEqual(79870665600.0, msg.attachments[0].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertNotNil(msg.attachments[0].attachRendering)
        XCTAssertEqual(45, msg.attachments[0].renderingPosition!)
        XCTAssertEqual([0x00, 0x00, 0x00, 0x00], [UInt8](msg.attachments[0].recordKey!))
        XCTAssertEqual([], [UInt8](msg.attachments[0].attachEncoding!))
        XCTAssertEqual(0x00000000, msg.attachments[0].attachmentFlags!)
        XCTAssertEqual(79870665600.0, msg.attachments[0].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual("SampleAttachment.pdf", msg.attachments[0].attachLongFilename!)
        XCTAssertEqual(.readOnly, msg.attachments[0].accessLevel!)
    }

    func testReadSicos19777() throws {
        let data = try getData(name: "Sicos1977/MSGReader/TxtSampleEmail")
        let msg = try MsgFile(data: data)
        
        XCTAssertEqual("EX", (msg.getProperty(id: .tagSenderAddressType) as String?)!)
        XCTAssertEqual("Wilson, Chris", msg.receivedByName!)
        XCTAssertEqual(.normal, msg.sensitivity!)
        XCTAssertEqual("Chris.Wilson@leeds.gov.uk", msg.internetAccountName!)
        XCTAssertEqual(.readOnly, msg.accessLevel!)
        XCTAssertEqual("BT=3;II=01D34BD0E53941106FB80C804CBC8F19A779D168848A;FIXUP=3.486;Version=Version 14.3 (Build 361.0), Stage=H4", (msg.getProperty(guid: UUID(uuidString: "33EBA41F-7AA8-422E-BE7B-79E1A98E54B3")!, name: "ConversationIndexTrackingEx") as String?)!)
        XCTAssertFalse((msg.getProperty(set: .messaging, name: "IsSigned") as Bool?)!)
        XCTAssertEqual("EX", msg.receivedRepresentingAddressType!)
        XCTAssertEqual(1508744136.0, msg.lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual(0x00000000, (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON\u{00}", (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual(.plainText, msg.messageEditorFormat!)
        XCTAssertEqual("TxtSampleEmail", msg.normalizedSubject!)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON", msg.senderEmailAddress!)
        XCTAssertEqual(1252, msg.messageCodepage!)
        XCTAssertEqual(4294967295, msg.iconIndex!)
        XCTAssertEqual(1, msg.predecessorChangeList!.values.count)
        XCTAssertEqual(UUID(uuidString: "B712A46B-D2BB-42FD-8612-93C22F31BF8F"), msg.predecessorChangeList!.values[0].namespaceGuid)
        XCTAssertEqual([0x00, 0x00, 0x1A, 0xEC, 0xAB, 0x81], msg.predecessorChangeList!.values[0].localId)
        XCTAssertTrue(msg.messageToMe!)
        XCTAssertNotNil(msg.tnefCorrelationKey)
        XCTAssertEqual(0, (msg.getProperty(id: .tagSentRepresentingFlags) as UInt32?)!)
        XCTAssertTrue(msg.sendRichInfo!)
        XCTAssertEqual("04", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-organization-authmechanism") as String?)!)
        XCTAssertEqual("en-GB, en-US", (msg.getProperty(set: .internetHeaders, name: "acceptlanguage") as String?)!)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x43, 0x48, 0x52, 0x49, 0x53, 0x2E, 0x57, 0x49, 0x4C, 0x53, 0x4F, 0x4E, 0x00], [UInt8](msg.senderSearchKey!))
        XCTAssertEqual(.normal, msg.importance!)
        XCTAssertEqual("Wilson, Chris", (msg.getProperty(id: .tagSenderName) as String?)!)
        XCTAssertEqual("Wilson, Chris", msg.lastModifierName!)
        XCTAssertEqual(0x00000000, (msg.lastModifierEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.lastModifierEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.lastModifierEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.lastModifierEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON\u{00}", (msg.lastModifierEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual([0x18, 0x08, 0x00, 0x00, 0x92, 0x0E, 0x89, 0x2F, 0x42, 0x00, 0x00, 0x00], [UInt8]((msg.getProperty(id: .unknown0x3014) as Data?)!))
        XCTAssertFalse(msg.`private`!)
        XCTAssertEqual("Wilson, Chris\u{00}", msg.displayTo!)
        XCTAssertEqual(0x01, msg.conversationIndex!.header.reserved)
        XCTAssertEqual(0xD3, msg.conversationIndex!.header.currentFileTime.0)
        XCTAssertEqual(0x4B, msg.conversationIndex!.header.currentFileTime.1)
        XCTAssertEqual(0xD0, msg.conversationIndex!.header.currentFileTime.2)
        XCTAssertEqual(0xE5, msg.conversationIndex!.header.currentFileTime.3)
        XCTAssertEqual(0x39, msg.conversationIndex!.header.currentFileTime.4)
        XCTAssertEqual(UUID(uuidString: "41106FB8-0C80-4CBC-8F19-A779D168848A"), msg.conversationIndex!.header.guid)
        XCTAssertEqual(0, msg.conversationIndex!.responseLevels.count)
        XCTAssertEqual("Chris.Wilson@leeds.gov.uk", (msg.getProperty(id: .tagSenderSmtpAddress) as String?)!)
        XCTAssertEqual("EX", (msg.getProperty(id: .tagCreatorAddressType) as String?)!)
        XCTAssertEqual(0, (msg.getProperty(id: .tagReceivedByFlags) as UInt32?)!)
        XCTAssertEqual(2057, (msg.getProperty(set: .common, lid: 0x000085EB) as UInt32?)!)
        XCTAssertEqual("TxtSampleEmail", msg.subject!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.storeSupportMask)
        XCTAssertEqual("IPM.Note", msg.messageClass!)
        XCTAssertEqual("Clean, bases: 23/10/2017 05:31:00", (msg.getProperty(set: .internetHeaders, name: "x-kse-antivirus-info") as String?)!)
        XCTAssertEqual(1508743888.0, msg.messageDeliveryTime!.timeIntervalSince1970)
        XCTAssertFalse(msg.useTnef!)
        XCTAssertEqual(0, (msg.getProperty(id: .tagReceivedRepresentingFlags) as UInt32?)!)
        XCTAssertEqual(1508743887.0, msg.clientSubmitTime!.timeIntervalSince1970)
        XCTAssertTrue(msg.alternateRecipientAllowed!)
        XCTAssertEqual("", msg.displayBcc!)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON", msg.sentRepresentingEmailAddress!)
        XCTAssertNotNil(msg.rtfCompressed)
        XCTAssertEqual(0, (msg.getProperty(id: .tagSenderFlags) as UInt32?)!)
        XCTAssertEqual([.read], msg.access)
        XCTAssertTrue(msg.rtfInSync!)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x43, 0x48, 0x52, 0x49, 0x53, 0x2E, 0x57, 0x49, 0x4C, 0x53, 0x4F, 0x4E, 0x00], [UInt8](msg.sentRepresentingSearchKey!))
        XCTAssertEqual(0, msg.reminderDelta!)
        XCTAssertNotNil(msg.body)
        XCTAssertEqual(1033, msg.messageLocaleId!)
        XCTAssertEqual(106853, (msg.getProperty(id: .unknown0x0E2F) as UInt32?)!)
        XCTAssertEqual([.read, .unmodified, .fromMe], msg.messageFlags)
        XCTAssertEqual("TxtSampleEmail", msg.conversationTopic!)
        XCTAssertEqual(.notAssigned, msg.taskMode!)
        XCTAssertEqual("scan successful", (msg.getProperty(set: .internetHeaders, name: "x-kse-antivirus-interceptor-info") as String?)!)
        XCTAssertEqual(28591, msg.internetCodepage!)
        XCTAssertTrue(msg.trustSender!)
        XCTAssertEqual("sip:chris.wilson@leeds.gov.uk", (msg.getProperty(id: .unknown0x5FE5) as String?)!)
        XCTAssertEqual("Chris.Wilson@leeds.gov.uk", (msg.getProperty(id: .tagSendingSmtpAddress) as String?)!)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON", msg.receivedByEmailAddress!)
        XCTAssertNotNil(msg.transportMessageHeaders)
        XCTAssertEqual(0x00000000, (msg.sentRepresentingEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.sentRepresentingEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.sentRepresentingEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.sentRepresentingEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON\u{00}", (msg.sentRepresentingEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual("Wilson, Chris", msg.receivedRepresentingName!)
        XCTAssertEqual([0x02, 0x00, 0x4B, 0x61, 0x73, 0x70, 0x72, 0x4C, 0x61, 0x62, 0xA6, 0xA4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [UInt8]((msg.getProperty(id: .unknown0x0E9D) as Data?)!))
        XCTAssertFalse(msg.agingDontAgeMe!)
        XCTAssertEqual("Chris.Wilson@leeds.gov.uk", msg.sentRepresentingSmtpAddress!)
        XCTAssertEqual(1508744136.0, msg.creationTime!.timeIntervalSince1970)
        XCTAssertEqual("EX", msg.receivedByAddressType!)
        XCTAssertEqual(106853, (msg.getProperty(id: .tagInternetArticleNumber) as UInt32?)!)
        XCTAssertEqual([0x56, 0xBA, 0x45, 0x5E, 0x35, 0xB7, 0x46, 0x44, 0xBC, 0x1F, 0x68, 0xBE, 0x81, 0x02, 0x41, 0xC9], [UInt8](msg.searchKey!))
        XCTAssertFalse(msg.originatorDeliveryReportRequested!)
        XCTAssertEqual("", msg.displayCc!)
        XCTAssertEqual("[10.184.253.12]", (msg.getProperty(set: .internetHeaders, name: "x-originating-ip") as String?)!)
        XCTAssertEqual([], msg.sideEffects)
        XCTAssertEqual("Internal", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-organization-authas") as String?)!)
        XCTAssertEqual("pifchu04.Leeds.gov.uk", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-organization-authsource") as String?)!)
        XCTAssertFalse(msg.readReceiptRequested!)
        XCTAssertFalse(msg.messageCcMe!)
        XCTAssertEqual(0x00000000, (msg.receivedByEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.receivedByEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.receivedByEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.receivedByEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON\u{00}", (msg.receivedByEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual("EX", msg.sentRepresentingAddressType!)
        XCTAssertTrue(msg.conversationIndexTracking!)
        XCTAssertEqual("", msg.subjectPrefix!)
        XCTAssertEqual(0x00000000, (msg.senderEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.senderEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.senderEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.senderEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON\u{00}", (msg.senderEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x43, 0x48, 0x52, 0x49, 0x53, 0x2E, 0x57, 0x49, 0x4C, 0x53, 0x4F, 0x4E, 0x00], [UInt8](msg.receivedRepresentingSearchKey!))
        XCTAssertEqual("/o=Exchange/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=Chris.Wilson", (msg.getProperty(id: .tagCreatorEmailAddress) as String?)!)
        XCTAssertFalse(msg.reminderSet!)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x43, 0x48, 0x52, 0x49, 0x53, 0x2E, 0x57, 0x49, 0x4C, 0x53, 0x4F, 0x4E, 0x00], [UInt8](msg.receivedBySearchKey!))
        XCTAssertFalse((msg.getProperty(set: .messaging, name: "IsReadReceipt") as Bool?)!)
        XCTAssertEqual(UUID(uuidString: "B712A46B-D2BB-42FD-8612-93C22F31BF8F"), msg.changeKey!.namespaceGuid)
        XCTAssertEqual([0x00, 0x00, 0x1A, 0xEC, 0xAB, 0x81], msg.changeKey!.localId)
        XCTAssertEqual(.normal, msg.priority!)
        XCTAssertEqual("<6BA412B7BBD2FD42861293C22F31BF8F1AECAB77@pifmbx04.Leeds.gov.uk>", (msg.getProperty(id: .tagInternetMessageId) as String?)!)
        XCTAssertEqual("00000002\u{01}/o=Exchange/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=Chris.Wilson", msg.internetAccountStamp!)
        XCTAssertEqual("Wilson, Chris", msg.sentRepresentingName!)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON", msg.receivedRepresentingEmailAddress!)

        XCTAssertEqual(1, msg.recipients.count)
        XCTAssertEqual("Chris.Wilson@leeds.gov.uk", msg.recipients[0].smtpAddress!)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x43, 0x48, 0x52, 0x49, 0x53, 0x2E, 0x57, 0x49, 0x4C, 0x53, 0x4F, 0x4E, 0x00], [UInt8](msg.recipients[0].searchKey!))
        XCTAssertEqual(.primaryRecipient, msg.recipients[0].recipientType!)
        XCTAssertEqual(.mailUser, msg.recipients[0].displayType!)
        XCTAssertEqual(.none, msg.recipients[0].recipientTrackStatus!)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=Chris.Wilson", msg.recipients[0].emailAddress!)
        XCTAssertEqual("Wilson, Chris", msg.recipients[0].recipientDisplayName!)
        XCTAssertEqual([0x8C, 0x19, 0x7D, 0x7D, 0xB6, 0x6D, 0x91, 0x49, 0x99, 0x59, 0xDE, 0x1B, 0xAC, 0xAB, 0x8E, 0x64], [UInt8]((msg.recipients[0].getProperty(id: .tagAbProviders) as Data?)!))
        XCTAssertEqual("Wilson, Chris", msg.recipients[0].displayName!)
        XCTAssertEqual(.sendable, msg.recipients[0].recipientFlags!)
        XCTAssertEqual(0x00000000, (msg.recipients[0].entryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.recipients[0].entryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.recipients[0].entryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.recipients[0].entryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=Chris.Wilson\u{00}", (msg.recipients[0].entryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual(.mailUser, msg.recipients[0].objectType!)
        XCTAssertEqual([0x00, 0x10, 0xEA, 0x8C], [UInt8](msg.recipients[0].instanceKey!))
        XCTAssertTrue(msg.recipients[0].responsibility!)
        XCTAssertEqual("Chris.Wilson", msg.recipients[0].account!)
        XCTAssertEqual("EX", msg.recipients[0].addressType!)
        XCTAssertEqual(0, (msg.recipients[0].getProperty(id: .tagRecipientResourceState) as UInt32?)!)
        XCTAssertEqual(0, msg.recipients[0].recipientOrder!)
        XCTAssertEqual(0, msg.recipients[0].rowid!)
        XCTAssertEqual("Wilson, Chris", msg.recipients[0].transmittableDisplayName!)
        XCTAssertEqual("sip:chris.wilson@leeds.gov.uk", (msg.recipients[0].getProperty(id: .unknown0x5FE5) as String?)!)
        XCTAssertEqual([DisplayTypeEx(rawValue: 0x40000000)], msg.recipients[0].displayTypeEx)
        XCTAssertEqual(0x00000000, (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/o=Exchange/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=Chris.Wilson\u{00}", (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertTrue(msg.recipients[0].sendRichInfo!)

        XCTAssertEqual(0, msg.attachments.count)
    }

    func testReadSicos19778() throws {
        let data = try getData(name: "Sicos1977/MSGReader/TxtSampleEmailWithAttachment")
        let msg = try MsgFile(data: data)
        
        XCTAssertEqual(1508749524.0, msg.messageDeliveryTime!.timeIntervalSince1970)
        XCTAssertEqual(2057, (msg.getProperty(set: .common, lid: 0x000085EB) as UInt32?)!)
        XCTAssertEqual("EX", (msg.getProperty(id: .tagSenderAddressType) as String?)!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.storeSupportMask)
        XCTAssertEqual("Chris.Wilson@leeds.gov.uk", msg.sentRepresentingSmtpAddress!)
        XCTAssertEqual(0x01, msg.conversationIndex!.header.reserved)
        XCTAssertEqual(0xD3, msg.conversationIndex!.header.currentFileTime.0)
        XCTAssertEqual(0x4B, msg.conversationIndex!.header.currentFileTime.1)
        XCTAssertEqual(0xDD, msg.conversationIndex!.header.currentFileTime.2)
        XCTAssertEqual(0xE8, msg.conversationIndex!.header.currentFileTime.3)
        XCTAssertEqual(0x04, msg.conversationIndex!.header.currentFileTime.4)
        XCTAssertEqual(UUID(uuidString: "C4D6B375-B980-47F8-9131-80F1A169FF89"), msg.conversationIndex!.header.guid)
        XCTAssertEqual(0, msg.conversationIndex!.responseLevels.count)
        XCTAssertEqual(.plainText, msg.messageEditorFormat!)
        XCTAssertEqual(1508749622.0, msg.lastModificationTime!.timeIntervalSince1970)
        XCTAssertFalse(msg.smartNoAttach!)
        XCTAssertEqual(0, (msg.getProperty(id: .tagReceivedRepresentingFlags) as UInt32?)!)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON", msg.receivedByEmailAddress!)
        XCTAssertEqual(.normal, msg.sensitivity!)
        XCTAssertFalse(msg.useTnef!)
        XCTAssertFalse(msg.messageCcMe!)
        XCTAssertEqual("00000002\u{01}/o=Exchange/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=Chris.Wilson", msg.internetAccountStamp!)
        XCTAssertEqual("Wilson, Chris", msg.sentRepresentingName!)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON", msg.senderEmailAddress!)
        XCTAssertEqual("sip:chris.wilson@leeds.gov.uk", (msg.getProperty(id: .unknown0x5FE5) as String?)!)
        XCTAssertEqual("This is a sample plain text email with an attachment\r\n\r\n________________________________\r\nChris Wilson\r\nLead Developer, eServices\r\nCorporate ICT\r\nLeeds City Council \r\nTel: 0113 37 85294\r\nEmail: chris.wilson@leeds.gov.uk\r\nwww.leeds.gov.uk\r\n\r\n", msg.body!)
        XCTAssertTrue(msg.trustSender!)
        XCTAssertEqual("Wilson, Chris", msg.receivedByName!)
        XCTAssertEqual([0xB4, 0xD1, 0xA3, 0x88, 0xBF, 0x55, 0x9F, 0x4B, 0xBE, 0x76, 0x92, 0xCB, 0x2B, 0x5C, 0xA5, 0xAE], [UInt8](msg.searchKey!))
        XCTAssertEqual("EX", msg.receivedRepresentingAddressType!)
        XCTAssertEqual("", msg.displayBcc!)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON", msg.sentRepresentingEmailAddress!)
        XCTAssertTrue(msg.sendRichInfo!)
        XCTAssertEqual([.unmodified, .hasAttachment, .fromMe], msg.messageFlags)
        XCTAssertEqual("Wilson, Chris", (msg.getProperty(id: .tagSenderName) as String?)!)
        XCTAssertFalse(msg.readReceiptRequested!)
        XCTAssertEqual(1033, msg.messageLocaleId!)
        XCTAssertFalse(msg.originatorDeliveryReportRequested!)
        XCTAssertEqual("Chris.Wilson@leeds.gov.uk", (msg.getProperty(id: .tagSendingSmtpAddress) as String?)!)
        XCTAssertEqual(1508749523.0, msg.clientSubmitTime!.timeIntervalSince1970)
        XCTAssertEqual(.notAssigned, msg.taskMode!)
        XCTAssertEqual("Wilson, Chris", msg.lastModifierName!)
        XCTAssertFalse(msg.agingDontAgeMe!)
        XCTAssertFalse(msg.`private`!)
        XCTAssertEqual("Internal", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-organization-authas") as String?)!)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x43, 0x48, 0x52, 0x49, 0x53, 0x2E, 0x57, 0x49, 0x4C, 0x53, 0x4F, 0x4E, 0x00], [UInt8](msg.senderSearchKey!))
        XCTAssertEqual("EX", (msg.getProperty(id: .tagCreatorAddressType) as String?)!)
        XCTAssertEqual(0x00000000, (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON\u{00}", (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual("Clean, bases: 23/10/2017 05:31:00", (msg.getProperty(set: .internetHeaders, name: "x-kse-antivirus-info") as String?)!)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x43, 0x48, 0x52, 0x49, 0x53, 0x2E, 0x57, 0x49, 0x4C, 0x53, 0x4F, 0x4E, 0x00], [UInt8](msg.sentRepresentingSearchKey!))
        XCTAssertEqual(0, msg.reminderDelta!)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x43, 0x48, 0x52, 0x49, 0x53, 0x2E, 0x57, 0x49, 0x4C, 0x53, 0x4F, 0x4E, 0x00], [UInt8](msg.receivedBySearchKey!))
        XCTAssertEqual([.read], msg.access)
        XCTAssertEqual("<6BA412B7BBD2FD42861293C22F31BF8F1AECAC05@pifmbx04.Leeds.gov.uk>", (msg.getProperty(id: .tagInternetMessageId) as String?)!)
        XCTAssertEqual(0x00000000, (msg.receivedByEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.receivedByEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.receivedByEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.receivedByEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON\u{00}", (msg.receivedByEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x43, 0x48, 0x52, 0x49, 0x53, 0x2E, 0x57, 0x49, 0x4C, 0x53, 0x4F, 0x4E, 0x00], [UInt8](msg.receivedRepresentingSearchKey!))
        XCTAssertEqual("TxtSampleEmailWithAttachment", msg.normalizedSubject!)
        XCTAssertEqual([0x02, 0x00, 0x4B, 0x61, 0x73, 0x70, 0x72, 0x4C, 0x61, 0x62, 0xA6, 0xA4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [UInt8]((msg.getProperty(id: .unknown0x0E9D) as Data?)!))
        XCTAssertEqual(.normal, msg.priority!)
        XCTAssertFalse(msg.reminderSet!)
        XCTAssertEqual("04", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-organization-authmechanism") as String?)!)
        XCTAssertEqual([], msg.sideEffects)
        XCTAssertEqual(0, (msg.getProperty(id: .tagSentRepresentingFlags) as UInt32?)!)
        XCTAssertEqual("en-GB, en-US", (msg.getProperty(set: .internetHeaders, name: "acceptlanguage") as String?)!)
        XCTAssertEqual("IPM.Note", msg.messageClass!)
        XCTAssertEqual("EX", msg.sentRepresentingAddressType!)
        XCTAssertEqual(.readOnly, msg.accessLevel!)
        XCTAssertEqual("Chris.Wilson@leeds.gov.uk", (msg.getProperty(id: .tagSenderSmtpAddress) as String?)!)
        XCTAssertEqual("BT=0;II=01D34BDDE804C4D6B375B98047F8913180F1A169FF89;FIXUP=0.2669;Version=Version 14.3 (Build 361.0), Stage=H4", (msg.getProperty(guid: UUID(uuidString: "33EBA41F-7AA8-422E-BE7B-79E1A98E54B3")!, name: "ConversationIndexTrackingEx") as String?)!)
        XCTAssertEqual("", msg.subjectPrefix!)
        XCTAssertEqual("", msg.displayCc!)
        XCTAssertEqual("Wilson, Chris\u{00}", msg.displayTo!)
        XCTAssertEqual(1, msg.predecessorChangeList!.values.count)
        XCTAssertEqual(UUID(uuidString: "B712A46B-D2BB-42FD-8612-93C22F31BF8F"), msg.predecessorChangeList!.values[0].namespaceGuid)
        XCTAssertEqual([0x00, 0x00, 0x1A, 0xEC, 0xAC, 0x1E], msg.predecessorChangeList!.values[0].localId)
        XCTAssertEqual([0x1B, 0x00, 0x00, 0x00, 0x7A, 0x93, 0xC3, 0x28, 0x54, 0x00, 0x00, 0x00], [UInt8]((msg.getProperty(id: .unknown0x3014) as Data?)!))
        XCTAssertEqual(0x00000000, (msg.lastModifierEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.lastModifierEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.lastModifierEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.lastModifierEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON\u{00}", (msg.lastModifierEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual("scan successful", (msg.getProperty(set: .internetHeaders, name: "x-kse-antivirus-interceptor-info") as String?)!)
        XCTAssertEqual("[10.184.253.12]", (msg.getProperty(set: .internetHeaders, name: "x-originating-ip") as String?)!)
        XCTAssertEqual("Wilson, Chris", msg.receivedRepresentingName!)
        XCTAssertEqual(0x00000000, (msg.sentRepresentingEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.sentRepresentingEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.sentRepresentingEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.sentRepresentingEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON\u{00}", (msg.sentRepresentingEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertFalse((msg.getProperty(set: .messaging, name: "IsSigned") as Bool?)!)
        XCTAssertEqual("TxtSampleEmailWithAttachment", msg.subject!)
        XCTAssertEqual(.normal, msg.importance!)
        XCTAssertEqual(UUID(uuidString: "B712A46B-D2BB-42FD-8612-93C22F31BF8F"), msg.changeKey!.namespaceGuid)
        XCTAssertEqual([0x00, 0x00, 0x1A, 0xEC, 0xAC, 0x1E], msg.changeKey!.localId)
        XCTAssertEqual(4294967295, msg.iconIndex!)
        XCTAssertEqual("Chris.Wilson@leeds.gov.uk", msg.internetAccountName!)
        XCTAssertTrue(msg.conversationIndexTracking!)
        XCTAssertEqual("/o=Exchange/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=Chris.Wilson", (msg.getProperty(id: .tagCreatorEmailAddress) as String?)!)
        XCTAssertNotNil(msg.rtfCompressed)
        XCTAssertEqual(0x00000000, (msg.senderEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.senderEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.senderEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.senderEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON\u{00}", (msg.senderEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual(28591, msg.internetCodepage!)
        XCTAssertEqual(106863, (msg.getProperty(id: .tagInternetArticleNumber) as UInt32?)!)
        XCTAssertTrue(msg.hasAttachments!)
        XCTAssertNotNil(msg.tnefCorrelationKey)
        XCTAssertEqual(0, (msg.getProperty(id: .tagSenderFlags) as UInt32?)!)
        XCTAssertEqual(1252, msg.messageCodepage!)
        XCTAssertTrue(msg.rtfInSync!)
        XCTAssertNotNil(msg.transportMessageHeaders)
        XCTAssertEqual(1508749622.0, msg.creationTime!.timeIntervalSince1970)
        XCTAssertEqual(0, (msg.getProperty(id: .tagReceivedByFlags) as UInt32?)!)
        XCTAssertEqual("TxtSampleEmailWithAttachment", msg.conversationTopic!)
        XCTAssertEqual("pifchu05.Leeds.gov.uk", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-organization-authsource") as String?)!)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=CHRIS.WILSON", msg.receivedRepresentingEmailAddress!)
        XCTAssertTrue(msg.messageToMe!)
        XCTAssertTrue(msg.alternateRecipientAllowed!)
        XCTAssertFalse((msg.getProperty(set: .messaging, name: "IsReadReceipt") as Bool?)!)
        XCTAssertEqual("EX", msg.receivedByAddressType!)
        XCTAssertEqual(106863, (msg.getProperty(id: .unknown0x0E2F) as UInt32?)!)

        XCTAssertEqual(1, msg.recipients.count)
        XCTAssertEqual(0, msg.recipients[0].recipientOrder!)
        XCTAssertEqual([0x00, 0x10, 0xEE, 0xA6], [UInt8](msg.recipients[0].instanceKey!))
        XCTAssertEqual(.mailUser, msg.recipients[0].displayType!)
        XCTAssertEqual(.mailUser, msg.recipients[0].objectType!)
        XCTAssertEqual("Wilson, Chris", msg.recipients[0].recipientDisplayName!)
        XCTAssertEqual(0, msg.recipients[0].rowid!)
        XCTAssertEqual([0x8C, 0x19, 0x7D, 0x7D, 0xB6, 0x6D, 0x91, 0x49, 0x99, 0x59, 0xDE, 0x1B, 0xAC, 0xAB, 0x8E, 0x64], [UInt8]((msg.recipients[0].getProperty(id: .tagAbProviders) as Data?)!))
        XCTAssertEqual("Wilson, Chris", msg.recipients[0].transmittableDisplayName!)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=Chris.Wilson", msg.recipients[0].emailAddress!)
        XCTAssertEqual(.primaryRecipient, msg.recipients[0].recipientType!)
        XCTAssertTrue(msg.recipients[0].responsibility!)
        XCTAssertEqual(0, (msg.recipients[0].getProperty(id: .tagRecipientResourceState) as UInt32?)!)
        XCTAssertEqual(0x00000000, (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/o=Exchange/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=Chris.Wilson\u{00}", (msg.recipients[0].recipientEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual("Wilson, Chris", msg.recipients[0].displayName!)
        XCTAssertEqual(.sendable, msg.recipients[0].recipientFlags!)
        XCTAssertEqual(.none, msg.recipients[0].recipientTrackStatus!)
        XCTAssertTrue(msg.recipients[0].sendRichInfo!)
        XCTAssertEqual(0x00000000, (msg.recipients[0].entryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.recipients[0].entryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.recipients[0].entryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.recipients[0].entryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=EXCHANGE/OU=EXCHANGE ADMINISTRATIVE GROUP (FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=Chris.Wilson\u{00}", (msg.recipients[0].entryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual("EX", msg.recipients[0].addressType!)
        XCTAssertEqual("sip:chris.wilson@leeds.gov.uk", (msg.recipients[0].getProperty(id: .unknown0x5FE5) as String?)!)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x20, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x43, 0x48, 0x52, 0x49, 0x53, 0x2E, 0x57, 0x49, 0x4C, 0x53, 0x4F, 0x4E, 0x00], [UInt8](msg.recipients[0].searchKey!))
        XCTAssertEqual("Chris.Wilson@leeds.gov.uk", msg.recipients[0].smtpAddress!)
        XCTAssertEqual("Chris.Wilson", msg.recipients[0].account!)
        XCTAssertEqual([DisplayTypeEx(rawValue: 0x40000000)], msg.recipients[0].displayTypeEx)

        XCTAssertEqual(1, msg.attachments.count)
        XCTAssertEqual(1508749511.0, msg.attachments[0].lastModificationTime!.timeIntervalSince1970)
        XCTAssertNotNil(msg.attachments[0].attachDataBinary)
        XCTAssertEqual([0x00, 0x00, 0x00, 0x00], [UInt8]((msg.attachments[0].getProperty(id: .unknown0x371D) as Data?)!))
        XCTAssertEqual("SampleAttachment.pdf", msg.attachments[0].attachLongFilename!)
        XCTAssertNotNil(msg.attachments[0].attachRendering)
        XCTAssertEqual([], [UInt8](msg.attachments[0].attachEncoding!))
        XCTAssertEqual(.byValue, msg.attachments[0].attachMethod!)
        XCTAssertEqual(.readOnly, msg.attachments[0].accessLevel!)
        XCTAssertEqual(79870665600.0, msg.attachments[0].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual(".pdf", msg.attachments[0].attachExtension!)
        XCTAssertEqual("SampleAttachment.pdf", msg.attachments[0].displayName!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[0].storeSupportMask)
        XCTAssertEqual(0x00000000, msg.attachments[0].attachmentFlags!)
        XCTAssertEqual(1508749511.0, msg.attachments[0].creationTime!.timeIntervalSince1970)
        XCTAssertEqual(4294967295, msg.attachments[0].renderingPosition!)
        XCTAssertEqual("", (msg.attachments[0].getProperty(set: .attachment, name: "AttachmentOriginalUrl") as String?)!)
        XCTAssertEqual(0, msg.attachments[0].attachNumber!)
        XCTAssertEqual(.attachment, msg.attachments[0].objectType!)
        XCTAssertFalse(msg.attachments[0].attachmentContactPhoto!)
        XCTAssertEqual(0, msg.attachments[0].attachmentLinkId!)
        XCTAssertEqual(79870665600.0, msg.attachments[0].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual([.read], msg.attachments[0].access)
        XCTAssertFalse(msg.attachments[0].attachmentHidden!)
        XCTAssertEqual([], msg.attachments[0].attachFlags)
        XCTAssertEqual("Sample~1.pdf", msg.attachments[0].attachFilename!)
        XCTAssertEqual([0x00, 0x00, 0x00, 0x00], [UInt8](msg.attachments[0].recordKey!))
    }

    func testReadOnline1() throws {
        let data = try getData(name: "Online/example")
        let msg = try MsgFile(data: data)

        XCTAssertEqual(0xFFFFFFFF, msg.iconIndex!)
        XCTAssertEqual("", msg.displayCc!)
        XCTAssertEqual([0xA9, 0xED, 0x18, 0x77, 0x63, 0x5C, 0x5F, 0x4E, 0x82, 0xBD, 0xFF, 0x1F, 0x38, 0x84, 0x76, 0xDA], [UInt8](msg.searchKey!))
        XCTAssertEqual([0x3C, 0x3F, 0x78, 0x6D, 0x6C, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x3D, 0x22, 0x31, 0x2E, 0x30, 0x22, 0x20, 0x65, 0x6E, 0x63, 0x6F, 0x64, 0x69, 0x6E, 0x67, 0x3D, 0x22, 0x55, 0x54, 0x46, 0x2D, 0x38, 0x22, 0x20, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x61, 0x6C, 0x6F, 0x6E, 0x65, 0x3D, 0x22, 0x79, 0x65, 0x73, 0x22, 0x3F, 0x3E, 0x0D, 0x0A, 0x3C, 0x61, 0x3A, 0x63, 0x6C, 0x72, 0x4D, 0x61, 0x70, 0x20, 0x78, 0x6D, 0x6C, 0x6E, 0x73, 0x3A, 0x61, 0x3D, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x73, 0x63, 0x68, 0x65, 0x6D, 0x61, 0x73, 0x2E, 0x6F, 0x70, 0x65, 0x6E, 0x78, 0x6D, 0x6C, 0x66, 0x6F, 0x72, 0x6D, 0x61, 0x74, 0x73, 0x2E, 0x6F, 0x72, 0x67, 0x2F, 0x64, 0x72, 0x61, 0x77, 0x69, 0x6E, 0x67, 0x6D, 0x6C, 0x2F, 0x32, 0x30, 0x30, 0x36, 0x2F, 0x6D, 0x61, 0x69, 0x6E, 0x22, 0x20, 0x62, 0x67, 0x31, 0x3D, 0x22, 0x6C, 0x74, 0x31, 0x22, 0x20, 0x74, 0x78, 0x31, 0x3D, 0x22, 0x64, 0x6B, 0x31, 0x22, 0x20, 0x62, 0x67, 0x32, 0x3D, 0x22, 0x6C, 0x74, 0x32, 0x22, 0x20, 0x74, 0x78, 0x32, 0x3D, 0x22, 0x64, 0x6B, 0x32, 0x22, 0x20, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x31, 0x3D, 0x22, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x31, 0x22, 0x20, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x32, 0x3D, 0x22, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x32, 0x22, 0x20, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x33, 0x3D, 0x22, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x33, 0x22, 0x20, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x34, 0x3D, 0x22, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x34, 0x22, 0x20, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x35, 0x3D, 0x22, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x35, 0x22, 0x20, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x36, 0x3D, 0x22, 0x61, 0x63, 0x63, 0x65, 0x6E, 0x74, 0x36, 0x22, 0x20, 0x68, 0x6C, 0x69, 0x6E, 0x6B, 0x3D, 0x22, 0x68, 0x6C, 0x69, 0x6E, 0x6B, 0x22, 0x20, 0x66, 0x6F, 0x6C, 0x48, 0x6C, 0x69, 0x6E, 0x6B, 0x3D, 0x22, 0x66, 0x6F, 0x6C, 0x48, 0x6C, 0x69, 0x6E, 0x6B, 0x22, 0x2F, 0x3E], [UInt8]((msg.getProperty(set: .common, lid: 0x000085C3) as Data?)!))
        XCTAssertFalse(msg.reminderSet!)
        XCTAssertEqual(1033, msg.messageLocaleId!)
        XCTAssertEqual(20127, msg.internetCodepage!)
        XCTAssertEqual("", msg.displayBcc!)
        XCTAssertFalse(msg.`private`!)
        XCTAssertFalse(msg.originatorDeliveryReportRequested!)
        XCTAssertEqual(.normal, msg.importance!)
        XCTAssertEqual("MSG Test File", msg.conversationTopic!)
        XCTAssertNotNil((msg.getProperty(set: .common, lid: 0x000085C2) as Data?))
        XCTAssertEqual(1456239470.0, msg.lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual(1033, (msg.getProperty(set: .common, lid: 0x000085EB) as UInt32?)!)
        XCTAssertEqual(.readOnly, msg.accessLevel!)
        XCTAssertEqual("MSG Test File", msg.subject!)
        XCTAssertFalse(msg.agingDontAgeMe!)
        XCTAssertEqual(0x01, msg.conversationIndex!.header.reserved)
        XCTAssertEqual(0xD1, msg.conversationIndex!.header.currentFileTime.0)
        XCTAssertEqual(0x6E, msg.conversationIndex!.header.currentFileTime.1)
        XCTAssertEqual(0x4A, msg.conversationIndex!.header.currentFileTime.2)
        XCTAssertEqual(0x85, msg.conversationIndex!.header.currentFileTime.3)
        XCTAssertEqual(0x6E, msg.conversationIndex!.header.currentFileTime.4)
        XCTAssertEqual(UUID(uuidString: "55272F7F-9CA0-4AE3-8A0F-F778094D6DB8"), msg.conversationIndex!.header.guid)
        XCTAssertEqual(0, msg.conversationIndex!.responseLevels.count)
        XCTAssertFalse(msg.deleteAfterSubmit!)
        XCTAssertFalse(msg.readReceiptRequested!)
        XCTAssertEqual("IPM.Note", msg.messageClass!)
        XCTAssertEqual("15.0", msg.currentVersionName!)
        XCTAssertEqual([.read], msg.access)
        XCTAssertEqual("time2talk@online-convert.com\u{00}", msg.displayTo!)
        XCTAssertEqual(.normal, msg.priority!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.storeSupportMask)
        XCTAssertTrue(msg.rtfInSync!)
        XCTAssertNotNil(msg.rtfCompressed)
        XCTAssertEqual("", msg.subjectPrefix!)
        XCTAssertEqual("MSG Test File", msg.normalizedSubject!)
        XCTAssertEqual(.normal, msg.sensitivity!)
        XCTAssertEqual(154783, msg.currentVersion!)
        XCTAssertEqual([], msg.sideEffects)
        XCTAssertEqual(.notAssigned, msg.taskMode!)
        XCTAssertTrue(msg.alternateRecipientAllowed!)
        XCTAssertEqual(1456239470.0, msg.creationTime!.timeIntervalSince1970)
        XCTAssertEqual(0, msg.reminderDelta!)
        XCTAssertEqual([.unsent], msg.messageFlags)
        XCTAssertNotNil(msg.body)

        XCTAssertEqual(1, msg.recipients.count)
        XCTAssertEqual("SMTP", msg.recipients[0].addressType!)
        XCTAssertEqual(0x00000000, (msg.recipients[0].entryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.recipients[0].entryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.recipients[0].entryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.recipients[0].entryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("time2talk@online-convert.com", (msg.recipients[0].entryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.recipients[0].entryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("time2talk@online-convert.com", (msg.recipients[0].entryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual("time2talk@online-convert.com", msg.recipients[0].recipientDisplayName!)
        XCTAssertEqual(.primaryRecipient, msg.recipients[0].recipientType!)
        XCTAssertEqual(.sendable, msg.recipients[0].recipientFlags!)
        XCTAssertEqual("time2talk@online-convert.com", msg.recipients[0].emailAddress!)
        XCTAssertEqual(.none, msg.recipients[0].recipientTrackStatus!)
        XCTAssertEqual([0x00, 0x00, 0x00, 0x00, 0x81, 0x2B, 0x1F, 0xA4, 0xBE, 0xA3, 0x10, 0x19, 0x9D, 0x6E, 0x00, 0xDD, 0x01, 0x0F, 0x54, 0x02, 0x00, 0x00, 0x01, 0x90, 0x74, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x32, 0x00, 0x74, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x6B, 0x00, 0x40, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x2D, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x74, 0x00, 0x2E, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x00, 0x00, 0x53, 0x00, 0x4D, 0x00, 0x54, 0x00, 0x50, 0x00, 0x00, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x32, 0x00, 0x74, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x6B, 0x00, 0x40, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x2D, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x74, 0x00, 0x2E, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x00, 0x00], [UInt8](msg.recipients[0].recordKey!))
        XCTAssertEqual(0, msg.recipients[0].rowid!)
        XCTAssertEqual(0x00000000, (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("time2talk@online-convert.com", (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("time2talk@online-convert.com", (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual("time2talk@online-convert.com", msg.recipients[0].displayName!)
        XCTAssertFalse(msg.recipients[0].sendRichInfo!)
        XCTAssertEqual([0x00, 0x00, 0x00, 0x6F], [UInt8](msg.recipients[0].instanceKey!))
        XCTAssertEqual(0, msg.recipients[0].recipientOrder!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x54, 0x49, 0x4D, 0x45, 0x32, 0x54, 0x41, 0x4C, 0x4B, 0x40, 0x4F, 0x4E, 0x4C, 0x49, 0x4E, 0x45, 0x2D, 0x43, 0x4F, 0x4E, 0x56, 0x45, 0x52, 0x54, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.recipients[0].searchKey!))
        XCTAssertEqual(0, (msg.recipients[0].getProperty(id: .tagRecipientResourceState) as UInt32?)!)
        XCTAssertEqual(0, msg.recipients[0].sendInternetEncoding!)
        XCTAssertEqual(.mailUser, msg.recipients[0].displayType!)
        XCTAssertEqual(.mailUser, msg.recipients[0].objectType!)

        XCTAssertEqual(0, msg.attachments.count)
    }

    func testReadOnline2() throws {
        let data = try getData(name: "Online/sample")
        let msg = try MsgFile(data: data)

        XCTAssertEqual("sales@bitdaddys.com\u{00}", msg.displayTo!)
        XCTAssertEqual(1196302382.0, msg.creationTime!.timeIntervalSince1970)
        XCTAssertEqual([.read], msg.access)
        XCTAssertEqual("BitDaddys Software", msg.conversationTopic!)
        XCTAssertEqual(.readOnly, msg.accessLevel!)
        XCTAssertNotNil(msg.rtfCompressed)
        XCTAssertEqual(0x01, msg.conversationIndex!.header.reserved)
        XCTAssertEqual(0xC8, msg.conversationIndex!.header.currentFileTime.0)
        XCTAssertEqual(0x32, msg.conversationIndex!.header.currentFileTime.1)
        XCTAssertEqual(0x2D, msg.conversationIndex!.header.currentFileTime.2)
        XCTAssertEqual(0x5E, msg.conversationIndex!.header.currentFileTime.3)
        XCTAssertEqual(0xEE, msg.conversationIndex!.header.currentFileTime.4)
        XCTAssertEqual(UUID(uuidString: "550F33BB-B536-494F-8CEB-041C084C42C0"), msg.conversationIndex!.header.guid)
        XCTAssertEqual(0, msg.conversationIndex!.responseLevels.count)
        XCTAssertEqual("IPM.Note", msg.messageClass!)
        XCTAssertEqual(0x00000000, (msg.sentRepresentingEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.sentRepresentingEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.sentRepresentingEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.sentRepresentingEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("John Doe", (msg.sentRepresentingEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.sentRepresentingEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("jdoes@someserver.com", (msg.sentRepresentingEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual("jdoes@someserver.com", msg.senderEmailAddress!)
        XCTAssertEqual(1196302382.0, msg.lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x4A, 0x44, 0x4F, 0x45, 0x53, 0x40, 0x53, 0x4F, 0x4D, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.senderSearchKey!))
        XCTAssertEqual("jdoes@someserver.com", msg.sentRepresentingEmailAddress!)
        XCTAssertEqual([.read], msg.messageFlags)
        XCTAssertEqual("John Doe", msg.sentRepresentingName!)
        XCTAssertEqual("John Doe", (msg.getProperty(id: .tagSenderName) as String?)!)
        XCTAssertEqual("", msg.displayBcc!)
        XCTAssertNotNil(msg.transportMessageHeaders)
        XCTAssertEqual(1155407125.0, msg.clientSubmitTime!.timeIntervalSince1970)
        XCTAssertEqual([0x3F, 0x75, 0xFD, 0xDA, 0x5A, 0xC4, 0xA8, 0x43, 0xB0, 0xD0, 0xE3, 0x62, 0x7A, 0xFA, 0xB2, 0xE4], [UInt8](msg.searchKey!))
        XCTAssertEqual("Dear BitDaddys Corp.,\r\n\r\nWe have added your software to our approved list.\r\n\r\nThank you for your efforts,\r\nSincerely,\r\nJohn Doe\r\nSome Server Company\r\n", msg.body!)
        XCTAssertEqual("", msg.displayCc!)
        XCTAssertEqual(0x00000000, (msg.senderEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.senderEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.senderEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.senderEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("John Doe", (msg.senderEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.senderEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("jdoes@someserver.com", (msg.senderEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual(28591, msg.internetCodepage!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x4A, 0x44, 0x4F, 0x45, 0x53, 0x40, 0x53, 0x4F, 0x4D, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.sentRepresentingSearchKey!))
        XCTAssertEqual("(outlookEMLandMSGconverter Trial Version Import) BitDaddys Software", msg.subject!)
        XCTAssertEqual("SMTP", (msg.getProperty(id: .tagSenderAddressType) as String?)!)
        XCTAssertEqual("SMTP", msg.sentRepresentingAddressType!)
        XCTAssertEqual(344061, (msg.getProperty(id: .tagStoreUnicodeMask) as UInt32?)!)
        XCTAssertEqual(1196302382.0, msg.messageDeliveryTime!.timeIntervalSince1970)
        XCTAssertEqual("", msg.subjectPrefix!)
        XCTAssertTrue(msg.rtfInSync!)
        XCTAssertEqual("(outlookEMLandMSGconverter Trial Version Import) BitDaddys Software", msg.normalizedSubject!)
        XCTAssertEqual(.normal, msg.importance!)

        XCTAssertEqual(1, msg.recipients.count)
        XCTAssertEqual(0x00000000, (msg.recipients[0].entryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.recipients[0].entryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.recipients[0].entryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.recipients[0].entryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("sales@bitdaddys.com", (msg.recipients[0].entryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.recipients[0].entryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("sales@bitdaddys.com", (msg.recipients[0].entryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual("sales@bitdaddys.com", msg.recipients[0].displayName!)
        XCTAssertEqual("sales@bitdaddys.com", msg.recipients[0].emailAddress!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x53, 0x41, 0x4C, 0x45, 0x53, 0x40, 0x42, 0x49, 0x54, 0x44, 0x41, 0x44, 0x44, 0x59, 0x53, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.recipients[0].searchKey!))
        XCTAssertEqual(.primaryRecipient, msg.recipients[0].recipientType!)
        XCTAssertEqual([0x00, 0x05, 0x8C, 0xD4], [UInt8](msg.recipients[0].instanceKey!))
        XCTAssertEqual(0, msg.recipients[0].rowid!)
        XCTAssertEqual("SMTP", msg.recipients[0].addressType!)

        XCTAssertEqual(0, msg.attachments.count)
    }

    func testReadMine1() throws {
        let data = try getData(name: "hughbe/MVP")
        let msg = try MsgFile(data: data)
        
        XCTAssertEqual("mvpga@microsoft.com", msg.senderEmailAddress!)
        XCTAssertEqual(0x00000000, (msg.sentRepresentingEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.sentRepresentingEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.sentRepresentingEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.sentRepresentingEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("MVP Global Administrator", (msg.sentRepresentingEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.sentRepresentingEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("mvpga@microsoft.com", (msg.sentRepresentingEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual(1595542701.0, msg.clientSubmitTime!.timeIntervalSince1970)
        XCTAssertEqual(1595673024.0, msg.lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual(UUID(uuidString: "75EB2FE9-5096-8644-83B8-7DE522AA4948"), msg.changeKey!.namespaceGuid)
        XCTAssertEqual([0x00], msg.changeKey!.localId)
        XCTAssertEqual(0x00000000, (msg.senderEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.senderEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.senderEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.senderEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("MVP Global Administrator", (msg.senderEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.senderEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("mvpga@microsoft.com", (msg.senderEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual("<11fafa24-97b4-4ecc-85e6-2d873a3b692e@az.eastus2.production.microsoft.com>", (msg.getProperty(id: .tagInternetMessageId) as String?)!)
        XCTAssertEqual(.normal, msg.importance!)
        XCTAssertTrue(msg.rtfInSync!)
        XCTAssertEqual("hughbellars@gmail.com", msg.receivedRepresentingName!)
        XCTAssertEqual("SMTP", msg.receivedByAddressType!)
        XCTAssertEqual(1595542704.0, msg.messageDeliveryTime!.timeIntervalSince1970)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.storeSupportMask)
        XCTAssertTrue(msg.conversationIndexTracking!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x48, 0x55, 0x47, 0x48, 0x42, 0x45, 0x4C, 0x4C, 0x41, 0x52, 0x53, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.receivedRepresentingSearchKey!))
        XCTAssertEqual("", msg.displayBcc!)
        XCTAssertEqual([0x77, 0x9E, 0x00, 0x00], [UInt8](msg.searchKey!))
        XCTAssertEqual([0x78, 0x84, 0x62, 0x29, 0xCC, 0xB4, 0xC4, 0x4E, 0x91, 0x7D, 0x8A, 0x30, 0xF7, 0x41, 0x6E, 0x96], [UInt8]((msg.getProperty(set: .common, name: "InTransitMessageCorrelator") as Data?)!))
        XCTAssertNotNil(msg.body)
        XCTAssertEqual("hughbellars@gmail.com", msg.internetAccountName!)
        XCTAssertEqual(0x01, msg.conversationIndex!.header.reserved)
        XCTAssertEqual(0x02, msg.conversationIndex!.header.currentFileTime.0)
        XCTAssertEqual(0xB9, msg.conversationIndex!.header.currentFileTime.1)
        XCTAssertEqual(0xCD, msg.conversationIndex!.header.currentFileTime.2)
        XCTAssertEqual(0x77, msg.conversationIndex!.header.currentFileTime.3)
        XCTAssertEqual(0x81, msg.conversationIndex!.header.currentFileTime.4)
        XCTAssertEqual(UUID(uuidString: "CA468532-CAF4-7508-C195-1C829A9161F8"), msg.conversationIndex!.header.guid)
        XCTAssertEqual(0, msg.conversationIndex!.responseLevels.count)
        XCTAssertEqual("00000002\u{01}hughbellars", (msg.getProperty(id: .unknown0x680E) as String?)!)
        XCTAssertEqual(0x00000000, (msg.receivedByEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.receivedByEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.receivedByEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.unicode], (msg.receivedByEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars@gmail.com", (msg.receivedByEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.receivedByEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.receivedByEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual(65001, msg.internetCodepage!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x4D, 0x56, 0x50, 0x47, 0x41, 0x40, 0x4D, 0x49, 0x43, 0x52, 0x4F, 0x53, 0x4F, 0x46, 0x54, 0x2E, 0x43, 0x4F, 0x4D], [UInt8](msg.senderSearchKey!))
        XCTAssertEqual("mvpga@microsoft.com", msg.sentRepresentingEmailAddress!)
        XCTAssertEqual("hughbellars@gmail.com", (msg.getProperty(id: .unknown0x680D) as String?)!)
        XCTAssertEqual("IPM.Note", msg.messageClass!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x4D, 0x56, 0x50, 0x47, 0x41, 0x40, 0x4D, 0x49, 0x43, 0x52, 0x4F, 0x53, 0x4F, 0x46, 0x54, 0x2E, 0x43, 0x4F, 0x4D], [UInt8](msg.sentRepresentingSearchKey!))
        XCTAssertEqual(1595673024.0, msg.creationTime!.timeIntervalSince1970)
        XCTAssertEqual("hughbellars@gmail.com", msg.receivedByName!)
        XCTAssertEqual("hughbellars@gmail.com", msg.lastModifierName!)
        XCTAssertEqual(.readOnly, msg.accessLevel!)
        XCTAssertEqual("quoted-printable", (msg.getProperty(set: .internetHeaders, name: "content-transfer-encoding") as String?)!)
        XCTAssertEqual(0x00000000, (msg.receivedRepresentingEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.receivedRepresentingEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.receivedRepresentingEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.unicode], (msg.receivedRepresentingEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars@gmail.com", (msg.receivedRepresentingEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.receivedRepresentingEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.receivedRepresentingEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual(1, msg.predecessorChangeList!.values.count)
        XCTAssertEqual(UUID(uuidString: "75EB2FE9-5096-8644-83B8-7DE522AA4948"), msg.predecessorChangeList!.values[0].namespaceGuid)
        XCTAssertEqual([0x00], msg.predecessorChangeList!.values[0].localId)
        XCTAssertEqual(1, (msg.getProperty(set: .common, lid: 0x000085D7) as UInt32?)!)
        XCTAssertNotNil(msg.transportMessageHeaders)
        XCTAssertEqual("SMTP", msg.receivedRepresentingAddressType!)
        XCTAssertEqual(.undefined, msg.nativeBody!)
        XCTAssertEqual("MVP award delivery information", msg.subject!)
        XCTAssertEqual("hughbellars@gmail.com", msg.receivedByEmailAddress!)
        XCTAssertEqual("MVP Global Administrator", (msg.getProperty(id: .tagSenderName) as String?)!)
        XCTAssertEqual("hughbellars@gmail.com", msg.receivedRepresentingEmailAddress!)
        XCTAssertEqual("00000002\u{01}hughbellars", msg.internetAccountStamp!)
        XCTAssertEqual("SMTP", (msg.getProperty(id: .tagSenderAddressType) as String?)!)
        XCTAssertEqual("", msg.displayCc!)
        XCTAssertEqual([.read, MessageFlags(rawValue: 0x00030000)], msg.messageFlags)
        XCTAssertEqual("", msg.subjectPrefix!)
        XCTAssertEqual("SMTP", msg.sentRepresentingAddressType!)
        XCTAssertEqual("DU3YG1918BU4.4HMMWMPNFVK32@RD0050F230C5A7", msg.attachContentId!)
        XCTAssertEqual("hughbellars@gmail.com\u{00}", msg.displayTo!)
        XCTAssertNotNil(msg.rtfCompressed)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x48, 0x55, 0x47, 0x48, 0x42, 0x45, 0x4C, 0x4C, 0x41, 0x52, 0x53, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.receivedBySearchKey!))
        XCTAssertEqual("MVP award delivery information", msg.conversationTopic!)
        XCTAssertEqual([.read], msg.access)
        XCTAssertEqual("MVP Global Administrator", msg.sentRepresentingName!)
        XCTAssertEqual("MVP award delivery information", msg.normalizedSubject!)
        XCTAssertEqual("text/html; charset=\"utf-8\"", (msg.getProperty(set: .internetHeaders, name: "content-type") as String?)!)

        XCTAssertEqual(1, msg.recipients.count)
        XCTAssertEqual("hughbellars@gmail.com", msg.recipients[0].emailAddress!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x48, 0x55, 0x47, 0x48, 0x42, 0x45, 0x4C, 0x4C, 0x41, 0x52, 0x53, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D], [UInt8](msg.recipients[0].searchKey!))
        XCTAssertEqual([0x00, 0x00, 0x02, 0xBD], [UInt8](msg.recipients[0].instanceKey!))
        XCTAssertEqual(0x00000000, (msg.recipients[0].entryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.recipients[0].entryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.recipients[0].entryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.recipients[0].entryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars@gmail.com", (msg.recipients[0].entryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.recipients[0].entryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.recipients[0].entryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual("SMTP", msg.recipients[0].addressType!)
        XCTAssertEqual("hughbellars@gmail.com", msg.recipients[0].displayName!)
        XCTAssertEqual(.primaryRecipient, msg.recipients[0].recipientType!)
        XCTAssertEqual(0, msg.recipients[0].rowid!)

        XCTAssertEqual(0, msg.attachments.count)
    }

    func testReadMine2() throws {
        let data = try getData(name: "hughbe/custom")
        let msg = try MsgFile(data: data)

        XCTAssertEqual(.urgent, msg.priority!)
        XCTAssertTrue(msg.useTnef!)
        XCTAssertEqual([.read, .hasAttachment, MessageFlags(rawValue: 0x00030000)], msg.messageFlags)
        XCTAssertEqual("newMail", (msg.getProperty(set: .common, name: "ComposeType") as String?)!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x48, 0x55, 0x47, 0x48, 0x42, 0x45, 0x4C, 0x4C, 0x41, 0x52, 0x53, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D], [UInt8](msg.sentRepresentingSearchKey!))
        XCTAssertEqual(1, msg.replyRecipientEntries!.count)
        XCTAssertEqual(0x00000080, msg.replyRecipientEntries!.size)
        XCTAssertEqual(122, msg.replyRecipientEntries!.flatEntries[0].size)
        XCTAssertEqual(0x00000000, (msg.replyRecipientEntries!.flatEntries[0].entryID as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.replyRecipientEntries!.flatEntries[0].entryID as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.replyRecipientEntries!.flatEntries[0].entryID as? OneOffEntryID)!.version)
        XCTAssertEqual([.unicode], (msg.replyRecipientEntries!.flatEntries[0].entryID as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars@gmail.com", (msg.replyRecipientEntries!.flatEntries[0].entryID as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.replyRecipientEntries!.flatEntries[0].entryID as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.replyRecipientEntries!.flatEntries[0].entryID as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual(1, (msg.getProperty(set: .common, lid: 0x000085D7) as UInt32?)!)
        XCTAssertEqual("00000002\u{01}hughbellars", (msg.getProperty(id: .unknown0x680E) as String?)!)
        XCTAssertEqual("SMTP", (msg.getProperty(id: .tagSenderAddressType) as String?)!)
        XCTAssertEqual(20127, msg.internetCodepage!)
        XCTAssertEqual("hughbellars@gmail.com", (msg.getProperty(id: .unknown0x680D) as String?)!)
        XCTAssertEqual("", msg.displayCc!)
        XCTAssertFalse(msg.alternateRecipientAllowed!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.storeSupportMask)
        XCTAssertEqual("", msg.subjectPrefix!)
        XCTAssertEqual([.openForContextMenu], msg.sideEffects)
        XCTAssertTrue(msg.responseRequested!)
        XCTAssertEqual("00000002\u{01}hughbellars@gmail.com\u{01}hughbellars@gmail.com", msg.nextSendAcct!)
        XCTAssertEqual("00000002\u{01}hughbellars@gmail.com\u{01}hughbellars@gmail.com", msg.primarySendAccount!)
        XCTAssertEqual("SMTP", msg.sentRepresentingAddressType!)
        XCTAssertNotNil(msg.transportMessageHeaders)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x48, 0x55, 0x47, 0x48, 0x42, 0x45, 0x4C, 0x4C, 0x41, 0x52, 0x53, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D], [UInt8](msg.senderSearchKey!))
        XCTAssertEqual(0x0102, msg.verbStream!.version)
        XCTAssertEqual(6, msg.verbStream!.count)
        XCTAssertEqual(6, msg.verbStream!.voteOptions.count)
        XCTAssertEqual(0, msg.verbStream!.voteOptions[0].verbType)
        XCTAssertEqual(5, msg.verbStream!.voteOptions[0].displayNameCount)
        XCTAssertEqual("Reply", msg.verbStream!.voteOptions[0].displayName)
        XCTAssertEqual(8, msg.verbStream!.voteOptions[0].msgClsNameCount)
        XCTAssertEqual("IPM.Note", msg.verbStream!.voteOptions[0].msgClsName)
        XCTAssertEqual(7, msg.verbStream!.voteOptions[0].internal1StringCount)
        XCTAssertEqual("Message", msg.verbStream!.voteOptions[0].internal1String)
        XCTAssertEqual(2, msg.verbStream!.voteOptions[0].displayNameCountRepeat)
        XCTAssertEqual("RE", msg.verbStream!.voteOptions[0].displayNameRepeat)
        XCTAssertEqual(0x00000005, msg.verbStream!.voteOptions[0].internal2)
        XCTAssertEqual(0x00, msg.verbStream!.voteOptions[0].internal3)
        XCTAssertFalse(msg.verbStream!.voteOptions[0].fUseUSHeaders)
        XCTAssertEqual(0x00000001, msg.verbStream!.voteOptions[0].internal4)
        XCTAssertEqual(.unknown, msg.verbStream!.voteOptions[0].sendBehavior)
        XCTAssertEqual(0x00000002, msg.verbStream!.voteOptions[0].internal5)
        XCTAssertEqual(0x0066, msg.verbStream!.voteOptions[0].id)
        XCTAssertEqual(0x00020000, msg.verbStream!.voteOptions[0].internal6)
        XCTAssertEqual(1, msg.verbStream!.voteOptions[1].verbType)
        XCTAssertEqual(12, msg.verbStream!.voteOptions[1].displayNameCount)
        XCTAssertEqual("Reply to All", msg.verbStream!.voteOptions[1].displayName)
        XCTAssertEqual(8, msg.verbStream!.voteOptions[1].msgClsNameCount)
        XCTAssertEqual("IPM.Note", msg.verbStream!.voteOptions[1].msgClsName)
        XCTAssertEqual(7, msg.verbStream!.voteOptions[1].internal1StringCount)
        XCTAssertEqual("Message", msg.verbStream!.voteOptions[1].internal1String)
        XCTAssertEqual(2, msg.verbStream!.voteOptions[1].displayNameCountRepeat)
        XCTAssertEqual("RE", msg.verbStream!.voteOptions[1].displayNameRepeat)
        XCTAssertEqual(0x00000005, msg.verbStream!.voteOptions[1].internal2)
        XCTAssertEqual(0x00, msg.verbStream!.voteOptions[1].internal3)
        XCTAssertFalse(msg.verbStream!.voteOptions[1].fUseUSHeaders)
        XCTAssertEqual(0x00000001, msg.verbStream!.voteOptions[1].internal4)
        XCTAssertEqual(.unknown, msg.verbStream!.voteOptions[1].sendBehavior)
        XCTAssertEqual(0x00000002, msg.verbStream!.voteOptions[1].internal5)
        XCTAssertEqual(0x0067, msg.verbStream!.voteOptions[1].id)
        XCTAssertEqual(0x00030000, msg.verbStream!.voteOptions[1].internal6)
        XCTAssertEqual(2, msg.verbStream!.voteOptions[2].verbType)
        XCTAssertEqual(7, msg.verbStream!.voteOptions[2].displayNameCount)
        XCTAssertEqual("Forward", msg.verbStream!.voteOptions[2].displayName)
        XCTAssertEqual(8, msg.verbStream!.voteOptions[2].msgClsNameCount)
        XCTAssertEqual("IPM.Note", msg.verbStream!.voteOptions[2].msgClsName)
        XCTAssertEqual(7, msg.verbStream!.voteOptions[2].internal1StringCount)
        XCTAssertEqual("Message", msg.verbStream!.voteOptions[2].internal1String)
        XCTAssertEqual(2, msg.verbStream!.voteOptions[2].displayNameCountRepeat)
        XCTAssertEqual("FW", msg.verbStream!.voteOptions[2].displayNameRepeat)
        XCTAssertEqual(0x00000005, msg.verbStream!.voteOptions[2].internal2)
        XCTAssertEqual(0x00, msg.verbStream!.voteOptions[2].internal3)
        XCTAssertFalse(msg.verbStream!.voteOptions[2].fUseUSHeaders)
        XCTAssertEqual(0x00000001, msg.verbStream!.voteOptions[2].internal4)
        XCTAssertEqual(.unknown, msg.verbStream!.voteOptions[2].sendBehavior)
        XCTAssertEqual(0x00000002, msg.verbStream!.voteOptions[2].internal5)
        XCTAssertEqual(0x0068, msg.verbStream!.voteOptions[2].id)
        XCTAssertEqual(0x00040000, msg.verbStream!.voteOptions[2].internal6)
        XCTAssertEqual(3, msg.verbStream!.voteOptions[3].verbType)
        XCTAssertEqual(15, msg.verbStream!.voteOptions[3].displayNameCount)
        XCTAssertEqual("Reply to Folder", msg.verbStream!.voteOptions[3].displayName)
        XCTAssertEqual(8, msg.verbStream!.voteOptions[3].msgClsNameCount)
        XCTAssertEqual("IPM.Post", msg.verbStream!.voteOptions[3].msgClsName)
        XCTAssertEqual(4, msg.verbStream!.voteOptions[3].internal1StringCount)
        XCTAssertEqual("Post", msg.verbStream!.voteOptions[3].internal1String)
        XCTAssertEqual(0, msg.verbStream!.voteOptions[3].displayNameCountRepeat)
        XCTAssertEqual("", msg.verbStream!.voteOptions[3].displayNameRepeat)
        XCTAssertEqual(0x00000005, msg.verbStream!.voteOptions[3].internal2)
        XCTAssertEqual(0x00, msg.verbStream!.voteOptions[3].internal3)
        XCTAssertFalse(msg.verbStream!.voteOptions[3].fUseUSHeaders)
        XCTAssertEqual(0x00000001, msg.verbStream!.voteOptions[3].internal4)
        XCTAssertEqual(.unknown, msg.verbStream!.voteOptions[3].sendBehavior)
        XCTAssertEqual(0x00000002, msg.verbStream!.voteOptions[3].internal5)
        XCTAssertEqual(0x006C, msg.verbStream!.voteOptions[3].id)
        XCTAssertEqual(0x00080000, msg.verbStream!.voteOptions[3].internal6)
        XCTAssertEqual(4, msg.verbStream!.voteOptions[4].verbType)
        XCTAssertEqual(7, msg.verbStream!.voteOptions[4].displayNameCount)
        XCTAssertEqual("Approve", msg.verbStream!.voteOptions[4].displayName)
        XCTAssertEqual(8, msg.verbStream!.voteOptions[4].msgClsNameCount)
        XCTAssertEqual("IPM.Note", msg.verbStream!.voteOptions[4].msgClsName)
        XCTAssertEqual(0, msg.verbStream!.voteOptions[4].internal1StringCount)
        XCTAssertEqual("", msg.verbStream!.voteOptions[4].internal1String)
        XCTAssertEqual(7, msg.verbStream!.voteOptions[4].displayNameCountRepeat)
        XCTAssertEqual("Approve", msg.verbStream!.voteOptions[4].displayNameRepeat)
        XCTAssertEqual(0x00000000, msg.verbStream!.voteOptions[4].internal2)
        XCTAssertEqual(0x00, msg.verbStream!.voteOptions[4].internal3)
        XCTAssertFalse(msg.verbStream!.voteOptions[4].fUseUSHeaders)
        XCTAssertEqual(0x00000001, msg.verbStream!.voteOptions[4].internal4)
        XCTAssertEqual(.promptUser, msg.verbStream!.voteOptions[4].sendBehavior)
        XCTAssertEqual(0x00000002, msg.verbStream!.voteOptions[4].internal5)
        XCTAssertEqual(0x0001, msg.verbStream!.voteOptions[4].id)
        XCTAssertEqual(0xFFFF0000, msg.verbStream!.voteOptions[4].internal6)
        XCTAssertEqual(4, msg.verbStream!.voteOptions[5].verbType)
        XCTAssertEqual(6, msg.verbStream!.voteOptions[5].displayNameCount)
        XCTAssertEqual("Reject", msg.verbStream!.voteOptions[5].displayName)
        XCTAssertEqual(8, msg.verbStream!.voteOptions[5].msgClsNameCount)
        XCTAssertEqual("IPM.Note", msg.verbStream!.voteOptions[5].msgClsName)
        XCTAssertEqual(0, msg.verbStream!.voteOptions[5].internal1StringCount)
        XCTAssertEqual("", msg.verbStream!.voteOptions[5].internal1String)
        XCTAssertEqual(6, msg.verbStream!.voteOptions[5].displayNameCountRepeat)
        XCTAssertEqual("Reject", msg.verbStream!.voteOptions[5].displayNameRepeat)
        XCTAssertEqual(0x00000000, msg.verbStream!.voteOptions[5].internal2)
        XCTAssertEqual(0x00, msg.verbStream!.voteOptions[5].internal3)
        XCTAssertFalse(msg.verbStream!.voteOptions[5].fUseUSHeaders)
        XCTAssertEqual(0x00000001, msg.verbStream!.voteOptions[5].internal4)
        XCTAssertEqual(.promptUser, msg.verbStream!.voteOptions[5].sendBehavior)
        XCTAssertEqual(0x00000002, msg.verbStream!.voteOptions[5].internal5)
        XCTAssertEqual(0x0002, msg.verbStream!.voteOptions[5].id)
        XCTAssertEqual(0xFFFF0000, msg.verbStream!.voteOptions[5].internal6)
        XCTAssertEqual(0x0104, msg.verbStream!.version2)
        XCTAssertEqual(6, msg.verbStream!.voteOptionsExtras.count)
        XCTAssertEqual(5, msg.verbStream!.voteOptionsExtras[0].displayNameCount)
        XCTAssertEqual("Reply", msg.verbStream!.voteOptionsExtras[0].displayName)
        XCTAssertEqual(2, msg.verbStream!.voteOptionsExtras[0].displayNameCountRepeat)
        XCTAssertEqual("RE", msg.verbStream!.voteOptionsExtras[0].displayNameRepeat)
        XCTAssertEqual(12, msg.verbStream!.voteOptionsExtras[1].displayNameCount)
        XCTAssertEqual("Reply to All", msg.verbStream!.voteOptionsExtras[1].displayName)
        XCTAssertEqual(2, msg.verbStream!.voteOptionsExtras[1].displayNameCountRepeat)
        XCTAssertEqual("RE", msg.verbStream!.voteOptionsExtras[1].displayNameRepeat)
        XCTAssertEqual(7, msg.verbStream!.voteOptionsExtras[2].displayNameCount)
        XCTAssertEqual("Forward", msg.verbStream!.voteOptionsExtras[2].displayName)
        XCTAssertEqual(2, msg.verbStream!.voteOptionsExtras[2].displayNameCountRepeat)
        XCTAssertEqual("FW", msg.verbStream!.voteOptionsExtras[2].displayNameRepeat)
        XCTAssertEqual(15, msg.verbStream!.voteOptionsExtras[3].displayNameCount)
        XCTAssertEqual("Reply to Folder", msg.verbStream!.voteOptionsExtras[3].displayName)
        XCTAssertEqual(0, msg.verbStream!.voteOptionsExtras[3].displayNameCountRepeat)
        XCTAssertEqual("", msg.verbStream!.voteOptionsExtras[3].displayNameRepeat)
        XCTAssertEqual(7, msg.verbStream!.voteOptionsExtras[4].displayNameCount)
        XCTAssertEqual("Approve", msg.verbStream!.voteOptionsExtras[4].displayName)
        XCTAssertEqual(7, msg.verbStream!.voteOptionsExtras[4].displayNameCountRepeat)
        XCTAssertEqual("Approve", msg.verbStream!.voteOptionsExtras[4].displayNameRepeat)
        XCTAssertEqual(6, msg.verbStream!.voteOptionsExtras[5].displayNameCount)
        XCTAssertEqual("Reject", msg.verbStream!.voteOptionsExtras[5].displayName)
        XCTAssertEqual(6, msg.verbStream!.voteOptionsExtras[5].displayNameCountRepeat)
        XCTAssertEqual("Reject", msg.verbStream!.voteOptionsExtras[5].displayNameRepeat)
        XCTAssertEqual(0x01, msg.conversationIndex!.header.reserved)
        XCTAssertEqual(0xD6, msg.conversationIndex!.header.currentFileTime.0)
        XCTAssertEqual(0x62, msg.conversationIndex!.header.currentFileTime.1)
        XCTAssertEqual(0x82, msg.conversationIndex!.header.currentFileTime.2)
        XCTAssertEqual(0x3D, msg.conversationIndex!.header.currentFileTime.3)
        XCTAssertEqual(0x3E, msg.conversationIndex!.header.currentFileTime.4)
        XCTAssertEqual(UUID(uuidString: "F41AEE48-D7E0-4F2E-8BDD-56FCA6568479"), msg.conversationIndex!.header.guid)
        XCTAssertEqual(0, msg.conversationIndex!.responseLevels.count)
        XCTAssertFalse(msg.`private`!)
        XCTAssertEqual(1033, msg.messageLocaleId!)
        XCTAssertEqual("hughbellars@gmail.com Calendar", msg.subject!)
        XCTAssertEqual(0x00000000, (msg.receivedRepresentingEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.receivedRepresentingEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.receivedRepresentingEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.unicode], (msg.receivedRepresentingEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars@gmail.com", (msg.receivedRepresentingEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.receivedRepresentingEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.receivedRepresentingEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual(0x00000000, (msg.receivedByEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.receivedByEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.receivedByEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.unicode], (msg.receivedByEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars@gmail.com", (msg.receivedByEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.receivedByEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.receivedByEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual(1595681549.0, msg.creationTime!.timeIntervalSince1970)
        XCTAssertEqual(0x00000000, (msg.senderEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.senderEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.senderEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.unicode], (msg.senderEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars@gmail.com", (msg.senderEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.senderEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.senderEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual(0x00160000, msg.internetMailOverrideFormat!)
        XCTAssertEqual(.readOnly, msg.accessLevel!)
        XCTAssertEqual("multipart/mixed; boundary=\"----=_NextPart_000_0E56_01D66282.62948760\"; charset=\"us-ascii\"", (msg.getProperty(set: .internetHeaders, name: "content-type") as String?)!)
        XCTAssertEqual(["hughbellars@gmail.com"], (msg.getProperty(id: .tagReportDispositionToNames) as [String]?)!)
        XCTAssertEqual(.high, msg.importance!)
        XCTAssertEqual("hughbellars@gmail.com", msg.receivedByEmailAddress!)
        XCTAssertEqual([0x80, 0x9E, 0x00, 0x00], [UInt8](msg.searchKey!))
        XCTAssertEqual("<!&!AAAAAAAAAAAuAAAAAAAAAFnaBymdr1xKsgyLgaeMlsABAMO2jhD3dRHOtM0AqgC7tuYAAAAAAA4AABAAAACr3tCzjSLcTJRSui2DPY2tAQAAAAA=@gmail.com>", (msg.getProperty(id: .tagInternetMessageId) as String?)!)
        XCTAssertEqual("hughbellars@gmail.com", msg.internetAccountName!)
        XCTAssertNotNil(msg.body)
        XCTAssertEqual([.locked], msg.submitFlags)
        XCTAssertEqual(.undefined, msg.nativeBody!)
        XCTAssertEqual("hughbellars@gmail.com", msg.senderEmailAddress!)
        XCTAssertEqual([.timeFlagged], msg.toDoItemFlags)
        XCTAssertEqual(["Purple Category"], msg.keywords!)
        XCTAssertEqual("hughbellars@gmail.com", msg.receivedRepresentingEmailAddress!)
        XCTAssertTrue(msg.conversationIndexTracking!)
        XCTAssertEqual("SMTP", msg.receivedRepresentingAddressType!)
        XCTAssertEqual(1595681518.0, msg.clientSubmitTime!.timeIntervalSince1970)
        XCTAssertEqual("", msg.displayBcc!)
        XCTAssertTrue(msg.readReceiptRequested!)
        XCTAssertEqual(1595681549.0, msg.lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual("SMTP", msg.receivedByAddressType!)
        XCTAssertNotNil(msg.rtfCompressed)
        XCTAssertEqual(0x00000000, (msg.sentRepresentingEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.sentRepresentingEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.sentRepresentingEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.unicode], (msg.sentRepresentingEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars@gmail.com", (msg.sentRepresentingEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.sentRepresentingEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.sentRepresentingEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual("00000002\u{01}hughbellars", msg.internetAccountStamp!)
        XCTAssertTrue(msg.hasAttachments!)
        XCTAssertEqual(1595681519.0, msg.messageDeliveryTime!.timeIntervalSince1970)
        XCTAssertEqual("bellamy.hughd@gmail.com\u{00}", msg.displayTo!)
        XCTAssertEqual("hughbellars@gmail.com Calendar", msg.normalizedSubject!)
        XCTAssertTrue(msg.replyRequested!)
        XCTAssertEqual("hughbellars@gmail.com", msg.receivedRepresentingName!)
        XCTAssertEqual("PCDFEB09\u{00}", msg.reportTag!.cookie)
        XCTAssertEqual(0x00020001, msg.reportTag!.version)
        XCTAssertEqual(0x00000000, msg.reportTag!.storeEntryIdSize)
        XCTAssertNil(msg.reportTag!.storeEntryId)
        XCTAssertEqual(0x00000000, msg.reportTag!.folderEntryIdSize)
        XCTAssertNil(msg.reportTag!.folderEntryId)
        XCTAssertEqual(0x00000000, msg.reportTag!.messageEntryIdSize)
        XCTAssertNil(msg.reportTag!.messageEntryId)
        XCTAssertEqual(0x0000002E, msg.reportTag!.searchFolderEntryIdSize)
        XCTAssertEqual(0x00000000, msg.reportTag!.searchFolderEntryId!.flags)
        XCTAssertEqual(UUID(uuidString: "59DA0729-9DAF-5C4A-B20C-8B81A78C96C0"), msg.reportTag!.searchFolderEntryId!.providerUid)
        XCTAssertEqual(.privateFolder, msg.reportTag!.searchFolderEntryId!.folderType)
        XCTAssertEqual(UUID(uuidString: "108EB6C3-75F7-CE11-B4CD-00AA00BBB6E6"), msg.reportTag!.searchFolderEntryId!.databaseGuid)
        XCTAssertEqual(3940649673949184, msg.reportTag!.searchFolderEntryId!.globalCounter)
        XCTAssertEqual(0x0000, msg.reportTag!.searchFolderEntryId!.pad)
        XCTAssertEqual(0x00000010, msg.reportTag!.messageSearchKeySize)
        XCTAssertEqual([0xAB, 0xDE, 0xD0, 0xB3, 0x8D, 0x22, 0xDC, 0x4C, 0x94, 0x52, 0xBA, 0x2D, 0x83, 0x3D, 0x8D, 0xAD], [UInt8](msg.reportTag!.messageSearchKey!))
        XCTAssertEqual(0x00000001, msg.reportTag!.ansiTextSize)
        XCTAssertEqual("\u{00}", msg.reportTag!.ansiText!)
        XCTAssertEqual(.notAssigned, msg.taskMode!)
        XCTAssertEqual(["hughbellars@gmail.com"], (msg.getProperty(id: .tagReportDispositionToEmailAddresses) as [String]?)!)
        XCTAssertTrue(msg.rtfInSync!)
        XCTAssertTrue(msg.recipientReassignmentProhibited!)
        XCTAssertFalse(msg.deleteAfterSubmit!)
        XCTAssertEqual("hughbellars@gmail.com", msg.sentRepresentingEmailAddress!)
        XCTAssertEqual(.red, msg.followupIcon!)
        XCTAssertEqual(2, msg.predecessorChangeList!.values.count)
        XCTAssertEqual(UUID(uuidString: "504346B0-3346-4246-AC66-333EA06D2732"), msg.predecessorChangeList!.values[0].namespaceGuid)
        XCTAssertEqual([0x00, 0x00, 0x0C, 0xB7], msg.predecessorChangeList!.values[0].localId)
        XCTAssertEqual(UUID(uuidString: "75EB2FE9-5096-8644-83B8-7DE522AA4948"), msg.predecessorChangeList!.values[1].namespaceGuid)
        XCTAssertEqual([0x00], msg.predecessorChangeList!.values[1].localId)
        XCTAssertTrue(msg.originatorDeliveryReportRequested!)
        XCTAssertEqual(.html, msg.messageEditorFormat!)
        XCTAssertEqual("hughbellars@gmail.com", msg.replyRecipientNames!)
        XCTAssertEqual("hughbellars@gmail.com Calendar", msg.conversationTopic!)
        XCTAssertEqual(.personal, msg.sensitivity!)
        XCTAssertEqual(UUID(uuidString: "504346B0-3346-4246-AC66-333EA06D2732"), msg.changeKey!.namespaceGuid)
        XCTAssertEqual([0x00, 0x00, 0x0C, 0xB7], msg.changeKey!.localId)
        XCTAssertNotNil(msg.tnefCorrelationKey)
        XCTAssertEqual([], msg.clientIntent)
        XCTAssertEqual(.flagged, msg.flagStatus!)
        XCTAssertEqual(0, msg.reminderDelta!)
        XCTAssertEqual("hughbellars@gmail.com", msg.sentRepresentingName!)
        XCTAssertEqual(0x00000000, (msg.readReceiptEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.readReceiptEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.readReceiptEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.unicode], (msg.readReceiptEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars@gmail.com", (msg.readReceiptEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.readReceiptEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.readReceiptEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x48, 0x55, 0x47, 0x48, 0x42, 0x45, 0x4C, 0x4C, 0x41, 0x52, 0x53, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.receivedRepresentingSearchKey!))
        XCTAssertEqual("hughbellars@gmail.com", (msg.getProperty(id: .tagSenderName) as String?)!)
        XCTAssertEqual([0x4D, 0x13, 0xDD, 0x12, 0x95, 0x10, 0xB1, 0x4A, 0x80, 0x09, 0xDC, 0x31, 0x9D, 0x11, 0xCB, 0xF8], [UInt8]((msg.getProperty(set: .common, name: "InTransitMessageCorrelator") as Data?)!))
        XCTAssertEqual("IPM.Note", msg.messageClass!)
        XCTAssertEqual("hughbellars@gmail.com", msg.receivedByName!)
        XCTAssertTrue(msg.agingDontAgeMe!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x48, 0x55, 0x47, 0x48, 0x42, 0x45, 0x4C, 0x4C, 0x41, 0x52, 0x53, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.receivedBySearchKey!))
        XCTAssertEqual("hughbellars@gmail.com", msg.lastModifierName!)
        XCTAssertEqual([.read], msg.access)

        XCTAssertEqual(1, msg.recipients.count)
        XCTAssertEqual([0x00, 0x00, 0x94, 0xA6], [UInt8](msg.recipients[0].instanceKey!))
        XCTAssertEqual("bellamy.hughd@gmail.com", msg.recipients[0].displayName!)
        XCTAssertEqual("SMTP", msg.recipients[0].addressType!)
        XCTAssertEqual("bellamy.hughd@gmail.com", msg.recipients[0].emailAddress!)
        XCTAssertEqual(0, msg.recipients[0].rowid!)
        XCTAssertEqual(.primaryRecipient, msg.recipients[0].recipientType!)
        XCTAssertEqual(0x00000000, (msg.recipients[0].entryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.recipients[0].entryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.recipients[0].entryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.unicode], (msg.recipients[0].entryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("bellamy.hughd@gmail.com", (msg.recipients[0].entryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.recipients[0].entryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("bellamy.hughd@gmail.com", (msg.recipients[0].entryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x42, 0x45, 0x4C, 0x4C, 0x41, 0x4D, 0x59, 0x2E, 0x48, 0x55, 0x47, 0x48, 0x44, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D], [UInt8](msg.recipients[0].searchKey!))

        XCTAssertEqual(13, msg.attachments.count)
        XCTAssertNotNil(msg.attachments[0].attachRendering)
        XCTAssertEqual(0, msg.attachments[0].attachmentLinkId!)
        XCTAssertEqual([], msg.attachments[0].attachFlags)
        XCTAssertEqual(79870665600.0, msg.attachments[0].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertNotNil(msg.attachments[0].attachDataBinary)
        XCTAssertEqual(79870665600.0, msg.attachments[0].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertFalse(msg.attachments[0].attachmentHidden!)
        XCTAssertEqual(.attachment, msg.attachments[0].objectType!)
        XCTAssertEqual([0x00, 0x00, 0x00, 0x00], [UInt8](msg.attachments[0].recordKey!))
        XCTAssertFalse(msg.attachments[0].attachmentContactPhoto!)
        XCTAssertEqual(.embeddedMessage, msg.attachments[0].attachMethod!)
        XCTAssertEqual(.readOnly, msg.attachments[0].accessLevel!)
        XCTAssertEqual(0x00000000, msg.attachments[0].attachmentFlags!)
        XCTAssertEqual([.read], msg.attachments[0].access)
        XCTAssertEqual(4294967295, msg.attachments[0].renderingPosition!)
        XCTAssertEqual("Untitled Attachment", msg.attachments[0].attachFilename!)
        XCTAssertEqual([], [UInt8](msg.attachments[0].attachEncoding!))
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[0].storeSupportMask)
        XCTAssertEqual("MVP award delivery information", msg.attachments[0].displayName!)
        XCTAssertEqual(0, msg.attachments[0].attachNumber!)

        XCTAssertTrue(msg.attachments[1].attachmentHidden!)
        XCTAssertEqual([], [UInt8](msg.attachments[1].attachEncoding!))
        XCTAssertEqual(".png", msg.attachments[1].attachExtension!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[1].storeSupportMask)
        XCTAssertEqual([.read], msg.attachments[1].access)
        XCTAssertNotNil(msg.attachments[1].attachDataBinary)
        XCTAssertEqual("image013.png", msg.attachments[1].attachLongFilename!)
        XCTAssertFalse((msg.attachments[1].getProperty(set: .attachment, name: "AttachmentWasSavedToCloud") as Bool?)!)
        XCTAssertNotNil(msg.attachments[1].attachRendering)
        XCTAssertEqual(79870665600.0, msg.attachments[1].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual(79870665600.0, msg.attachments[1].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual("image013.png", msg.attachments[1].attachFilename!)
        XCTAssertEqual(.attachment, msg.attachments[1].objectType!)
        XCTAssertEqual(1, msg.attachments[1].attachNumber!)
        XCTAssertEqual("image013.png@01D66282.5CC911C0", msg.attachments[1].attachContentId!)
        XCTAssertEqual(0, msg.attachments[1].attachmentLinkId!)
        XCTAssertEqual("image013.png", msg.attachments[1].displayName!)
        XCTAssertEqual(4294967295, msg.attachments[1].renderingPosition!)
        XCTAssertEqual([.renderedInBody], msg.attachments[1].attachFlags)
        XCTAssertEqual(.byValue, msg.attachments[1].attachMethod!)
        XCTAssertFalse(msg.attachments[1].attachmentContactPhoto!)
        XCTAssertEqual("image/png", msg.attachments[1].attachMimeTag!)
        XCTAssertEqual(.readOnly, msg.attachments[1].accessLevel!)
        XCTAssertEqual(0x00000008, msg.attachments[1].attachmentFlags!)
        XCTAssertEqual("", (msg.attachments[1].getProperty(set: .attachment, name: "AttachmentOriginalUrl") as String?)!)
        XCTAssertEqual([0x01, 0x00, 0x00, 0x00], [UInt8](msg.attachments[1].recordKey!))

        XCTAssertTrue(msg.attachments[2].attachmentHidden!)
        XCTAssertEqual([], [UInt8](msg.attachments[2].attachEncoding!))
        XCTAssertEqual(".gif", msg.attachments[2].attachExtension!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[2].storeSupportMask)
        XCTAssertEqual([.read], msg.attachments[2].access)
        XCTAssertNotNil(msg.attachments[2].attachDataBinary)
        XCTAssertEqual("image012.gif", msg.attachments[2].attachLongFilename!)
        XCTAssertFalse((msg.attachments[2].getProperty(set: .attachment, name: "AttachmentWasSavedToCloud") as Bool?)!)
        XCTAssertNotNil(msg.attachments[2].attachRendering)
        XCTAssertEqual(79870665600.0, msg.attachments[2].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual("image012.gif", msg.attachments[2].attachFilename!)
        XCTAssertEqual(79870665600.0, msg.attachments[2].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual("image012.gif@01D66282.4EB1E440", msg.attachments[2].attachContentId!)
        XCTAssertEqual(0, msg.attachments[2].attachmentLinkId!)
        XCTAssertEqual(.attachment, msg.attachments[2].objectType!)
        XCTAssertEqual("image012.gif", msg.attachments[2].displayName!)
        XCTAssertEqual(2, msg.attachments[2].attachNumber!)
        XCTAssertEqual(4294967295, msg.attachments[2].renderingPosition!)
        XCTAssertEqual(.byValue, msg.attachments[2].attachMethod!)
        XCTAssertEqual([.renderedInBody], msg.attachments[2].attachFlags)
        XCTAssertFalse(msg.attachments[2].attachmentContactPhoto!)
        XCTAssertEqual("image/gif", msg.attachments[2].attachMimeTag!)
        XCTAssertEqual(.readOnly, msg.attachments[2].accessLevel!)
        XCTAssertEqual(0x00000008, msg.attachments[2].attachmentFlags!)
        XCTAssertEqual("", (msg.attachments[2].getProperty(set: .attachment, name: "AttachmentOriginalUrl") as String?)!)
        XCTAssertEqual([0x02, 0x00, 0x00, 0x00], [UInt8](msg.attachments[2].recordKey!))

        XCTAssertTrue(msg.attachments[3].attachmentHidden!)
        XCTAssertEqual([], [UInt8](msg.attachments[3].attachEncoding!))
        XCTAssertEqual(".gif", msg.attachments[3].attachExtension!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[3].storeSupportMask)
        XCTAssertEqual([.read], msg.attachments[3].access)
        XCTAssertNotNil(msg.attachments[3].attachDataBinary)
        XCTAssertEqual("image011.gif", msg.attachments[3].attachLongFilename!)
        XCTAssertFalse((msg.attachments[3].getProperty(set: .attachment, name: "AttachmentWasSavedToCloud") as Bool?)!)
        XCTAssertNotNil(msg.attachments[3].attachRendering)
        XCTAssertEqual(79870665600.0, msg.attachments[3].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual("image011.gif", msg.attachments[3].attachFilename!)
        XCTAssertEqual(79870665600.0, msg.attachments[3].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual("image011.gif@01D66282.4EB1E440", msg.attachments[3].attachContentId!)
        XCTAssertEqual(0, msg.attachments[3].attachmentLinkId!)
        XCTAssertEqual(.attachment, msg.attachments[3].objectType!)
        XCTAssertEqual("image011.gif", msg.attachments[3].displayName!)
        XCTAssertEqual(3, msg.attachments[3].attachNumber!)
        XCTAssertEqual(4294967295, msg.attachments[3].renderingPosition!)
        XCTAssertEqual(.byValue, msg.attachments[3].attachMethod!)
        XCTAssertEqual([.renderedInBody], msg.attachments[3].attachFlags)
        XCTAssertFalse(msg.attachments[3].attachmentContactPhoto!)
        XCTAssertEqual("image/gif", msg.attachments[3].attachMimeTag!)
        XCTAssertEqual(.readOnly, msg.attachments[3].accessLevel!)
        XCTAssertEqual(0x00000008, msg.attachments[3].attachmentFlags!)
        XCTAssertEqual("", (msg.attachments[3].getProperty(set: .attachment, name: "AttachmentOriginalUrl") as String?)!)
        XCTAssertEqual([0x03, 0x00, 0x00, 0x00], [UInt8](msg.attachments[3].recordKey!))

        XCTAssertFalse((msg.attachments[4].getProperty(set: .attachment, name: "AttachmentWasSavedToCloud") as Bool?)!)
        XCTAssertEqual(0, msg.attachments[4].attachmentLinkId!)
        XCTAssertEqual("image/gif", msg.attachments[4].attachMimeTag!)
        XCTAssertEqual(.byValue, msg.attachments[4].attachMethod!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[4].storeSupportMask)
        XCTAssertEqual(".gif", msg.attachments[4].attachExtension!)
        XCTAssertNotNil(msg.attachments[4].attachRendering)
        XCTAssertEqual("image010.gif@01D66282.4EB1E440", msg.attachments[4].attachContentId!)
        XCTAssertEqual(.readOnly, msg.attachments[4].accessLevel!)
        XCTAssertEqual([], [UInt8](msg.attachments[4].attachEncoding!))
        XCTAssertNotNil(msg.attachments[4].attachDataBinary)
        XCTAssertEqual("", (msg.attachments[4].getProperty(set: .attachment, name: "AttachmentOriginalUrl") as String?)!)
        XCTAssertFalse(msg.attachments[4].attachmentContactPhoto!)
        XCTAssertEqual([0x04, 0x00, 0x00, 0x00], [UInt8](msg.attachments[4].recordKey!))
        XCTAssertEqual([.renderedInBody], msg.attachments[4].attachFlags)
        XCTAssertTrue(msg.attachments[4].attachmentHidden!)
        XCTAssertEqual(4, msg.attachments[4].attachNumber!)
        XCTAssertEqual([.read], msg.attachments[4].access)
        XCTAssertEqual("image010.gif", msg.attachments[4].displayName!)
        XCTAssertEqual(79870665600.0, msg.attachments[4].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual(.attachment, msg.attachments[4].objectType!)
        XCTAssertEqual("image010.gif", msg.attachments[4].attachFilename!)
        XCTAssertEqual(4294967295, msg.attachments[4].renderingPosition!)
        XCTAssertEqual("image010.gif", msg.attachments[4].attachLongFilename!)
        XCTAssertEqual(79870665600.0, msg.attachments[4].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual(0x00000008, msg.attachments[4].attachmentFlags!)

        XCTAssertFalse((msg.attachments[5].getProperty(set: .attachment, name: "AttachmentWasSavedToCloud") as Bool?)!)
        XCTAssertEqual(0, msg.attachments[5].attachmentLinkId!)
        XCTAssertEqual("image/gif", msg.attachments[5].attachMimeTag!)
        XCTAssertEqual(.byValue, msg.attachments[5].attachMethod!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[5].storeSupportMask)
        XCTAssertEqual(".gif", msg.attachments[5].attachExtension!)
        XCTAssertNotNil(msg.attachments[5].attachRendering)
        XCTAssertEqual("image009.gif@01D66282.4EB1E440", msg.attachments[5].attachContentId!)
        XCTAssertEqual(.readOnly, msg.attachments[5].accessLevel!)
        XCTAssertEqual([], [UInt8](msg.attachments[5].attachEncoding!))
        XCTAssertNotNil(msg.attachments[5].attachDataBinary)
        XCTAssertEqual("", (msg.attachments[5].getProperty(set: .attachment, name: "AttachmentOriginalUrl") as String?)!)
        XCTAssertFalse(msg.attachments[5].attachmentContactPhoto!)
        XCTAssertEqual([0x05, 0x00, 0x00, 0x00], [UInt8](msg.attachments[5].recordKey!))
        XCTAssertEqual([.renderedInBody], msg.attachments[5].attachFlags)
        XCTAssertTrue(msg.attachments[5].attachmentHidden!)
        XCTAssertEqual(5, msg.attachments[5].attachNumber!)
        XCTAssertEqual([.read], msg.attachments[5].access)
        XCTAssertEqual("image009.gif", msg.attachments[5].displayName!)
        XCTAssertEqual(79870665600.0, msg.attachments[5].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual(.attachment, msg.attachments[5].objectType!)
        XCTAssertEqual("image009.gif", msg.attachments[5].attachFilename!)
        XCTAssertEqual(4294967295, msg.attachments[5].renderingPosition!)
        XCTAssertEqual("image009.gif", msg.attachments[5].attachLongFilename!)
        XCTAssertEqual(79870665600.0, msg.attachments[5].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual(0x00000008, msg.attachments[5].attachmentFlags!)

        XCTAssertFalse((msg.attachments[6].getProperty(set: .attachment, name: "AttachmentWasSavedToCloud") as Bool?)!)
        XCTAssertEqual(0, msg.attachments[6].attachmentLinkId!)
        XCTAssertEqual("image/gif", msg.attachments[6].attachMimeTag!)
        XCTAssertEqual(.byValue, msg.attachments[6].attachMethod!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[6].storeSupportMask)
        XCTAssertEqual(".gif", msg.attachments[6].attachExtension!)
        XCTAssertNotNil(msg.attachments[6].attachRendering)
        XCTAssertEqual("image008.gif@01D66282.4EB1E440", msg.attachments[6].attachContentId!)
        XCTAssertEqual(.readOnly, msg.attachments[6].accessLevel!)
        XCTAssertEqual([], [UInt8](msg.attachments[6].attachEncoding!))
        XCTAssertNotNil(msg.attachments[6].attachDataBinary)
        XCTAssertEqual("", (msg.attachments[6].getProperty(set: .attachment, name: "AttachmentOriginalUrl") as String?)!)
        XCTAssertFalse(msg.attachments[6].attachmentContactPhoto!)
        XCTAssertEqual([0x06, 0x00, 0x00, 0x00], [UInt8](msg.attachments[6].recordKey!))
        XCTAssertEqual([.renderedInBody], msg.attachments[6].attachFlags)
        XCTAssertTrue(msg.attachments[6].attachmentHidden!)
        XCTAssertEqual(6, msg.attachments[6].attachNumber!)
        XCTAssertEqual([.read], msg.attachments[6].access)
        XCTAssertEqual("image008.gif", msg.attachments[6].displayName!)
        XCTAssertEqual(79870665600.0, msg.attachments[6].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual(.attachment, msg.attachments[6].objectType!)
        XCTAssertEqual("image008.gif", msg.attachments[6].attachFilename!)
        XCTAssertEqual(4294967295, msg.attachments[6].renderingPosition!)
        XCTAssertEqual("image008.gif", msg.attachments[6].attachLongFilename!)
        XCTAssertEqual(79870665600.0, msg.attachments[6].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual(0x00000008, msg.attachments[6].attachmentFlags!)

        XCTAssertEqual(".gif", msg.attachments[7].attachExtension!)
        XCTAssertTrue(msg.attachments[7].attachmentHidden!)
        XCTAssertEqual([], [UInt8](msg.attachments[7].attachEncoding!))
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[7].storeSupportMask)
        XCTAssertEqual([.read], msg.attachments[7].access)
        XCTAssertNotNil(msg.attachments[7].attachDataBinary)
        XCTAssertFalse((msg.attachments[7].getProperty(set: .attachment, name: "AttachmentWasSavedToCloud") as Bool?)!)
        XCTAssertEqual("image007.gif", msg.attachments[7].attachLongFilename!)
        XCTAssertNotNil(msg.attachments[7].attachRendering)
        XCTAssertEqual(79870665600.0, msg.attachments[7].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual(79870665600.0, msg.attachments[7].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual(0, msg.attachments[7].attachmentLinkId!)
        XCTAssertEqual("image007.gif", msg.attachments[7].attachFilename!)
        XCTAssertEqual(7, msg.attachments[7].attachNumber!)
        XCTAssertEqual(.attachment, msg.attachments[7].objectType!)
        XCTAssertEqual("image007.gif@01D66282.4EB1E440", msg.attachments[7].attachContentId!)
        XCTAssertEqual("image007.gif", msg.attachments[7].displayName!)
        XCTAssertEqual(4294967295, msg.attachments[7].renderingPosition!)
        XCTAssertEqual([.renderedInBody], msg.attachments[7].attachFlags)
        XCTAssertFalse(msg.attachments[7].attachmentContactPhoto!)
        XCTAssertEqual(.byValue, msg.attachments[7].attachMethod!)
        XCTAssertEqual("image/gif", msg.attachments[7].attachMimeTag!)
        XCTAssertEqual(.readOnly, msg.attachments[7].accessLevel!)
        XCTAssertEqual("", (msg.attachments[7].getProperty(set: .attachment, name: "AttachmentOriginalUrl") as String?)!)
        XCTAssertEqual(0x00000008, msg.attachments[7].attachmentFlags!)
        XCTAssertEqual([0x07, 0x00, 0x00, 0x00], [UInt8](msg.attachments[7].recordKey!))

        XCTAssertTrue(msg.attachments[8].attachmentHidden!)
        XCTAssertEqual([], [UInt8](msg.attachments[8].attachEncoding!))
        XCTAssertEqual(".gif", msg.attachments[8].attachExtension!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[8].storeSupportMask)
        XCTAssertEqual([.read], msg.attachments[8].access)
        XCTAssertNotNil(msg.attachments[8].attachDataBinary)
        XCTAssertEqual("image006.gif", msg.attachments[8].attachLongFilename!)
        XCTAssertFalse((msg.attachments[8].getProperty(set: .attachment, name: "AttachmentWasSavedToCloud") as Bool?)!)
        XCTAssertNotNil(msg.attachments[8].attachRendering)
        XCTAssertEqual(79870665600.0, msg.attachments[8].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual(79870665600.0, msg.attachments[8].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual("image006.gif", msg.attachments[8].attachFilename!)
        XCTAssertEqual(.attachment, msg.attachments[8].objectType!)
        XCTAssertEqual(8, msg.attachments[8].attachNumber!)
        XCTAssertEqual("image006.gif@01D66282.4EB1E440", msg.attachments[8].attachContentId!)
        XCTAssertEqual(0, msg.attachments[8].attachmentLinkId!)
        XCTAssertEqual("image006.gif", msg.attachments[8].displayName!)
        XCTAssertEqual(4294967295, msg.attachments[8].renderingPosition!)
        XCTAssertEqual([.renderedInBody], msg.attachments[8].attachFlags)
        XCTAssertEqual(.byValue, msg.attachments[8].attachMethod!)
        XCTAssertFalse(msg.attachments[8].attachmentContactPhoto!)
        XCTAssertEqual("image/gif", msg.attachments[8].attachMimeTag!)
        XCTAssertEqual(.readOnly, msg.attachments[8].accessLevel!)
        XCTAssertEqual(0x00000008, msg.attachments[8].attachmentFlags!)
        XCTAssertEqual("", (msg.attachments[8].getProperty(set: .attachment, name: "AttachmentOriginalUrl") as String?)!)
        XCTAssertEqual([0x08, 0x00, 0x00, 0x00], [UInt8](msg.attachments[8].recordKey!))

        XCTAssertNotNil(msg.attachments[9].attachRendering)
        XCTAssertEqual([.renderedInBody], msg.attachments[9].attachFlags)
        XCTAssertEqual(4294967295, msg.attachments[9].renderingPosition!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[9].storeSupportMask)
        XCTAssertEqual(0x00000008, msg.attachments[9].attachmentFlags!)
        XCTAssertEqual("image/gif", msg.attachments[9].attachMimeTag!)
        XCTAssertEqual(0, msg.attachments[9].attachmentLinkId!)
        XCTAssertTrue(msg.attachments[9].attachmentHidden!)
        XCTAssertNotNil(msg.attachments[9].attachDataBinary)
        XCTAssertEqual(".gif", msg.attachments[9].attachExtension!)
        XCTAssertEqual(79870665600.0, msg.attachments[9].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual(.byValue, msg.attachments[9].attachMethod!)
        XCTAssertEqual(9, msg.attachments[9].attachNumber!)
        XCTAssertEqual(.attachment, msg.attachments[9].objectType!)
        XCTAssertEqual("image005.gif@01D66282.4EB1E440", msg.attachments[9].attachContentId!)
        XCTAssertEqual(79870665600.0, msg.attachments[9].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual([.read], msg.attachments[9].access)
        XCTAssertEqual([0x09, 0x00, 0x00, 0x00], [UInt8](msg.attachments[9].recordKey!))
        XCTAssertFalse(msg.attachments[9].attachmentContactPhoto!)
        XCTAssertFalse((msg.attachments[9].getProperty(set: .attachment, name: "AttachmentWasSavedToCloud") as Bool?)!)
        XCTAssertEqual("image005.gif", msg.attachments[9].displayName!)
        XCTAssertEqual([], [UInt8](msg.attachments[9].attachEncoding!))
        XCTAssertEqual("image005.gif", msg.attachments[9].attachFilename!)
        XCTAssertEqual(.readOnly, msg.attachments[9].accessLevel!)
        XCTAssertEqual("image005.gif", msg.attachments[9].attachLongFilename!)
        XCTAssertEqual("", (msg.attachments[9].getProperty(set: .attachment, name: "AttachmentOriginalUrl") as String?)!)

        XCTAssertEqual([.renderedInBody], msg.attachments[10].attachFlags)
        XCTAssertEqual(0, msg.attachments[10].attachmentLinkId!)
        XCTAssertEqual(.readOnly, msg.attachments[10].accessLevel!)
        XCTAssertEqual(10, msg.attachments[10].attachNumber!)
        XCTAssertNotNil(msg.attachments[10].attachDataBinary)
        XCTAssertEqual(".gif", msg.attachments[10].attachExtension!)
        XCTAssertFalse((msg.attachments[10].getProperty(set: .attachment, name: "AttachmentWasSavedToCloud") as Bool?)!)
        XCTAssertTrue(msg.attachments[10].attachmentHidden!)
        XCTAssertEqual([], [UInt8](msg.attachments[10].attachEncoding!))
        XCTAssertEqual("", (msg.attachments[10].getProperty(set: .attachment, name: "AttachmentOriginalUrl") as String?)!)
        XCTAssertEqual("image004.gif", msg.attachments[10].attachFilename!)
        XCTAssertEqual(79870665600.0, msg.attachments[10].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual(0x00000008, msg.attachments[10].attachmentFlags!)
        XCTAssertEqual("image/gif", msg.attachments[10].attachMimeTag!)
        XCTAssertFalse(msg.attachments[10].attachmentContactPhoto!)
        XCTAssertEqual([0x0A, 0x00, 0x00, 0x00], [UInt8](msg.attachments[10].recordKey!))
        XCTAssertEqual([.read], msg.attachments[10].access)
        XCTAssertEqual(.attachment, msg.attachments[10].objectType!)
        XCTAssertEqual(79870665600.0, msg.attachments[10].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual("image004.gif@01D66282.4EB1E440", msg.attachments[10].attachContentId!)
        XCTAssertEqual(.byValue, msg.attachments[10].attachMethod!)
        XCTAssertEqual("image004.gif", msg.attachments[10].attachLongFilename!)
        XCTAssertEqual("image004.gif", msg.attachments[10].displayName!)
        XCTAssertNotNil(msg.attachments[10].attachRendering)
        XCTAssertEqual(4294967295, msg.attachments[10].renderingPosition!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[10].storeSupportMask)

        XCTAssertFalse((msg.attachments[11].getProperty(set: .attachment, name: "AttachmentWasSavedToCloud") as Bool?)!)
        XCTAssertEqual(0, msg.attachments[11].attachmentLinkId!)
        XCTAssertEqual("image/gif", msg.attachments[11].attachMimeTag!)
        XCTAssertEqual(.byValue, msg.attachments[11].attachMethod!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[11].storeSupportMask)
        XCTAssertEqual(".gif", msg.attachments[11].attachExtension!)
        XCTAssertNotNil(msg.attachments[11].attachRendering)
        XCTAssertEqual("image003.gif@01D66282.4EB1E440", msg.attachments[11].attachContentId!)
        XCTAssertEqual(.readOnly, msg.attachments[11].accessLevel!)
        XCTAssertEqual([], [UInt8](msg.attachments[11].attachEncoding!))
        XCTAssertNotNil(msg.attachments[11].attachDataBinary)
        XCTAssertEqual("", (msg.attachments[11].getProperty(set: .attachment, name: "AttachmentOriginalUrl") as String?)!)
        XCTAssertFalse(msg.attachments[11].attachmentContactPhoto!)
        XCTAssertEqual([0x0B, 0x00, 0x00, 0x00], [UInt8](msg.attachments[11].recordKey!))
        XCTAssertEqual([.renderedInBody], msg.attachments[11].attachFlags)
        XCTAssertTrue(msg.attachments[11].attachmentHidden!)
        XCTAssertEqual(11, msg.attachments[11].attachNumber!)
        XCTAssertEqual([.read], msg.attachments[11].access)
        XCTAssertEqual("image003.gif", msg.attachments[11].displayName!)
        XCTAssertEqual(79870665600.0, msg.attachments[11].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual(.attachment, msg.attachments[11].objectType!)
        XCTAssertEqual("image003.gif", msg.attachments[11].attachFilename!)
        XCTAssertEqual(4294967295, msg.attachments[11].renderingPosition!)
        XCTAssertEqual("image003.gif", msg.attachments[11].attachLongFilename!)
        XCTAssertEqual(79870665600.0, msg.attachments[11].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual(0x00000008, msg.attachments[11].attachmentFlags!)

        XCTAssertFalse((msg.attachments[12].getProperty(set: .attachment, name: "AttachmentWasSavedToCloud") as Bool?)!)
        XCTAssertEqual(0, msg.attachments[12].attachmentLinkId!)
        XCTAssertEqual(.byValue, msg.attachments[12].attachMethod!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[12].storeSupportMask)
        XCTAssertEqual(".ics", msg.attachments[12].attachExtension!)
        XCTAssertNotNil(msg.attachments[12].attachRendering)
        XCTAssertEqual(.readOnly, msg.attachments[12].accessLevel!)
        XCTAssertEqual([], [UInt8](msg.attachments[12].attachEncoding!))
        XCTAssertNotNil(msg.attachments[12].attachDataBinary)
        XCTAssertEqual("", (msg.attachments[12].getProperty(set: .attachment, name: "AttachmentOriginalUrl") as String?)!)
        XCTAssertEqual("BCF0060000000000C000000000000046", msg.attachments[12].attachPayloadProviderGuidString!)
        XCTAssertFalse(msg.attachments[12].attachmentContactPhoto!)
        XCTAssertEqual([0x0C, 0x00, 0x00, 0x00], [UInt8](msg.attachments[12].recordKey!))
        XCTAssertEqual([], msg.attachments[12].attachFlags)
        XCTAssertFalse(msg.attachments[12].attachmentHidden!)
        XCTAssertEqual(12, msg.attachments[12].attachNumber!)
        XCTAssertEqual([.read], msg.attachments[12].access)
        XCTAssertEqual("hughbellars@gmail.com Calendar.ics", msg.attachments[12].displayName!)
        XCTAssertEqual(79870665600.0, msg.attachments[12].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual(.attachment, msg.attachments[12].objectType!)
        XCTAssertEqual("Appointment", msg.attachments[12].attachPayloadClass!)
        XCTAssertEqual("", msg.attachments[12].attachFilename!)
        XCTAssertEqual(4294967295, msg.attachments[12].renderingPosition!)
        XCTAssertEqual("hughbellars@gmail.com Calendar.ics", msg.attachments[12].attachLongFilename!)
        XCTAssertEqual(79870665600.0, msg.attachments[12].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual(0x00000000, msg.attachments[12].attachmentFlags!)
    }

    func testReadMine3() throws {
        let data = try getData(name: "hughbe/FlaggedMessage")
        let msg = try MsgFile(data: data)
        
        XCTAssertEqual([.openForContextMenu], msg.sideEffects)
        XCTAssertEqual("00000002\u{01}hughbellars@gmail.com\u{01}hughbellars@gmail.com", msg.nextSendAcct!)
        XCTAssertEqual(.readOnly, msg.accessLevel!)
        XCTAssertEqual("SMTP", (msg.getProperty(id: .tagSenderAddressType) as String?)!)
        XCTAssertEqual(0x00000000, (msg.sentRepresentingEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.sentRepresentingEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.sentRepresentingEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.unicode], (msg.sentRepresentingEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars@gmail.com", (msg.sentRepresentingEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.sentRepresentingEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.sentRepresentingEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x48, 0x55, 0x47, 0x48, 0x42, 0x45, 0x4C, 0x4C, 0x41, 0x52, 0x53, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D], [UInt8](msg.sentRepresentingSearchKey!))
        XCTAssertEqual([.read], msg.access)
        XCTAssertEqual([.timeFlagged], msg.toDoItemFlags)
        XCTAssertEqual(1595685086.0, msg.creationTime!.timeIntervalSince1970)
        XCTAssertFalse(msg.deleteAfterSubmit!)
        XCTAssertNotNil(msg.transportMessageHeaders)
        XCTAssertEqual("hughbellars@gmail.com", msg.lastModifierName!)
        XCTAssertEqual(1595681518.0, msg.clientSubmitTime!.timeIntervalSince1970)
        XCTAssertEqual("", msg.subjectPrefix!)
        XCTAssertEqual("00000002\u{01}hughbellars@gmail.com\u{01}hughbellars@gmail.com", msg.primarySendAccount!)
        XCTAssertEqual(.red, msg.followupIcon!)
        XCTAssertFalse(msg.`private`!)
        XCTAssertTrue(msg.readReceiptRequested!)
        XCTAssertEqual(1, (msg.getProperty(set: .common, lid: 0x000085D7) as UInt32?)!)
        XCTAssertEqual("multipart/mixed; boundary=\"----=_NextPart_000_0E56_01D66282.62948760\"; charset=\"us-ascii\"", (msg.getProperty(set: .internetHeaders, name: "content-type") as String?)!)
        XCTAssertTrue(msg.originatorDeliveryReportRequested!)
        XCTAssertEqual([.read, .hasAttachment, MessageFlags(rawValue: 0x00030000)], msg.messageFlags)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x48, 0x55, 0x47, 0x48, 0x42, 0x45, 0x4C, 0x4C, 0x41, 0x52, 0x53, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.receivedBySearchKey!))
        XCTAssertEqual("newMail", (msg.getProperty(set: .common, name: "ComposeType") as String?)!)
        XCTAssertEqual("hughbellars@gmail.com", msg.sentRepresentingEmailAddress!)
        XCTAssertEqual("hughbellars@gmail.com", msg.receivedRepresentingEmailAddress!)
        XCTAssertEqual(1595685086.0, msg.lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x48, 0x55, 0x47, 0x48, 0x42, 0x45, 0x4C, 0x4C, 0x41, 0x52, 0x53, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.receivedRepresentingSearchKey!))
        XCTAssertTrue(msg.conversationIndexTracking!)
        XCTAssertEqual(0x0102, msg.verbStream!.version)
        XCTAssertEqual(6, msg.verbStream!.count)
        XCTAssertEqual(6, msg.verbStream!.voteOptions.count)
        XCTAssertEqual(0, msg.verbStream!.voteOptions[0].verbType)
        XCTAssertEqual(5, msg.verbStream!.voteOptions[0].displayNameCount)
        XCTAssertEqual("Reply", msg.verbStream!.voteOptions[0].displayName)
        XCTAssertEqual(8, msg.verbStream!.voteOptions[0].msgClsNameCount)
        XCTAssertEqual("IPM.Note", msg.verbStream!.voteOptions[0].msgClsName)
        XCTAssertEqual(7, msg.verbStream!.voteOptions[0].internal1StringCount)
        XCTAssertEqual("Message", msg.verbStream!.voteOptions[0].internal1String)
        XCTAssertEqual(2, msg.verbStream!.voteOptions[0].displayNameCountRepeat)
        XCTAssertEqual("RE", msg.verbStream!.voteOptions[0].displayNameRepeat)
        XCTAssertEqual(0x00000005, msg.verbStream!.voteOptions[0].internal2)
        XCTAssertEqual(0x00, msg.verbStream!.voteOptions[0].internal3)
        XCTAssertFalse(msg.verbStream!.voteOptions[0].fUseUSHeaders)
        XCTAssertEqual(0x00000001, msg.verbStream!.voteOptions[0].internal4)
        XCTAssertEqual(.unknown, msg.verbStream!.voteOptions[0].sendBehavior)
        XCTAssertEqual(0x00000002, msg.verbStream!.voteOptions[0].internal5)
        XCTAssertEqual(0x0066, msg.verbStream!.voteOptions[0].id)
        XCTAssertEqual(0x00020000, msg.verbStream!.voteOptions[0].internal6)
        XCTAssertEqual(1, msg.verbStream!.voteOptions[1].verbType)
        XCTAssertEqual(12, msg.verbStream!.voteOptions[1].displayNameCount)
        XCTAssertEqual("Reply to All", msg.verbStream!.voteOptions[1].displayName)
        XCTAssertEqual(8, msg.verbStream!.voteOptions[1].msgClsNameCount)
        XCTAssertEqual("IPM.Note", msg.verbStream!.voteOptions[1].msgClsName)
        XCTAssertEqual(7, msg.verbStream!.voteOptions[1].internal1StringCount)
        XCTAssertEqual("Message", msg.verbStream!.voteOptions[1].internal1String)
        XCTAssertEqual(2, msg.verbStream!.voteOptions[1].displayNameCountRepeat)
        XCTAssertEqual("RE", msg.verbStream!.voteOptions[1].displayNameRepeat)
        XCTAssertEqual(0x00000005, msg.verbStream!.voteOptions[1].internal2)
        XCTAssertEqual(0x00, msg.verbStream!.voteOptions[1].internal3)
        XCTAssertFalse(msg.verbStream!.voteOptions[1].fUseUSHeaders)
        XCTAssertEqual(0x00000001, msg.verbStream!.voteOptions[1].internal4)
        XCTAssertEqual(.unknown, msg.verbStream!.voteOptions[1].sendBehavior)
        XCTAssertEqual(0x00000002, msg.verbStream!.voteOptions[1].internal5)
        XCTAssertEqual(0x0067, msg.verbStream!.voteOptions[1].id)
        XCTAssertEqual(0x00030000, msg.verbStream!.voteOptions[1].internal6)
        XCTAssertEqual(2, msg.verbStream!.voteOptions[2].verbType)
        XCTAssertEqual(7, msg.verbStream!.voteOptions[2].displayNameCount)
        XCTAssertEqual("Forward", msg.verbStream!.voteOptions[2].displayName)
        XCTAssertEqual(8, msg.verbStream!.voteOptions[2].msgClsNameCount)
        XCTAssertEqual("IPM.Note", msg.verbStream!.voteOptions[2].msgClsName)
        XCTAssertEqual(7, msg.verbStream!.voteOptions[2].internal1StringCount)
        XCTAssertEqual("Message", msg.verbStream!.voteOptions[2].internal1String)
        XCTAssertEqual(2, msg.verbStream!.voteOptions[2].displayNameCountRepeat)
        XCTAssertEqual("FW", msg.verbStream!.voteOptions[2].displayNameRepeat)
        XCTAssertEqual(0x00000005, msg.verbStream!.voteOptions[2].internal2)
        XCTAssertEqual(0x00, msg.verbStream!.voteOptions[2].internal3)
        XCTAssertFalse(msg.verbStream!.voteOptions[2].fUseUSHeaders)
        XCTAssertEqual(0x00000001, msg.verbStream!.voteOptions[2].internal4)
        XCTAssertEqual(.unknown, msg.verbStream!.voteOptions[2].sendBehavior)
        XCTAssertEqual(0x00000002, msg.verbStream!.voteOptions[2].internal5)
        XCTAssertEqual(0x0068, msg.verbStream!.voteOptions[2].id)
        XCTAssertEqual(0x00040000, msg.verbStream!.voteOptions[2].internal6)
        XCTAssertEqual(3, msg.verbStream!.voteOptions[3].verbType)
        XCTAssertEqual(15, msg.verbStream!.voteOptions[3].displayNameCount)
        XCTAssertEqual("Reply to Folder", msg.verbStream!.voteOptions[3].displayName)
        XCTAssertEqual(8, msg.verbStream!.voteOptions[3].msgClsNameCount)
        XCTAssertEqual("IPM.Post", msg.verbStream!.voteOptions[3].msgClsName)
        XCTAssertEqual(4, msg.verbStream!.voteOptions[3].internal1StringCount)
        XCTAssertEqual("Post", msg.verbStream!.voteOptions[3].internal1String)
        XCTAssertEqual(0, msg.verbStream!.voteOptions[3].displayNameCountRepeat)
        XCTAssertEqual("", msg.verbStream!.voteOptions[3].displayNameRepeat)
        XCTAssertEqual(0x00000005, msg.verbStream!.voteOptions[3].internal2)
        XCTAssertEqual(0x00, msg.verbStream!.voteOptions[3].internal3)
        XCTAssertFalse(msg.verbStream!.voteOptions[3].fUseUSHeaders)
        XCTAssertEqual(0x00000001, msg.verbStream!.voteOptions[3].internal4)
        XCTAssertEqual(.unknown, msg.verbStream!.voteOptions[3].sendBehavior)
        XCTAssertEqual(0x00000002, msg.verbStream!.voteOptions[3].internal5)
        XCTAssertEqual(0x006C, msg.verbStream!.voteOptions[3].id)
        XCTAssertEqual(0x00080000, msg.verbStream!.voteOptions[3].internal6)
        XCTAssertEqual(4, msg.verbStream!.voteOptions[4].verbType)
        XCTAssertEqual(7, msg.verbStream!.voteOptions[4].displayNameCount)
        XCTAssertEqual("Approve", msg.verbStream!.voteOptions[4].displayName)
        XCTAssertEqual(8, msg.verbStream!.voteOptions[4].msgClsNameCount)
        XCTAssertEqual("IPM.Note", msg.verbStream!.voteOptions[4].msgClsName)
        XCTAssertEqual(0, msg.verbStream!.voteOptions[4].internal1StringCount)
        XCTAssertEqual("", msg.verbStream!.voteOptions[4].internal1String)
        XCTAssertEqual(7, msg.verbStream!.voteOptions[4].displayNameCountRepeat)
        XCTAssertEqual("Approve", msg.verbStream!.voteOptions[4].displayNameRepeat)
        XCTAssertEqual(0x00000000, msg.verbStream!.voteOptions[4].internal2)
        XCTAssertEqual(0x00, msg.verbStream!.voteOptions[4].internal3)
        XCTAssertFalse(msg.verbStream!.voteOptions[4].fUseUSHeaders)
        XCTAssertEqual(0x00000001, msg.verbStream!.voteOptions[4].internal4)
        XCTAssertEqual(.promptUser, msg.verbStream!.voteOptions[4].sendBehavior)
        XCTAssertEqual(0x00000002, msg.verbStream!.voteOptions[4].internal5)
        XCTAssertEqual(0x0001, msg.verbStream!.voteOptions[4].id)
        XCTAssertEqual(0xFFFF0000, msg.verbStream!.voteOptions[4].internal6)
        XCTAssertEqual(4, msg.verbStream!.voteOptions[5].verbType)
        XCTAssertEqual(6, msg.verbStream!.voteOptions[5].displayNameCount)
        XCTAssertEqual("Reject", msg.verbStream!.voteOptions[5].displayName)
        XCTAssertEqual(8, msg.verbStream!.voteOptions[5].msgClsNameCount)
        XCTAssertEqual("IPM.Note", msg.verbStream!.voteOptions[5].msgClsName)
        XCTAssertEqual(0, msg.verbStream!.voteOptions[5].internal1StringCount)
        XCTAssertEqual("", msg.verbStream!.voteOptions[5].internal1String)
        XCTAssertEqual(6, msg.verbStream!.voteOptions[5].displayNameCountRepeat)
        XCTAssertEqual("Reject", msg.verbStream!.voteOptions[5].displayNameRepeat)
        XCTAssertEqual(0x00000000, msg.verbStream!.voteOptions[5].internal2)
        XCTAssertEqual(0x00, msg.verbStream!.voteOptions[5].internal3)
        XCTAssertFalse(msg.verbStream!.voteOptions[5].fUseUSHeaders)
        XCTAssertEqual(0x00000001, msg.verbStream!.voteOptions[5].internal4)
        XCTAssertEqual(.promptUser, msg.verbStream!.voteOptions[5].sendBehavior)
        XCTAssertEqual(0x00000002, msg.verbStream!.voteOptions[5].internal5)
        XCTAssertEqual(0x0002, msg.verbStream!.voteOptions[5].id)
        XCTAssertEqual(0xFFFF0000, msg.verbStream!.voteOptions[5].internal6)
        XCTAssertEqual(0x0104, msg.verbStream!.version2)
        XCTAssertEqual(6, msg.verbStream!.voteOptionsExtras.count)
        XCTAssertEqual(5, msg.verbStream!.voteOptionsExtras[0].displayNameCount)
        XCTAssertEqual("Reply", msg.verbStream!.voteOptionsExtras[0].displayName)
        XCTAssertEqual(2, msg.verbStream!.voteOptionsExtras[0].displayNameCountRepeat)
        XCTAssertEqual("RE", msg.verbStream!.voteOptionsExtras[0].displayNameRepeat)
        XCTAssertEqual(12, msg.verbStream!.voteOptionsExtras[1].displayNameCount)
        XCTAssertEqual("Reply to All", msg.verbStream!.voteOptionsExtras[1].displayName)
        XCTAssertEqual(2, msg.verbStream!.voteOptionsExtras[1].displayNameCountRepeat)
        XCTAssertEqual("RE", msg.verbStream!.voteOptionsExtras[1].displayNameRepeat)
        XCTAssertEqual(7, msg.verbStream!.voteOptionsExtras[2].displayNameCount)
        XCTAssertEqual("Forward", msg.verbStream!.voteOptionsExtras[2].displayName)
        XCTAssertEqual(2, msg.verbStream!.voteOptionsExtras[2].displayNameCountRepeat)
        XCTAssertEqual("FW", msg.verbStream!.voteOptionsExtras[2].displayNameRepeat)
        XCTAssertEqual(15, msg.verbStream!.voteOptionsExtras[3].displayNameCount)
        XCTAssertEqual("Reply to Folder", msg.verbStream!.voteOptionsExtras[3].displayName)
        XCTAssertEqual(0, msg.verbStream!.voteOptionsExtras[3].displayNameCountRepeat)
        XCTAssertEqual("", msg.verbStream!.voteOptionsExtras[3].displayNameRepeat)
        XCTAssertEqual(7, msg.verbStream!.voteOptionsExtras[4].displayNameCount)
        XCTAssertEqual("Approve", msg.verbStream!.voteOptionsExtras[4].displayName)
        XCTAssertEqual(7, msg.verbStream!.voteOptionsExtras[4].displayNameCountRepeat)
        XCTAssertEqual("Approve", msg.verbStream!.voteOptionsExtras[4].displayNameRepeat)
        XCTAssertEqual(6, msg.verbStream!.voteOptionsExtras[5].displayNameCount)
        XCTAssertEqual("Reject", msg.verbStream!.voteOptionsExtras[5].displayName)
        XCTAssertEqual(6, msg.verbStream!.voteOptionsExtras[5].displayNameCountRepeat)
        XCTAssertEqual("Reject", msg.verbStream!.voteOptionsExtras[5].displayNameRepeat)
        XCTAssertEqual("hughbellars@gmail.com", msg.receivedByName!)
        XCTAssertEqual("hughbellars@gmail.com Calendar", msg.conversationTopic!)
        XCTAssertEqual([0x80, 0x9E, 0x00, 0x00], [UInt8](msg.searchKey!))
        XCTAssertEqual("hughbellars@gmail.com", msg.receivedRepresentingName!)
        XCTAssertEqual(1595681519.0, msg.messageDeliveryTime!.timeIntervalSince1970)
        XCTAssertEqual(.urgent, msg.priority!)
        XCTAssertFalse(msg.alternateRecipientAllowed!)
        XCTAssertEqual(.notAssigned, msg.taskMode!)
        XCTAssertEqual("00000002\u{01}hughbellars", msg.internetAccountStamp!)
        XCTAssertEqual(1, msg.lastVerbExecuted!)
        XCTAssertEqual("hughbellars@gmail.com", (msg.getProperty(id: .tagSenderName) as String?)!)
        XCTAssertEqual("hughbellars@gmail.com Calendar", msg.normalizedSubject!)
        XCTAssertEqual("", msg.displayBcc!)
        XCTAssertEqual("hughbellars@gmail.com", msg.receivedByEmailAddress!)
        XCTAssertEqual(UUID(uuidString: "504346B0-3346-4246-AC66-333EA06D2732"), msg.changeKey!.namespaceGuid)
        XCTAssertEqual([0x00, 0x00, 0x0C, 0xB7], msg.changeKey!.localId)
        XCTAssertEqual("hughbellars@gmail.com", msg.sentRepresentingName!)
        XCTAssertEqual(0x01, msg.conversationIndex!.header.reserved)
        XCTAssertEqual(0xD6, msg.conversationIndex!.header.currentFileTime.0)
        XCTAssertEqual(0x62, msg.conversationIndex!.header.currentFileTime.1)
        XCTAssertEqual(0x82, msg.conversationIndex!.header.currentFileTime.2)
        XCTAssertEqual(0x3D, msg.conversationIndex!.header.currentFileTime.3)
        XCTAssertEqual(0x3E, msg.conversationIndex!.header.currentFileTime.4)
        XCTAssertEqual(UUID(uuidString: "F41AEE48-D7E0-4F2E-8BDD-56FCA6568479"), msg.conversationIndex!.header.guid)
        XCTAssertEqual(0, msg.conversationIndex!.responseLevels.count)
        XCTAssertTrue(msg.useTnef!)
        XCTAssertTrue(msg.replyRequested!)
        XCTAssertNotNil(msg.body)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.storeSupportMask)
        XCTAssertEqual(["Purple Category"], msg.keywords!)
        XCTAssertEqual("SMTP", msg.sentRepresentingAddressType!)
        XCTAssertTrue(msg.hasAttachments!)
        XCTAssertNotNil(msg.rtfCompressed)
        XCTAssertEqual([], msg.clientIntent)
        XCTAssertEqual(2, msg.predecessorChangeList!.values.count)
        XCTAssertEqual(UUID(uuidString: "504346B0-3346-4246-AC66-333EA06D2732"), msg.predecessorChangeList!.values[0].namespaceGuid)
        XCTAssertEqual([0x00, 0x00, 0x0C, 0xB7], msg.predecessorChangeList!.values[0].localId)
        XCTAssertEqual(UUID(uuidString: "75EB2FE9-5096-8644-83B8-7DE522AA4948"), msg.predecessorChangeList!.values[1].namespaceGuid)
        XCTAssertEqual([0x00], msg.predecessorChangeList!.values[1].localId)
        XCTAssertEqual("SMTP", msg.receivedRepresentingAddressType!)
        XCTAssertEqual(1595685060.0, msg.lastVerbExecutionTime!.timeIntervalSince1970)
        XCTAssertEqual(1033, msg.messageLocaleId!)
        XCTAssertEqual([0x4D, 0x13, 0xDD, 0x12, 0x95, 0x10, 0xB1, 0x4A, 0x80, 0x09, 0xDC, 0x31, 0x9D, 0x11, 0xCB, 0xF8], [UInt8]((msg.getProperty(set: .common, name: "InTransitMessageCorrelator") as Data?)!))
        XCTAssertEqual(.high, msg.importance!)
        XCTAssertEqual(0x00000105, msg.iconIndex!)
        XCTAssertEqual(0x00000000, (msg.readReceiptEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.readReceiptEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.readReceiptEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.unicode], (msg.readReceiptEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars@gmail.com", (msg.readReceiptEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.readReceiptEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.readReceiptEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual("IPM.Note", msg.messageClass!)
        XCTAssertEqual("hughbellars@gmail.com", msg.senderEmailAddress!)
        XCTAssertEqual(["hughbellars@gmail.com"], (msg.getProperty(id: .tagReportDispositionToNames) as [String]?)!)
        XCTAssertEqual("hughbellars@gmail.com", (msg.getProperty(id: .unknown0x680D) as String?)!)
        XCTAssertNotNil(msg.tnefCorrelationKey)
        XCTAssertTrue(msg.agingDontAgeMe!)
        XCTAssertEqual([.locked], msg.submitFlags)
        XCTAssertEqual("", msg.displayCc!)
        XCTAssertEqual("hughbellars@gmail.com", msg.internetAccountName!)
        XCTAssertEqual(0x00000000, (msg.receivedRepresentingEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.receivedRepresentingEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.receivedRepresentingEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.unicode], (msg.receivedRepresentingEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars@gmail.com", (msg.receivedRepresentingEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.receivedRepresentingEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.receivedRepresentingEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual("PCDFEB09\u{00}", msg.reportTag!.cookie)
        XCTAssertEqual(0x00020001, msg.reportTag!.version)
        XCTAssertEqual(0x00000000, msg.reportTag!.storeEntryIdSize)
        XCTAssertNil(msg.reportTag!.storeEntryId)
        XCTAssertEqual(0x00000000, msg.reportTag!.folderEntryIdSize)
        XCTAssertNil(msg.reportTag!.folderEntryId)
        XCTAssertEqual(0x00000000, msg.reportTag!.messageEntryIdSize)
        XCTAssertNil(msg.reportTag!.messageEntryId)
        XCTAssertEqual(0x0000002E, msg.reportTag!.searchFolderEntryIdSize)
        XCTAssertEqual(0x00000000, msg.reportTag!.searchFolderEntryId!.flags)
        XCTAssertEqual(UUID(uuidString: "59DA0729-9DAF-5C4A-B20C-8B81A78C96C0"), msg.reportTag!.searchFolderEntryId!.providerUid)
        XCTAssertEqual(.privateFolder, msg.reportTag!.searchFolderEntryId!.folderType)
        XCTAssertEqual(UUID(uuidString: "108EB6C3-75F7-CE11-B4CD-00AA00BBB6E6"), msg.reportTag!.searchFolderEntryId!.databaseGuid)
        XCTAssertEqual(3940649673949184, msg.reportTag!.searchFolderEntryId!.globalCounter)
        XCTAssertEqual(0x0000, msg.reportTag!.searchFolderEntryId!.pad)
        XCTAssertEqual(0x00000010, msg.reportTag!.messageSearchKeySize)
        XCTAssertEqual([0xAB, 0xDE, 0xD0, 0xB3, 0x8D, 0x22, 0xDC, 0x4C, 0x94, 0x52, 0xBA, 0x2D, 0x83, 0x3D, 0x8D, 0xAD], [UInt8](msg.reportTag!.messageSearchKey!))
        XCTAssertEqual(0x00000001, msg.reportTag!.ansiTextSize)
        XCTAssertEqual("\u{00}", msg.reportTag!.ansiText!)
        XCTAssertEqual("SMTP", msg.receivedByAddressType!)
        XCTAssertEqual(0x00000000, (msg.receivedByEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.receivedByEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.receivedByEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.unicode], (msg.receivedByEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars@gmail.com", (msg.receivedByEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.receivedByEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.receivedByEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual("hughbellars@gmail.com", msg.replyRecipientNames!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x48, 0x55, 0x47, 0x48, 0x42, 0x45, 0x4C, 0x4C, 0x41, 0x52, 0x53, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D], [UInt8](msg.senderSearchKey!))
        XCTAssertEqual(.undefined, msg.nativeBody!)
        XCTAssertEqual(20127, msg.internetCodepage!)
        XCTAssertEqual(["hughbellars@gmail.com"], (msg.getProperty(id: .tagReportDispositionToEmailAddresses) as [String]?)!)
        XCTAssertEqual(.html, msg.messageEditorFormat!)
        XCTAssertEqual(0x00160000, msg.internetMailOverrideFormat!)
        XCTAssertEqual("<!&!AAAAAAAAAAAuAAAAAAAAAFnaBymdr1xKsgyLgaeMlsABAMO2jhD3dRHOtM0AqgC7tuYAAAAAAA4AABAAAACr3tCzjSLcTJRSui2DPY2tAQAAAAA=@gmail.com>", (msg.getProperty(id: .tagInternetMessageId) as String?)!)
        XCTAssertEqual("bellamy.hughd@gmail.com\u{00}", msg.displayTo!)
        XCTAssertTrue(msg.rtfInSync!)
        XCTAssertTrue(msg.recipientReassignmentProhibited!)
        XCTAssertEqual(.flagged, msg.flagStatus!)
        XCTAssertEqual("00000002\u{01}hughbellars", (msg.getProperty(id: .unknown0x680E) as String?)!)
        XCTAssertTrue(msg.responseRequested!)
        XCTAssertEqual(1, msg.replyRecipientEntries!.count)
        XCTAssertEqual(0x00000080, msg.replyRecipientEntries!.size)
        XCTAssertEqual(122, msg.replyRecipientEntries!.flatEntries[0].size)
        XCTAssertEqual(0x00000000, (msg.replyRecipientEntries!.flatEntries[0].entryID as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.replyRecipientEntries!.flatEntries[0].entryID as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.replyRecipientEntries!.flatEntries[0].entryID as? OneOffEntryID)!.version)
        XCTAssertEqual([.unicode], (msg.replyRecipientEntries!.flatEntries[0].entryID as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars@gmail.com", (msg.replyRecipientEntries!.flatEntries[0].entryID as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.replyRecipientEntries!.flatEntries[0].entryID as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.replyRecipientEntries!.flatEntries[0].entryID as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual("hughbellars@gmail.com Calendar", msg.subject!)
        XCTAssertEqual(0x00000000, (msg.senderEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.senderEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.senderEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.unicode], (msg.senderEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars@gmail.com", (msg.senderEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.senderEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.senderEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual(0, msg.reminderDelta!)
        XCTAssertEqual(.personal, msg.sensitivity!)

        XCTAssertEqual(1, msg.recipients.count)
        XCTAssertEqual(0, msg.recipients[0].rowid!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x42, 0x45, 0x4C, 0x4C, 0x41, 0x4D, 0x59, 0x2E, 0x48, 0x55, 0x47, 0x48, 0x44, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D], [UInt8](msg.recipients[0].searchKey!))
        XCTAssertEqual([0x00, 0x00, 0x94, 0xA6], [UInt8](msg.recipients[0].instanceKey!))
        XCTAssertEqual("bellamy.hughd@gmail.com", msg.recipients[0].displayName!)
        XCTAssertEqual(.primaryRecipient, msg.recipients[0].recipientType!)
        XCTAssertEqual("SMTP", msg.recipients[0].addressType!)
        XCTAssertEqual("bellamy.hughd@gmail.com", msg.recipients[0].emailAddress!)
        XCTAssertEqual(0x00000000, (msg.recipients[0].entryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.recipients[0].entryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.recipients[0].entryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.unicode], (msg.recipients[0].entryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("bellamy.hughd@gmail.com", (msg.recipients[0].entryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.recipients[0].entryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("bellamy.hughd@gmail.com", (msg.recipients[0].entryId as? OneOffEntryID)!.emailAddress)

        XCTAssertEqual(13, msg.attachments.count)
        XCTAssertEqual(.attachment, msg.attachments[0].objectType!)
        XCTAssertEqual(4294967295, msg.attachments[0].renderingPosition!)
        XCTAssertEqual("Untitled Attachment", msg.attachments[0].attachFilename!)
        XCTAssertEqual(79870665600.0, msg.attachments[0].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual(0x00000000, msg.attachments[0].attachmentFlags!)
        XCTAssertEqual([], msg.attachments[0].attachFlags)
        XCTAssertEqual(.embeddedMessage, msg.attachments[0].attachMethod!)
        XCTAssertFalse(msg.attachments[0].attachmentContactPhoto!)
        XCTAssertEqual(79870665600.0, msg.attachments[0].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual([.read], msg.attachments[0].access)
        XCTAssertNotNil(msg.attachments[0].attachDataBinary)
        XCTAssertEqual(0, msg.attachments[0].attachmentLinkId!)
        XCTAssertEqual([0x00, 0x00, 0x00, 0x00], [UInt8](msg.attachments[0].recordKey!))
        XCTAssertEqual(0, msg.attachments[0].attachNumber!)
        XCTAssertEqual(.readOnly, msg.attachments[0].accessLevel!)
        XCTAssertFalse(msg.attachments[0].attachmentHidden!)
        XCTAssertEqual("MVP award delivery information", msg.attachments[0].displayName!)
        XCTAssertNotNil(msg.attachments[0].attachRendering)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[0].storeSupportMask)
        XCTAssertEqual([], [UInt8](msg.attachments[0].attachEncoding!))

        XCTAssertEqual([], [UInt8](msg.attachments[1].attachEncoding!))
        XCTAssertEqual("image013.png", msg.attachments[1].attachFilename!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[1].storeSupportMask)
        XCTAssertEqual([.renderedInBody], msg.attachments[1].attachFlags)
        XCTAssertEqual("image/png", msg.attachments[1].attachMimeTag!)
        XCTAssertEqual(79870665600.0, msg.attachments[1].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual(1, msg.attachments[1].attachNumber!)
        XCTAssertNotNil(msg.attachments[1].attachRendering)
        XCTAssertEqual("image013.png", msg.attachments[1].displayName!)
        XCTAssertEqual(.attachment, msg.attachments[1].objectType!)
        XCTAssertFalse(msg.attachments[1].attachmentContactPhoto!)
        XCTAssertEqual("", (msg.attachments[1].getProperty(set: .attachment, name: "AttachmentOriginalUrl") as String?)!)
        XCTAssertEqual("image013.png@01D66282.5CC911C0", msg.attachments[1].attachContentId!)
        XCTAssertFalse((msg.attachments[1].getProperty(set: .attachment, name: "AttachmentWasSavedToCloud") as Bool?)!)
        XCTAssertNotNil(msg.attachments[1].attachDataBinary)
        XCTAssertEqual([.read], msg.attachments[1].access)
        XCTAssertEqual("image013.png", msg.attachments[1].attachLongFilename!)
        XCTAssertEqual(79870665600.0, msg.attachments[1].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual(0x00000008, msg.attachments[1].attachmentFlags!)
        XCTAssertEqual(0, msg.attachments[1].attachmentLinkId!)
        XCTAssertEqual([0x01, 0x00, 0x00, 0x00], [UInt8](msg.attachments[1].recordKey!))
        XCTAssertEqual(4294967295, msg.attachments[1].renderingPosition!)
        XCTAssertEqual(.byValue, msg.attachments[1].attachMethod!)
        XCTAssertTrue(msg.attachments[1].attachmentHidden!)
        XCTAssertEqual(.readOnly, msg.attachments[1].accessLevel!)
        XCTAssertEqual(".png", msg.attachments[1].attachExtension!)

        XCTAssertEqual(79870665600.0, msg.attachments[2].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual([.renderedInBody], msg.attachments[2].attachFlags)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[2].storeSupportMask)
        XCTAssertEqual(0x00000008, msg.attachments[2].attachmentFlags!)
        XCTAssertEqual([], [UInt8](msg.attachments[2].attachEncoding!))
        XCTAssertNotNil(msg.attachments[2].attachDataBinary)
        XCTAssertEqual("image/gif", msg.attachments[2].attachMimeTag!)
        XCTAssertFalse((msg.attachments[2].getProperty(set: .attachment, name: "AttachmentWasSavedToCloud") as Bool?)!)
        XCTAssertEqual("", (msg.attachments[2].getProperty(set: .attachment, name: "AttachmentOriginalUrl") as String?)!)
        XCTAssertEqual([.read], msg.attachments[2].access)
        XCTAssertNotNil(msg.attachments[2].attachRendering)
        XCTAssertEqual(0, msg.attachments[2].attachmentLinkId!)
        XCTAssertEqual(4294967295, msg.attachments[2].renderingPosition!)
        XCTAssertEqual(.byValue, msg.attachments[2].attachMethod!)
        XCTAssertEqual("image012.gif", msg.attachments[2].attachFilename!)
        XCTAssertEqual(.readOnly, msg.attachments[2].accessLevel!)
        XCTAssertEqual(.attachment, msg.attachments[2].objectType!)
        XCTAssertEqual("image012.gif", msg.attachments[2].attachLongFilename!)
        XCTAssertEqual(79870665600.0, msg.attachments[2].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual("image012.gif", msg.attachments[2].displayName!)
        XCTAssertEqual("image012.gif@01D66282.4EB1E440", msg.attachments[2].attachContentId!)
        XCTAssertTrue(msg.attachments[2].attachmentHidden!)
        XCTAssertFalse(msg.attachments[2].attachmentContactPhoto!)
        XCTAssertEqual(2, msg.attachments[2].attachNumber!)
        XCTAssertEqual([0x02, 0x00, 0x00, 0x00], [UInt8](msg.attachments[2].recordKey!))
        XCTAssertEqual(".gif", msg.attachments[2].attachExtension!)

        XCTAssertEqual("image011.gif", msg.attachments[3].attachFilename!)
        XCTAssertEqual([], [UInt8](msg.attachments[3].attachEncoding!))
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[3].storeSupportMask)
        XCTAssertEqual([.renderedInBody], msg.attachments[3].attachFlags)
        XCTAssertEqual("image/gif", msg.attachments[3].attachMimeTag!)
        XCTAssertEqual(79870665600.0, msg.attachments[3].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual(.attachment, msg.attachments[3].objectType!)
        XCTAssertEqual("image011.gif", msg.attachments[3].displayName!)
        XCTAssertEqual(3, msg.attachments[3].attachNumber!)
        XCTAssertNotNil(msg.attachments[3].attachRendering)
        XCTAssertFalse(msg.attachments[3].attachmentContactPhoto!)
        XCTAssertEqual("", (msg.attachments[3].getProperty(set: .attachment, name: "AttachmentOriginalUrl") as String?)!)
        XCTAssertEqual("image011.gif@01D66282.4EB1E440", msg.attachments[3].attachContentId!)
        XCTAssertFalse((msg.attachments[3].getProperty(set: .attachment, name: "AttachmentWasSavedToCloud") as Bool?)!)
        XCTAssertNotNil(msg.attachments[3].attachDataBinary)
        XCTAssertEqual([.read], msg.attachments[3].access)
        XCTAssertEqual("image011.gif", msg.attachments[3].attachLongFilename!)
        XCTAssertEqual(79870665600.0, msg.attachments[3].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual(0x00000008, msg.attachments[3].attachmentFlags!)
        XCTAssertEqual(0, msg.attachments[3].attachmentLinkId!)
        XCTAssertEqual([0x03, 0x00, 0x00, 0x00], [UInt8](msg.attachments[3].recordKey!))
        XCTAssertEqual(4294967295, msg.attachments[3].renderingPosition!)
        XCTAssertEqual(.byValue, msg.attachments[3].attachMethod!)
        XCTAssertTrue(msg.attachments[3].attachmentHidden!)
        XCTAssertEqual(.readOnly, msg.attachments[3].accessLevel!)
        XCTAssertEqual(".gif", msg.attachments[3].attachExtension!)

        XCTAssertEqual(.readOnly, msg.attachments[4].accessLevel!)
        XCTAssertEqual(79870665600.0, msg.attachments[4].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual(79870665600.0, msg.attachments[4].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual("image010.gif@01D66282.4EB1E440", msg.attachments[4].attachContentId!)
        XCTAssertEqual([.renderedInBody], msg.attachments[4].attachFlags)
        XCTAssertEqual(".gif", msg.attachments[4].attachExtension!)
        XCTAssertEqual([.read], msg.attachments[4].access)
        XCTAssertEqual("image/gif", msg.attachments[4].attachMimeTag!)
        XCTAssertEqual("image010.gif", msg.attachments[4].attachLongFilename!)
        XCTAssertEqual("image010.gif", msg.attachments[4].displayName!)
        XCTAssertEqual(0x00000008, msg.attachments[4].attachmentFlags!)
        XCTAssertNotNil(msg.attachments[4].attachDataBinary)
        XCTAssertEqual("image010.gif", msg.attachments[4].attachFilename!)
        XCTAssertEqual("", (msg.attachments[4].getProperty(set: .attachment, name: "AttachmentOriginalUrl") as String?)!)
        XCTAssertEqual(.attachment, msg.attachments[4].objectType!)
        XCTAssertEqual([0x04, 0x00, 0x00, 0x00], [UInt8](msg.attachments[4].recordKey!))
        XCTAssertEqual(.byValue, msg.attachments[4].attachMethod!)
        XCTAssertFalse(msg.attachments[4].attachmentContactPhoto!)
        XCTAssertEqual(4294967295, msg.attachments[4].renderingPosition!)
        XCTAssertEqual(4, msg.attachments[4].attachNumber!)
        XCTAssertEqual([], [UInt8](msg.attachments[4].attachEncoding!))
        XCTAssertNotNil(msg.attachments[4].attachRendering)
        XCTAssertFalse((msg.attachments[4].getProperty(set: .attachment, name: "AttachmentWasSavedToCloud") as Bool?)!)
        XCTAssertEqual(0, msg.attachments[4].attachmentLinkId!)
        XCTAssertTrue(msg.attachments[4].attachmentHidden!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[4].storeSupportMask)

        XCTAssertNotNil(msg.attachments[5].attachRendering)
        XCTAssertEqual(79870665600.0, msg.attachments[5].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual("image009.gif", msg.attachments[5].displayName!)
        XCTAssertFalse((msg.attachments[5].getProperty(set: .attachment, name: "AttachmentWasSavedToCloud") as Bool?)!)
        XCTAssertTrue(msg.attachments[5].attachmentHidden!)
        XCTAssertEqual(".gif", msg.attachments[5].attachExtension!)
        XCTAssertEqual(.byValue, msg.attachments[5].attachMethod!)
        XCTAssertEqual("image/gif", msg.attachments[5].attachMimeTag!)
        XCTAssertEqual(4294967295, msg.attachments[5].renderingPosition!)
        XCTAssertEqual([.renderedInBody], msg.attachments[5].attachFlags)
        XCTAssertEqual(0x00000008, msg.attachments[5].attachmentFlags!)
        XCTAssertFalse(msg.attachments[5].attachmentContactPhoto!)
        XCTAssertEqual(79870665600.0, msg.attachments[5].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual(.attachment, msg.attachments[5].objectType!)
        XCTAssertEqual("image009.gif", msg.attachments[5].attachFilename!)
        XCTAssertEqual("", (msg.attachments[5].getProperty(set: .attachment, name: "AttachmentOriginalUrl") as String?)!)
        XCTAssertNotNil(msg.attachments[5].attachDataBinary)
        XCTAssertEqual(0, msg.attachments[5].attachmentLinkId!)
        XCTAssertEqual(.readOnly, msg.attachments[5].accessLevel!)
        XCTAssertEqual([], [UInt8](msg.attachments[5].attachEncoding!))
        XCTAssertEqual("image009.gif", msg.attachments[5].attachLongFilename!)
        XCTAssertEqual([0x05, 0x00, 0x00, 0x00], [UInt8](msg.attachments[5].recordKey!))
        XCTAssertEqual([.read], msg.attachments[5].access)
        XCTAssertEqual("image009.gif@01D66282.4EB1E440", msg.attachments[5].attachContentId!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[5].storeSupportMask)
        XCTAssertEqual(5, msg.attachments[5].attachNumber!)

        XCTAssertEqual([], [UInt8](msg.attachments[6].attachEncoding!))
        XCTAssertEqual("image008.gif", msg.attachments[6].attachFilename!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[6].storeSupportMask)
        XCTAssertEqual([.renderedInBody], msg.attachments[6].attachFlags)
        XCTAssertEqual("image/gif", msg.attachments[6].attachMimeTag!)
        XCTAssertEqual(79870665600.0, msg.attachments[6].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual(6, msg.attachments[6].attachNumber!)
        XCTAssertNotNil(msg.attachments[6].attachRendering)
        XCTAssertEqual("image008.gif", msg.attachments[6].displayName!)
        XCTAssertEqual(.attachment, msg.attachments[6].objectType!)
        XCTAssertFalse(msg.attachments[6].attachmentContactPhoto!)
        XCTAssertEqual("", (msg.attachments[6].getProperty(set: .attachment, name: "AttachmentOriginalUrl") as String?)!)
        XCTAssertEqual("image008.gif@01D66282.4EB1E440", msg.attachments[6].attachContentId!)
        XCTAssertFalse((msg.attachments[6].getProperty(set: .attachment, name: "AttachmentWasSavedToCloud") as Bool?)!)
        XCTAssertNotNil(msg.attachments[6].attachDataBinary)
        XCTAssertEqual([.read], msg.attachments[6].access)
        XCTAssertEqual("image008.gif", msg.attachments[6].attachLongFilename!)
        XCTAssertEqual(79870665600.0, msg.attachments[6].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual(0x00000008, msg.attachments[6].attachmentFlags!)
        XCTAssertEqual(0, msg.attachments[6].attachmentLinkId!)
        XCTAssertEqual([0x06, 0x00, 0x00, 0x00], [UInt8](msg.attachments[6].recordKey!))
        XCTAssertEqual(4294967295, msg.attachments[6].renderingPosition!)
        XCTAssertEqual(.byValue, msg.attachments[6].attachMethod!)
        XCTAssertTrue(msg.attachments[6].attachmentHidden!)
        XCTAssertEqual(.readOnly, msg.attachments[6].accessLevel!)
        XCTAssertEqual(".gif", msg.attachments[6].attachExtension!)

        XCTAssertEqual(.readOnly, msg.attachments[7].accessLevel!)
        XCTAssertEqual(7, msg.attachments[7].attachNumber!)
        XCTAssertEqual([.renderedInBody], msg.attachments[7].attachFlags)
        XCTAssertFalse((msg.attachments[7].getProperty(set: .attachment, name: "AttachmentWasSavedToCloud") as Bool?)!)
        XCTAssertEqual("image007.gif@01D66282.4EB1E440", msg.attachments[7].attachContentId!)
        XCTAssertEqual(".gif", msg.attachments[7].attachExtension!)
        XCTAssertNotNil(msg.attachments[7].attachRendering)
        XCTAssertEqual([], [UInt8](msg.attachments[7].attachEncoding!))
        XCTAssertNotNil(msg.attachments[7].attachDataBinary)
        XCTAssertFalse(msg.attachments[7].attachmentContactPhoto!)
        XCTAssertEqual(.byValue, msg.attachments[7].attachMethod!)
        XCTAssertEqual("image/gif", msg.attachments[7].attachMimeTag!)
        XCTAssertEqual("image007.gif", msg.attachments[7].attachLongFilename!)
        XCTAssertEqual(79870665600.0, msg.attachments[7].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual("image007.gif", msg.attachments[7].attachFilename!)
        XCTAssertEqual(79870665600.0, msg.attachments[7].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual([.read], msg.attachments[7].access)
        XCTAssertEqual(0, msg.attachments[7].attachmentLinkId!)
        XCTAssertEqual("image007.gif", msg.attachments[7].displayName!)
        XCTAssertEqual(.attachment, msg.attachments[7].objectType!)
        XCTAssertTrue(msg.attachments[7].attachmentHidden!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[7].storeSupportMask)
        XCTAssertEqual([0x07, 0x00, 0x00, 0x00], [UInt8](msg.attachments[7].recordKey!))
        XCTAssertEqual(0x00000008, msg.attachments[7].attachmentFlags!)
        XCTAssertEqual("", (msg.attachments[7].getProperty(set: .attachment, name: "AttachmentOriginalUrl") as String?)!)
        XCTAssertEqual(4294967295, msg.attachments[7].renderingPosition!)

        XCTAssertEqual(8, msg.attachments[8].attachNumber!)
        XCTAssertEqual(.attachment, msg.attachments[8].objectType!)
        XCTAssertEqual([.renderedInBody], msg.attachments[8].attachFlags)
        XCTAssertFalse(msg.attachments[8].attachmentContactPhoto!)
        XCTAssertEqual([.read], msg.attachments[8].access)
        XCTAssertEqual("image006.gif", msg.attachments[8].attachFilename!)
        XCTAssertEqual(79870665600.0, msg.attachments[8].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual([], [UInt8](msg.attachments[8].attachEncoding!))
        XCTAssertEqual(.readOnly, msg.attachments[8].accessLevel!)
        XCTAssertEqual("image/gif", msg.attachments[8].attachMimeTag!)
        XCTAssertEqual("image006.gif", msg.attachments[8].attachLongFilename!)
        XCTAssertNotNil(msg.attachments[8].attachRendering)
        XCTAssertEqual([0x08, 0x00, 0x00, 0x00], [UInt8](msg.attachments[8].recordKey!))
        XCTAssertEqual("", (msg.attachments[8].getProperty(set: .attachment, name: "AttachmentOriginalUrl") as String?)!)
        XCTAssertEqual(0x00000008, msg.attachments[8].attachmentFlags!)
        XCTAssertEqual(".gif", msg.attachments[8].attachExtension!)
        XCTAssertNotNil(msg.attachments[8].attachDataBinary)
        XCTAssertEqual(0, msg.attachments[8].attachmentLinkId!)
        XCTAssertEqual("image006.gif", msg.attachments[8].displayName!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[8].storeSupportMask)
        XCTAssertEqual(.byValue, msg.attachments[8].attachMethod!)
        XCTAssertFalse((msg.attachments[8].getProperty(set: .attachment, name: "AttachmentWasSavedToCloud") as Bool?)!)
        XCTAssertEqual("image006.gif@01D66282.4EB1E440", msg.attachments[8].attachContentId!)
        XCTAssertEqual(4294967295, msg.attachments[8].renderingPosition!)
        XCTAssertEqual(79870665600.0, msg.attachments[8].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertTrue(msg.attachments[8].attachmentHidden!)

        XCTAssertEqual([], [UInt8](msg.attachments[9].attachEncoding!))
        XCTAssertEqual("image005.gif", msg.attachments[9].attachFilename!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[9].storeSupportMask)
        XCTAssertEqual([.renderedInBody], msg.attachments[9].attachFlags)
        XCTAssertEqual("image/gif", msg.attachments[9].attachMimeTag!)
        XCTAssertEqual(79870665600.0, msg.attachments[9].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual(9, msg.attachments[9].attachNumber!)
        XCTAssertNotNil(msg.attachments[9].attachRendering)
        XCTAssertEqual("image005.gif", msg.attachments[9].displayName!)
        XCTAssertEqual(.attachment, msg.attachments[9].objectType!)
        XCTAssertFalse(msg.attachments[9].attachmentContactPhoto!)
        XCTAssertEqual("", (msg.attachments[9].getProperty(set: .attachment, name: "AttachmentOriginalUrl") as String?)!)
        XCTAssertEqual("image005.gif@01D66282.4EB1E440", msg.attachments[9].attachContentId!)
        XCTAssertFalse((msg.attachments[9].getProperty(set: .attachment, name: "AttachmentWasSavedToCloud") as Bool?)!)
        XCTAssertNotNil(msg.attachments[9].attachDataBinary)
        XCTAssertEqual([.read], msg.attachments[9].access)
        XCTAssertEqual("image005.gif", msg.attachments[9].attachLongFilename!)
        XCTAssertEqual(79870665600.0, msg.attachments[9].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual(0x00000008, msg.attachments[9].attachmentFlags!)
        XCTAssertEqual(0, msg.attachments[9].attachmentLinkId!)
        XCTAssertEqual([0x09, 0x00, 0x00, 0x00], [UInt8](msg.attachments[9].recordKey!))
        XCTAssertEqual(4294967295, msg.attachments[9].renderingPosition!)
        XCTAssertEqual(.byValue, msg.attachments[9].attachMethod!)
        XCTAssertTrue(msg.attachments[9].attachmentHidden!)
        XCTAssertEqual(.readOnly, msg.attachments[9].accessLevel!)
        XCTAssertEqual(".gif", msg.attachments[9].attachExtension!)

        XCTAssertEqual(10, msg.attachments[10].attachNumber!)
        XCTAssertEqual(.attachment, msg.attachments[10].objectType!)
        XCTAssertNotNil(msg.attachments[10].attachDataBinary)
        XCTAssertEqual(.readOnly, msg.attachments[10].accessLevel!)
        XCTAssertEqual("image/gif", msg.attachments[10].attachMimeTag!)
        XCTAssertEqual("", (msg.attachments[10].getProperty(set: .attachment, name: "AttachmentOriginalUrl") as String?)!)
        XCTAssertEqual([.read], msg.attachments[10].access)
        XCTAssertEqual([], [UInt8](msg.attachments[10].attachEncoding!))
        XCTAssertNotNil(msg.attachments[10].attachRendering)
        XCTAssertEqual(0, msg.attachments[10].attachmentLinkId!)
        XCTAssertFalse((msg.attachments[10].getProperty(set: .attachment, name: "AttachmentWasSavedToCloud") as Bool?)!)
        XCTAssertEqual(.byValue, msg.attachments[10].attachMethod!)
        XCTAssertEqual(4294967295, msg.attachments[10].renderingPosition!)
        XCTAssertEqual(79870665600.0, msg.attachments[10].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual(0x00000008, msg.attachments[10].attachmentFlags!)
        XCTAssertEqual("image004.gif", msg.attachments[10].attachFilename!)
        XCTAssertEqual("image004.gif@01D66282.4EB1E440", msg.attachments[10].attachContentId!)
        XCTAssertEqual(".gif", msg.attachments[10].attachExtension!)
        XCTAssertFalse(msg.attachments[10].attachmentContactPhoto!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[10].storeSupportMask)
        XCTAssertEqual([.renderedInBody], msg.attachments[10].attachFlags)
        XCTAssertTrue(msg.attachments[10].attachmentHidden!)
        XCTAssertEqual("image004.gif", msg.attachments[10].displayName!)
        XCTAssertEqual([0x0A, 0x00, 0x00, 0x00], [UInt8](msg.attachments[10].recordKey!))
        XCTAssertEqual("image004.gif", msg.attachments[10].attachLongFilename!)
        XCTAssertEqual(79870665600.0, msg.attachments[10].exceptionEndTime!.timeIntervalSince1970)

        XCTAssertEqual(11, msg.attachments[11].attachNumber!)
        XCTAssertEqual(.attachment, msg.attachments[11].objectType!)
        XCTAssertEqual([.renderedInBody], msg.attachments[11].attachFlags)
        XCTAssertFalse(msg.attachments[11].attachmentContactPhoto!)
        XCTAssertEqual([.read], msg.attachments[11].access)
        XCTAssertEqual("image003.gif", msg.attachments[11].attachFilename!)
        XCTAssertEqual(79870665600.0, msg.attachments[11].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual([], [UInt8](msg.attachments[11].attachEncoding!))
        XCTAssertEqual(.readOnly, msg.attachments[11].accessLevel!)
        XCTAssertEqual("image/gif", msg.attachments[11].attachMimeTag!)
        XCTAssertEqual("image003.gif", msg.attachments[11].attachLongFilename!)
        XCTAssertNotNil(msg.attachments[11].attachRendering)
        XCTAssertEqual([0x0B, 0x00, 0x00, 0x00], [UInt8](msg.attachments[11].recordKey!))
        XCTAssertEqual("", (msg.attachments[11].getProperty(set: .attachment, name: "AttachmentOriginalUrl") as String?)!)
        XCTAssertEqual(0x00000008, msg.attachments[11].attachmentFlags!)
        XCTAssertEqual(".gif", msg.attachments[11].attachExtension!)
        XCTAssertNotNil(msg.attachments[11].attachDataBinary)
        XCTAssertEqual(0, msg.attachments[11].attachmentLinkId!)
        XCTAssertEqual("image003.gif", msg.attachments[11].displayName!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[11].storeSupportMask)
        XCTAssertEqual(.byValue, msg.attachments[11].attachMethod!)
        XCTAssertFalse((msg.attachments[11].getProperty(set: .attachment, name: "AttachmentWasSavedToCloud") as Bool?)!)
        XCTAssertEqual("image003.gif@01D66282.4EB1E440", msg.attachments[11].attachContentId!)
        XCTAssertEqual(4294967295, msg.attachments[11].renderingPosition!)
        XCTAssertEqual(79870665600.0, msg.attachments[11].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertTrue(msg.attachments[11].attachmentHidden!)

        XCTAssertFalse(msg.attachments[12].attachmentContactPhoto!)
        XCTAssertEqual("", msg.attachments[12].attachFilename!)
        XCTAssertEqual([], [UInt8](msg.attachments[12].attachEncoding!))
        XCTAssertEqual("BCF0060000000000C000000000000046", msg.attachments[12].attachPayloadProviderGuidString!)
        XCTAssertEqual(.byValue, msg.attachments[12].attachMethod!)
        XCTAssertEqual([.read], msg.attachments[12].access)
        XCTAssertEqual(.attachment, msg.attachments[12].objectType!)
        XCTAssertFalse((msg.attachments[12].getProperty(set: .attachment, name: "AttachmentWasSavedToCloud") as Bool?)!)
        XCTAssertEqual(.readOnly, msg.attachments[12].accessLevel!)
        XCTAssertNotNil(msg.attachments[12].attachDataBinary)
        XCTAssertEqual("Appointment", msg.attachments[12].attachPayloadClass!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[12].storeSupportMask)
        XCTAssertEqual("", (msg.attachments[12].getProperty(set: .attachment, name: "AttachmentOriginalUrl") as String?)!)
        XCTAssertFalse(msg.attachments[12].attachmentHidden!)
        XCTAssertNotNil(msg.attachments[12].attachRendering)
        XCTAssertEqual("hughbellars@gmail.com Calendar.ics", msg.attachments[12].displayName!)
        XCTAssertEqual([0x0C, 0x00, 0x00, 0x00], [UInt8](msg.attachments[12].recordKey!))
        XCTAssertEqual(0x00000000, msg.attachments[12].attachmentFlags!)
        XCTAssertEqual(".ics", msg.attachments[12].attachExtension!)
        XCTAssertEqual(12, msg.attachments[12].attachNumber!)
        XCTAssertEqual(4294967295, msg.attachments[12].renderingPosition!)
        XCTAssertEqual(79870665600.0, msg.attachments[12].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual("hughbellars@gmail.com Calendar.ics", msg.attachments[12].attachLongFilename!)
        XCTAssertEqual([], msg.attachments[12].attachFlags)
        XCTAssertEqual(79870665600.0, msg.attachments[12].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertEqual(0, msg.attachments[12].attachmentLinkId!)
    }

    func testReadMine4() throws {
        let data = try getData(name: "hughbe/custom3")
        let msg = try MsgFile(data: data)
        
        XCTAssertEqual(0, msg.reminderDelta!)
        XCTAssertEqual("", msg.displayCc!)
        XCTAssertEqual("SMTP", msg.sentRepresentingAddressType!)
        XCTAssertEqual("hughbellars@gmail.com", (msg.getProperty(id: .tagSenderName) as String?)!)
        XCTAssertEqual([.read], msg.access)
        XCTAssertEqual("00000002\u{01}hughbellars", msg.internetAccountStamp!)
        XCTAssertEqual("hughbellars@gmail.com", msg.lastModifierName!)
        XCTAssertEqual(20127, msg.internetCodepage!)
        XCTAssertEqual([.locked], msg.submitFlags)
        XCTAssertEqual(1595685073.0, msg.messageDeliveryTime!.timeIntervalSince1970)
        XCTAssertEqual("hughbellars@gmail.com", (msg.getProperty(id: .unknown0x680D) as String?)!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x48, 0x55, 0x47, 0x48, 0x42, 0x45, 0x4C, 0x4C, 0x41, 0x52, 0x53, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D], [UInt8](msg.senderSearchKey!))
        XCTAssertEqual(UUID(uuidString: "504346B0-3346-4246-AC66-333EA06D2732"), msg.changeKey!.namespaceGuid)
        XCTAssertEqual([0x00, 0x00, 0x0C, 0xD9], msg.changeKey!.localId)
        XCTAssertTrue(msg.useTnef!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x48, 0x55, 0x47, 0x48, 0x42, 0x45, 0x4C, 0x4C, 0x41, 0x52, 0x53, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.receivedBySearchKey!))
        XCTAssertEqual(.html, msg.messageEditorFormat!)
        XCTAssertEqual(1, (msg.getProperty(set: .common, lid: 0x000085D7) as UInt32?)!)
        XCTAssertEqual("base64", (msg.getProperty(set: .internetHeaders, name: "content-transfer-encoding") as String?)!)
        XCTAssertEqual("Approve: hughbellars@gmail.com Calendar", msg.subject!)
        XCTAssertEqual("hughbellars@gmail.com", msg.receivedByEmailAddress!)
        XCTAssertEqual("PCDFEB09\u{00}", msg.reportTag!.cookie)
        XCTAssertEqual(0x00020001, msg.reportTag!.version)
        XCTAssertEqual(0x00000000, msg.reportTag!.storeEntryIdSize)
        XCTAssertNil(msg.reportTag!.storeEntryId)
        XCTAssertEqual(0x00000000, msg.reportTag!.folderEntryIdSize)
        XCTAssertNil(msg.reportTag!.folderEntryId)
        XCTAssertEqual(0x00000000, msg.reportTag!.messageEntryIdSize)
        XCTAssertNil(msg.reportTag!.messageEntryId)
        XCTAssertEqual(0x0000002E, msg.reportTag!.searchFolderEntryIdSize)
        XCTAssertEqual(0x00000000, msg.reportTag!.searchFolderEntryId!.flags)
        XCTAssertEqual(UUID(uuidString: "59DA0729-9DAF-5C4A-B20C-8B81A78C96C0"), msg.reportTag!.searchFolderEntryId!.providerUid)
        XCTAssertEqual(.privateFolder, msg.reportTag!.searchFolderEntryId!.folderType)
        XCTAssertEqual(UUID(uuidString: "108EB6C3-75F7-CE11-B4CD-00AA00BBB6E6"), msg.reportTag!.searchFolderEntryId!.databaseGuid)
        XCTAssertEqual(3940649673949184, msg.reportTag!.searchFolderEntryId!.globalCounter)
        XCTAssertEqual(0x0000, msg.reportTag!.searchFolderEntryId!.pad)
        XCTAssertEqual(0x00000010, msg.reportTag!.messageSearchKeySize)
        XCTAssertEqual([0xAB, 0xDE, 0xD0, 0xB3, 0x8D, 0x22, 0xDC, 0x4C, 0x94, 0x52, 0xBA, 0x2D, 0x83, 0x3D, 0x8D, 0xAD], [UInt8](msg.reportTag!.messageSearchKey!))
        XCTAssertEqual(0x00000001, msg.reportTag!.ansiTextSize)
        XCTAssertEqual("\u{00}", msg.reportTag!.ansiText!)
        XCTAssertTrue(msg.processed!)
        XCTAssertEqual("hughbellars@gmail.com", msg.senderEmailAddress!)
        XCTAssertEqual(1595685233.0, msg.creationTime!.timeIntervalSince1970)
        XCTAssertEqual("00000002\u{01}hughbellars", (msg.getProperty(id: .unknown0x680E) as String?)!)
        XCTAssertEqual("hughbellars@gmail.com", msg.receivedRepresentingEmailAddress!)
        XCTAssertEqual("SMTP", (msg.getProperty(id: .tagSenderAddressType) as String?)!)
        XCTAssertNotNil(msg.tnefCorrelationKey)
        XCTAssertEqual("<!&!AAAAAAAAAAAuAAAAAAAAAFnaBymdr1xKsgyLgaeMlsABAMO2jhD3dRHOtM0AqgC7tuYAAAAAAA4AABAAAACr3tCzjSLcTJRSui2DPY2tAQAAAAA=@gmail.com>", (msg.getProperty(id: .tagInternetMessageId) as String?)!)
        XCTAssertNotNil(msg.transportMessageHeaders)
        XCTAssertEqual(.personal, msg.originalSensitivity!)
        XCTAssertEqual("IPM.Note", msg.messageClass!)
        XCTAssertEqual([0x9D, 0xD7, 0x2A, 0xCC, 0xCA, 0x78, 0xE9, 0x40, 0x8B, 0xB8, 0x18, 0xA5, 0xEC, 0xBC, 0x5E, 0x37], [UInt8]((msg.getProperty(set: .common, name: "InTransitMessageCorrelator") as Data?)!))
        XCTAssertEqual("application/ms-tnef; charset=\"Windows-1252\"; name=\"winmail.dat\"", (msg.getProperty(set: .internetHeaders, name: "content-type") as String?)!)
        XCTAssertEqual(.notAssigned, msg.taskMode!)
        XCTAssertEqual([.read, MessageFlags(rawValue: 0x00030000)], msg.messageFlags)
        XCTAssertEqual("SMTP", msg.receivedRepresentingAddressType!)
        XCTAssertEqual(1595685072.0, msg.clientSubmitTime!.timeIntervalSince1970)
        XCTAssertFalse(msg.alternateRecipientAllowed!)
        XCTAssertEqual([0x81, 0x9E, 0x00, 0x00], [UInt8](msg.searchKey!))
        XCTAssertEqual("Approve: hughbellars@gmail.com Calendar", msg.normalizedSubject!)
        XCTAssertEqual("hughbellars@gmail.com", msg.sentRepresentingEmailAddress!)
        XCTAssertEqual(1033, msg.messageLocaleId!)
        XCTAssertEqual("hughbellars@gmail.com", msg.sentRepresentingName!)
        XCTAssertEqual(.normal, msg.importance!)
        XCTAssertEqual("hughbellars@gmail.com", msg.internetAccountName!)
        XCTAssertEqual(2, msg.predecessorChangeList!.values.count)
        XCTAssertEqual(UUID(uuidString: "504346B0-3346-4246-AC66-333EA06D2732"), msg.predecessorChangeList!.values[0].namespaceGuid)
        XCTAssertEqual([0x00, 0x00, 0x0C, 0xD9], msg.predecessorChangeList!.values[0].localId)
        XCTAssertEqual(UUID(uuidString: "75EB2FE9-5096-8644-83B8-7DE522AA4948"), msg.predecessorChangeList!.values[1].namespaceGuid)
        XCTAssertEqual([0x00], msg.predecessorChangeList!.values[1].localId)
        XCTAssertEqual(0x01, msg.conversationIndex!.header.reserved)
        XCTAssertEqual(0xD6, msg.conversationIndex!.header.currentFileTime.0)
        XCTAssertEqual(0x62, msg.conversationIndex!.header.currentFileTime.1)
        XCTAssertEqual(0x82, msg.conversationIndex!.header.currentFileTime.2)
        XCTAssertEqual(0x3D, msg.conversationIndex!.header.currentFileTime.3)
        XCTAssertEqual(0x3E, msg.conversationIndex!.header.currentFileTime.4)
        XCTAssertEqual(UUID(uuidString: "F41AEE48-D7E0-4F2E-8BDD-56FCA6568479"), msg.conversationIndex!.header.guid)
        XCTAssertEqual(1, msg.conversationIndex!.responseLevels.count)
        XCTAssertEqual(0xC51A0200, msg.conversationIndex!.responseLevels[0].dcAndDeltaTime)
        XCTAssertEqual(0xC0, msg.conversationIndex!.responseLevels[0].random)
        XCTAssertTrue(msg.rtfInSync!)
        XCTAssertEqual("Approve", msg.verbResponse!)
        XCTAssertEqual("", msg.displayBcc!)
        XCTAssertEqual("hughbellars@gmail.com\u{00}", msg.displayTo!)
        XCTAssertEqual("SMTP", msg.receivedByAddressType!)
        XCTAssertEqual(1595685233.0, msg.lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual("hughbellars@gmail.com Calendar", msg.conversationTopic!)
        XCTAssertTrue(msg.recipientReassignmentProhibited!)
        XCTAssertEqual(0x00160000, msg.internetMailOverrideFormat!)
        XCTAssertEqual(0x00000000, (msg.receivedRepresentingEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.receivedRepresentingEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.receivedRepresentingEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.unicode], (msg.receivedRepresentingEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars@gmail.com", (msg.receivedRepresentingEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.receivedRepresentingEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.receivedRepresentingEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual(.readOnly, msg.accessLevel!)
        XCTAssertFalse(msg.readReceiptRequested!)
        XCTAssertEqual("hughbellars@gmail.com", msg.receivedByName!)
        XCTAssertEqual(.processWhenReceivedOrOpened, msg.autoProcessState!)
        XCTAssertFalse(msg.`private`!)
        XCTAssertEqual("00000002\u{01}hughbellars@gmail.com\u{01}hughbellars@gmail.com", msg.primarySendAccount!)
        XCTAssertFalse(msg.agingDontAgeMe!)
        XCTAssertEqual([.openToDelete], msg.sideEffects)
        XCTAssertEqual(0x00000000, (msg.sentRepresentingEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.sentRepresentingEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.sentRepresentingEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.unicode], (msg.sentRepresentingEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars@gmail.com", (msg.sentRepresentingEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.sentRepresentingEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.sentRepresentingEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual("IPM.Note", (msg.getProperty(set: .common, lid: 0x000085D8) as String?)!)
        XCTAssertTrue(msg.deleteAfterSubmit!)
        XCTAssertTrue(msg.conversationIndexTracking!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x48, 0x55, 0x47, 0x48, 0x42, 0x45, 0x4C, 0x4C, 0x41, 0x52, 0x53, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D], [UInt8](msg.sentRepresentingSearchKey!))
        XCTAssertEqual(.personal, msg.sensitivity!)
        XCTAssertEqual("hughbellars@gmail.com", msg.receivedRepresentingName!)
        XCTAssertEqual("", msg.subjectPrefix!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.storeSupportMask)
        XCTAssertEqual(0x00000000, (msg.receivedByEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.receivedByEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.receivedByEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.unicode], (msg.receivedByEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars@gmail.com", (msg.receivedByEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.receivedByEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.receivedByEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual(.normal, msg.priority!)
        XCTAssertEqual(0x00000000, (msg.senderEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.senderEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.senderEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.unicode], (msg.senderEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars@gmail.com", (msg.senderEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.senderEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.senderEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x48, 0x55, 0x47, 0x48, 0x42, 0x45, 0x4C, 0x4C, 0x41, 0x52, 0x53, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.receivedRepresentingSearchKey!))
        XCTAssertEqual("00000002\u{01}hughbellars@gmail.com\u{01}hughbellars@gmail.com", msg.nextSendAcct!)

        XCTAssertEqual(1, msg.recipients.count)
        XCTAssertEqual("SMTP", msg.recipients[0].addressType!)
        XCTAssertEqual(.primaryRecipient, msg.recipients[0].recipientType!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x48, 0x55, 0x47, 0x48, 0x42, 0x45, 0x4C, 0x4C, 0x41, 0x52, 0x53, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D], [UInt8](msg.recipients[0].searchKey!))
        XCTAssertEqual(0, msg.recipients[0].rowid!)
        XCTAssertEqual("hughbellars@gmail.com", msg.recipients[0].emailAddress!)
        XCTAssertEqual(0x00000000, (msg.recipients[0].entryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.recipients[0].entryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.recipients[0].entryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.unicode], (msg.recipients[0].entryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars@gmail.com", (msg.recipients[0].entryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.recipients[0].entryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.recipients[0].entryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual("hughbellars@gmail.com", msg.recipients[0].displayName!)
        XCTAssertEqual([0x00, 0x00, 0x9D, 0x8F], [UInt8](msg.recipients[0].instanceKey!))

        XCTAssertEqual(0, msg.attachments.count)
    }

    func testReadMine5() throws {
        let data = try getData(name: "hughbe/contact")
        let msg = try MsgFile(data: data)
     
        XCTAssertEqual("F.N.M.N.L.N.", msg.initials!)
        XCTAssertFalse(msg.autoLog!)
        XCTAssertEqual(1, msg.predecessorChangeList!.values.count)
        XCTAssertEqual(UUID(uuidString: "504346B0-3346-4246-AC66-333EA06D2732"), msg.predecessorChangeList!.values[0].namespaceGuid)
        XCTAssertEqual([0x00, 0x00, 0x18, 0x5E], msg.predecessorChangeList!.values[0].localId)
        XCTAssertEqual("First Name Middle Name Last Name Suffix", msg.fax2OriginalDisplayName!)
        XCTAssertEqual(.normal, msg.sensitivity!)
        XCTAssertEqual("City", msg.locality!)
        XCTAssertEqual([0x89, 0xB9, 0xA7, 0x45, 0xA0, 0xE1, 0x2A, 0x44, 0x99, 0x8D, 0x19, 0xF9, 0x1E, 0xC4, 0xEC, 0x78], [UInt8](msg.searchKey!))
        XCTAssertEqual(.undefined, msg.nativeBody!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x48, 0x55, 0x47, 0x48, 0x42, 0x45, 0x4C, 0x4C, 0x41, 0x52, 0x53, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.sentRepresentingSearchKey!))
        XCTAssertEqual(256, msg.contactCharacterSet!)
        XCTAssertEqual("16.0", msg.currentVersionName!)
        XCTAssertEqual([.openToDelete, .coerceToInbox, .openToMove], msg.sideEffects)
        XCTAssertEqual("Manager", msg.managerName!)
        XCTAssertEqual(.notStarted, msg.taskStatus!)
        XCTAssertEqual("IPM.Contact", msg.messageClass!)
        XCTAssertEqual("Street\r\nCity, State  ZIP", msg.homeAddress!)
        XCTAssertEqual(0x01, msg.conversationIndex!.header.reserved)
        XCTAssertEqual(0xD6, msg.conversationIndex!.header.currentFileTime.0)
        XCTAssertEqual(0x63, msg.conversationIndex!.header.currentFileTime.1)
        XCTAssertEqual(0xF4, msg.conversationIndex!.header.currentFileTime.2)
        XCTAssertEqual(0x18, msg.conversationIndex!.header.currentFileTime.3)
        XCTAssertEqual(0xC8, msg.conversationIndex!.header.currentFileTime.4)
        XCTAssertEqual(UUID(uuidString: "8F7622C6-9F6C-4206-98B3-779886E5085E"), msg.conversationIndex!.header.guid)
        XCTAssertEqual(0, msg.conversationIndex!.responseLevels.count)
        XCTAssertEqual("ZIP", msg.postalCode!)
        XCTAssertEqual("", msg.account!)
        XCTAssertEqual("Mr", msg.displayNamePrefix!)
        XCTAssertEqual(1595840433.0, msg.clientSubmitTime!.timeIntervalSince1970)
        XCTAssertFalse(msg.originatorDeliveryReportRequested!)
        XCTAssertEqual("", msg.fax3EmailAddress!)
        XCTAssertEqual("Name", msg.conversationTopic!)
        XCTAssertEqual("", msg.subjectPrefix!)
        XCTAssertEqual(.homeAddressIsMailingAddress, msg.postalAddressId!)
        XCTAssertEqual("First Name Middle Name Last Name Suffix", msg.subject!)
        XCTAssertTrue(msg.hasAttachments!)
        XCTAssertEqual([0x00000001, 0x00008090, 0x00003A08, 0x00003A09, 0x00003A24, 0x00003A1C], msg.contactItemData!)
        XCTAssertEqual("FAX", msg.fax1AddressType!)
        XCTAssertEqual("email2", msg.email2OriginalDisplayName!)
        XCTAssertEqual("Street", msg.streetAddress!)
        XCTAssertEqual(0x00000200, msg.iconIndex!)
        XCTAssertEqual("Last Name, First Name Middle Name", msg.fileUnder!)
        XCTAssertEqual("Nickname", msg.nickname!)
        XCTAssertEqual("Mr First Name Middle Name Last Name Suffix", msg.displayName!)
        XCTAssertEqual(1595808000.0, msg.birthdayLocal!.timeIntervalSince1970)
        XCTAssertEqual("+2 (3) 4 x 5", msg.homeTelephoneNumber!)
        XCTAssertEqual("+3 (4) 5 x 6", msg.businessFaxNumber!)
        XCTAssertEqual("", msg.displayBcc!)
        XCTAssertEqual("Street", msg.homeAddressStreet!)
        XCTAssertEqual("+1 (2) 3 x 4", msg.businessTelephoneNumber!)
        XCTAssertFalse(msg.agingDontAgeMe!)
        XCTAssertEqual(1594684800.0, msg.weddingAnniversary!.timeIntervalSince1970)
        XCTAssertEqual("Suffix", msg.generation!)
        XCTAssertEqual("State", msg.homeAddressStateOrProvince!)
        XCTAssertEqual("Street\r\nCity, State  ZIP", msg.postalAddress!)
        XCTAssertEqual(28591, msg.internetCodepage!)
        XCTAssertEqual(.flagged, msg.flagStatus!)
        XCTAssertEqual("", msg.fax1EmailAddress!)
        XCTAssertEqual(32791, msg.fileUnderId!)
        XCTAssertEqual("US", msg.homeAddressCountryCode!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.storeSupportMask)
        XCTAssertEqual("FAX", msg.fax2AddressType!)
        XCTAssertTrue(msg.rtfInSync!)
        XCTAssertEqual("US", msg.addressCountryCode!)
        XCTAssertEqual("Last Name", msg.surname!)
        XCTAssertEqual("", (msg.getProperty(set: .address, lid: 0x0000800E) as String?)!)
        XCTAssertEqual("hughbellars@gmail.com", msg.sentRepresentingEmailAddress!)
        XCTAssertFalse((msg.getProperty(set: .address, lid: 0x00008063) as Bool?)!)
        XCTAssertEqual([.businessFaxDefined], msg.addressBookProviderArrayType)
        XCTAssertEqual("http://ADDRE", msg.freeBusyLocation!)
        XCTAssertEqual([.timeFlagged], msg.toDoItemFlags)
        XCTAssertEqual(1595840469.0, msg.lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual("Department", msg.departmentName!)
        XCTAssertEqual("Office", msg.officeLocation!)
        XCTAssertEqual("United States of America", msg.homeAddressCountry!)
        XCTAssertEqual("First Name Middle Name Last Name Suffix", msg.normalizedSubject!)
        XCTAssertEqual("", msg.instantMessagingAddress!)
        XCTAssertEqual("", msg.language!)
        XCTAssertTrue(msg.replyRequested!)
        XCTAssertEqual("Profession", msg.profession!)
        XCTAssertEqual("displayas", msg.email2DisplayName!)
        XCTAssertEqual("First Name Middle Name Last Name Suffix@+3 (4) 5 ", msg.fax2EmailAddress!)
        XCTAssertEqual(1594684800.0, msg.weddingAnniversaryLocal!.timeIntervalSince1970)
        XCTAssertFalse(msg.taskComplete!)
        XCTAssertEqual("Spouse", msg.spouseName!)
        XCTAssertEqual("ZIP", msg.homeAddressPostalCode!)
        XCTAssertEqual(0x00000000, (msg.birthdayEventEntryId as? GeneralEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "59DA0729-9DAF-5C4A-B20C-8B81A78C96C0"), (msg.birthdayEventEntryId as? GeneralEntryID)!.providerUid)
        XCTAssertEqual([0x07, 0x00, 0xB2, 0xA9, 0x7E, 0x6D, 0x73, 0xAB, 0x95, 0x4D, 0xBB, 0x15, 0x55, 0xC1, 0x54, 0x72, 0xFC, 0xB1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB2, 0xA9, 0x7E, 0x6D, 0x73, 0xAB, 0x95, 0x4D, 0xBB, 0x15, 0x55, 0xC1, 0x54, 0x72, 0xFC, 0xB1, 0x00, 0x00, 0x00, 0x00, 0x08, 0x04, 0x00, 0x00], (msg.birthdayEventEntryId as? GeneralEntryID)!.providerData)
        XCTAssertEqual([.read, .hasAttachment], msg.messageFlags)
        XCTAssertEqual(0x00000000, (msg.senderEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.senderEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.senderEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.unicode], (msg.senderEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars@gmail.com", (msg.senderEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.senderEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.senderEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual("", msg.email2EmailAddress!)
        XCTAssertEqual("SMTP", msg.sentRepresentingAddressType!)
        XCTAssertEqual("FAX", msg.fax3AddressType!)
        XCTAssertEqual("+4 (5) 6 x 7", msg.mobileTelephoneNumber!)
        XCTAssertEqual(1613001, msg.currentVersion!)
        XCTAssertEqual(1033, msg.messageLocaleId!)
        XCTAssertEqual("hughbellars@gmail.com", (msg.getProperty(id: .tagSenderName) as String?)!)
        XCTAssertEqual([0xAD, 0xDA, 0x3A, 0x49, 0xE1, 0xDD, 0x14, 0x46, 0xBD, 0x7B, 0x76, 0xC6, 0x43, 0x36, 0xB6, 0x13], [UInt8]((msg.getProperty(set: .common, name: "InTransitMessageCorrelator") as Data?)!))
        XCTAssertTrue(msg.alternateRecipientAllowed!)
        XCTAssertEqual(.red, msg.followupIcon!)
        XCTAssertFalse(msg.readReceiptRequested!)
        XCTAssertNotNil(msg.rtfCompressed)
        XCTAssertEqual("00000002\u{01}hughbellars@gmail.com", msg.internetAccountStamp!)
        XCTAssertEqual("State", msg.stateOrProvince!)
        XCTAssertEqual("Job Titl", msg.title!)
        XCTAssertEqual(0x00000000, (msg.referenceEntryId as? GeneralEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "59DA0729-9DAF-5C4A-B20C-8B81A78C96C0"), (msg.referenceEntryId as? GeneralEntryID)!.providerUid)
        XCTAssertEqual([0x07, 0x00, 0xB2, 0xA9, 0x7E, 0x6D, 0x73, 0xAB, 0x95, 0x4D, 0xBB, 0x15, 0x55, 0xC1, 0x54, 0x72, 0xFC, 0xB1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xB2, 0xA9, 0x7E, 0x6D, 0x73, 0xAB, 0x95, 0x4D, 0xBB, 0x15, 0x55, 0xC1, 0x54, 0x72, 0xFC, 0xB1, 0x00, 0x00, 0x00, 0x00, 0x38, 0x02, 0x00, 0x00], (msg.referenceEntryId as? GeneralEntryID)!.providerData)
        XCTAssertEqual(UUID(uuidString: "504346B0-3346-4246-AC66-333EA06D2732"), msg.changeKey!.namespaceGuid)
        XCTAssertEqual([0x00, 0x00, 0x18, 0x5E], msg.changeKey!.localId)
        XCTAssertEqual("", msg.department!)
        XCTAssertEqual(.readOnly, msg.accessLevel!)
        XCTAssertFalse(msg.deleteAfterSubmit!)
        XCTAssertEqual(0x00000000, (msg.sentRepresentingEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.sentRepresentingEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.sentRepresentingEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.unicode], (msg.sentRepresentingEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars@gmail.com", (msg.sentRepresentingEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.sentRepresentingEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.sentRepresentingEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual("hughbellars@gmail.com", msg.sentRepresentingName!)
        XCTAssertEqual("SMTP", (msg.getProperty(id: .tagSenderAddressType) as String?)!)
        XCTAssertEqual(1595840433.0, msg.validFlagStringProof!.timeIntervalSince1970)
        XCTAssertEqual([0x00008017, 0x00008037, 0x00003A16, 0x00008019, 0x00008018], msg.fileUnderList!)
        XCTAssertEqual(.normal, msg.importance!)
        XCTAssertEqual(0x00000000, (msg.anniversaryEventEntryId as? GeneralEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "59DA0729-9DAF-5C4A-B20C-8B81A78C96C0"), (msg.anniversaryEventEntryId as? GeneralEntryID)!.providerUid)
        XCTAssertEqual([0x07, 0x00, 0xB2, 0xA9, 0x7E, 0x6D, 0x73, 0xAB, 0x95, 0x4D, 0xBB, 0x15, 0x55, 0xC1, 0x54, 0x72, 0xFC, 0xB1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB2, 0xA9, 0x7E, 0x6D, 0x73, 0xAB, 0x95, 0x4D, 0xBB, 0x15, 0x55, 0xC1, 0x54, 0x72, 0xFC, 0xB1, 0x00, 0x00, 0x00, 0x00, 0x08, 0x05, 0x00, 0x00], (msg.anniversaryEventEntryId as? GeneralEntryID)!.providerData)
        XCTAssertEqual("", msg.displayCc!)
        XCTAssertEqual(.notAssigned, msg.taskMode!)
        XCTAssertEqual("hughbellars@gmail.com", msg.senderEmailAddress!)
        XCTAssertEqual("notes\r\n", msg.body!)
        XCTAssertTrue(msg.responseRequested!)
        XCTAssertFalse(msg.`private`!)
        XCTAssertEqual("hughbellars@gmail.com", msg.internetAccountName!)
        XCTAssertEqual(1595840433.0, msg.messageDeliveryTime!.timeIntervalSince1970)
        XCTAssertEqual(1595808000.0, msg.birthday!.timeIntervalSince1970)
        XCTAssertEqual("", msg.keyword!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x48, 0x55, 0x47, 0x48, 0x42, 0x45, 0x4C, 0x4C, 0x41, 0x52, 0x53, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.senderSearchKey!))
        XCTAssertEqual("Assistant", msg.assistant!)
        XCTAssertEqual(1595840469.0, msg.creationTime!.timeIntervalSince1970)
        XCTAssertEqual("", msg.location!)
        XCTAssertEqual("", msg.displayTo!)
        XCTAssertEqual(0x00000000, msg.fax2OriginalEntryId!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), msg.fax2OriginalEntryId!.providerUid)
        XCTAssertEqual(0x0000, msg.fax2OriginalEntryId!.version)
        XCTAssertEqual([.unicode], msg.fax2OriginalEntryId!.entryFlags)
        XCTAssertEqual("First Name Middle Name Last Name Suffix", msg.fax2OriginalEntryId!.displayName)
        XCTAssertEqual("FAX", msg.fax2OriginalEntryId!.addressType)
        XCTAssertEqual("First Name Middle Name Last Name Suffix@+3 (4) 5 ", msg.fax2OriginalEntryId!.emailAddress)
        XCTAssertEqual(0.0, msg.percentComplete!)
        XCTAssertEqual([.read], msg.access)
        XCTAssertEqual("United States of America", msg.country!)
        XCTAssertEqual("", msg.email2AddressType!)
        XCTAssertEqual("Middle Name", msg.middleName!)
        XCTAssertEqual(.normal, msg.priority!)
        XCTAssertEqual(0, msg.reminderDelta!)
        XCTAssertEqual("Company", msg.companyName!)
        XCTAssertEqual([.businessFaxDefined], msg.addressBookProviderEmailList!)
        XCTAssertEqual("", msg.fax3OriginalDisplayName!)
        XCTAssertEqual([0x00008080, 0x00008090, 0x000080A0], (msg.getProperty(set: .address, lid: 0x00008027) as [UInt32]?)!)
        XCTAssertEqual("", msg.fax1OriginalDisplayName!)
        XCTAssertEqual("hughbellars@gmail.com", msg.lastModifierName!)
        XCTAssertEqual("First Name", msg.givenName!)
        XCTAssertEqual("City", msg.homeAddressCity!)

        XCTAssertEqual(0, msg.recipients.count)
        XCTAssertEqual(1, msg.attachments.count)
        XCTAssertFalse(msg.attachments[0].attachmentHidden!)
        XCTAssertEqual(5, msg.attachments[0].renderingPosition!)
        XCTAssertEqual([.read], msg.attachments[0].access)
        XCTAssertEqual([], [UInt8](msg.attachments[0].attachEncoding!))
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[0].storeSupportMask)
        XCTAssertEqual(.attachment, msg.attachments[0].objectType!)
        XCTAssertEqual(.embeddedMessage, msg.attachments[0].attachMethod!)
        XCTAssertEqual(0, msg.attachments[0].attachmentLinkId!)
        XCTAssertNotNil(msg.attachments[0].attachDataBinary)
        XCTAssertEqual(0x00000000, msg.attachments[0].attachmentFlags!)
        XCTAssertEqual([0x00, 0x00, 0x00, 0x00], [UInt8](msg.attachments[0].recordKey!))
        XCTAssertEqual(79870665600.0, msg.attachments[0].exceptionStartTime!.timeIntervalSince1970)
        XCTAssertNotNil(msg.attachments[0].attachRendering)
        XCTAssertFalse(msg.attachments[0].attachmentContactPhoto!)
        XCTAssertEqual(.readOnly, msg.attachments[0].accessLevel!)
        XCTAssertEqual([], msg.attachments[0].attachFlags)
        XCTAssertEqual(79870665600.0, msg.attachments[0].exceptionEndTime!.timeIntervalSince1970)
        XCTAssertEqual(0, msg.attachments[0].attachNumber!)
        XCTAssertEqual("An invitation to Desktop Community Standup", msg.attachments[0].displayName!)
    }

    func testReadMine6() throws {
        let data = try getData(name: "hughbe/event")
        let msg = try MsgFile(data: data)
        
        XCTAssertEqual(1595840668.0, msg.creationTime!.timeIntervalSince1970)
        XCTAssertEqual(1595840470.0, msg.messageDeliveryTime!.timeIntervalSince1970)
        XCTAssertTrue(msg.rtfInSync!)
        XCTAssertEqual(1594684800.0, msg.exceptionReplaceTime!.timeIntervalSince1970)
        XCTAssertEqual([0x78, 0x4F, 0x66, 0xD4, 0x58, 0xFB, 0xE7, 0x43, 0x93, 0x0E, 0x41, 0xF2, 0xF2, 0x83, 0xF3, 0x4D], [UInt8](msg.searchKey!))
        XCTAssertEqual(0x02, msg.appointmentTimeZoneDefinitionEndDisplay!.majorVersion)
        XCTAssertEqual(0x01, msg.appointmentTimeZoneDefinitionEndDisplay!.minorVersion)
        XCTAssertEqual(0x000C, msg.appointmentTimeZoneDefinitionEndDisplay!.cbHeader)
        XCTAssertEqual(0x0002, msg.appointmentTimeZoneDefinitionEndDisplay!.reserved)
        XCTAssertEqual(0x0003, msg.appointmentTimeZoneDefinitionEndDisplay!.cchKeyName)
        XCTAssertEqual("UTC", msg.appointmentTimeZoneDefinitionEndDisplay!.keyName)
        XCTAssertEqual(1, msg.appointmentTimeZoneDefinitionEndDisplay!.cRules)
        XCTAssertEqual(0x02, msg.appointmentTimeZoneDefinitionEndDisplay!.rules[0].majorVersion)
        XCTAssertEqual(0x01, msg.appointmentTimeZoneDefinitionEndDisplay!.rules[0].minorVersion)
        XCTAssertEqual(0x003E, msg.appointmentTimeZoneDefinitionEndDisplay!.rules[0].reserved)
        XCTAssertEqual([.effectiveTzReg], msg.appointmentTimeZoneDefinitionEndDisplay!.rules[0].flags)
        XCTAssertEqual(1601, msg.appointmentTimeZoneDefinitionEndDisplay!.rules[0].wYear)
        XCTAssertEqual([0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], msg.appointmentTimeZoneDefinitionEndDisplay!.rules[0].x)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionEndDisplay!.rules[0].lBias)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionEndDisplay!.rules[0].lStandardBias)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionEndDisplay!.rules[0].lDaylightBias)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionEndDisplay!.rules[0].stStandardDate.wYear)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionEndDisplay!.rules[0].stStandardDate.wMonth)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionEndDisplay!.rules[0].stStandardDate.wDayOfWeek)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionEndDisplay!.rules[0].stStandardDate.wDay)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionEndDisplay!.rules[0].stStandardDate.wHour)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionEndDisplay!.rules[0].stStandardDate.wMinute)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionEndDisplay!.rules[0].stStandardDate.wSecond)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionEndDisplay!.rules[0].stStandardDate.wMilliseconds)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionEndDisplay!.rules[0].stDaylightDate.wYear)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionEndDisplay!.rules[0].stDaylightDate.wMonth)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionEndDisplay!.rules[0].stDaylightDate.wDayOfWeek)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionEndDisplay!.rules[0].stDaylightDate.wDay)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionEndDisplay!.rules[0].stDaylightDate.wHour)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionEndDisplay!.rules[0].stDaylightDate.wMinute)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionEndDisplay!.rules[0].stDaylightDate.wSecond)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionEndDisplay!.rules[0].stDaylightDate.wMilliseconds)
        XCTAssertEqual(0x00000000, (msg.sentRepresentingEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.sentRepresentingEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.sentRepresentingEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.unicode], (msg.sentRepresentingEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars@gmail.com", (msg.sentRepresentingEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.sentRepresentingEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.sentRepresentingEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual("16.0", msg.currentVersionName!)
        XCTAssertEqual("", msg.collaborateDoc!)
        XCTAssertEqual(28591, msg.internetCodepage!)
        XCTAssertFalse(msg.`private`!)
        XCTAssertEqual(UUID(uuidString: "504346B0-3346-4246-AC66-333EA06D2732"), msg.changeKey!.namespaceGuid)
        XCTAssertEqual([0x00, 0x00, 0x18, 0x65], msg.changeKey!.localId)
        XCTAssertEqual("hughbellars@gmail.com", msg.lastModifierName!)
        XCTAssertEqual(1595840470.0, msg.validFlagStringProof!.timeIntervalSince1970)
        XCTAssertEqual(1595840668.0, msg.lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual(1594684800.0, msg.reminderTime!.timeIntervalSince1970)
        XCTAssertEqual("First Name Middle Name Last Name Suffix", msg.contactLinkName!)
        XCTAssertEqual(15, msg.reminderDelta!)
        XCTAssertTrue(msg.responseRequested!)
        XCTAssertTrue(msg.smartNoAttach!)
        XCTAssertTrue(msg.alternateRecipientAllowed!)
        XCTAssertEqual("hughbellars@gmail.com", msg.sentRepresentingName!)
        XCTAssertEqual([], msg.appointmentStateFlags)
        XCTAssertFalse(msg.deleteAfterSubmit!)
        XCTAssertEqual("SMTP", msg.sentRepresentingAddressType!)
        XCTAssertEqual("", msg.displayCc!)
        XCTAssertEqual(0, msg.appointmentSequence!)
        XCTAssertEqual("hughbellars@gmail.com", msg.senderEmailAddress!)
        XCTAssertEqual(" \r\n", msg.body!)
        XCTAssertEqual([.read], msg.access)
        XCTAssertEqual("First Name Middle Name Last Name Suffix's Anniversary", msg.subject!)
        XCTAssertEqual(1626219900.0, msg.reminderSignalTime!.timeIntervalSince1970)
        XCTAssertFalse(msg.agingDontAgeMe!)
        XCTAssertEqual(1595840470.0, msg.clientSubmitTime!.timeIntervalSince1970)
        XCTAssertEqual(.workingElsewhere, msg.busyStatus!)
        XCTAssertFalse(msg.appointmentCounterProposal!)
        XCTAssertEqual(.readOnly, msg.accessLevel!)
        XCTAssertEqual(.notAssigned, msg.taskMode!)
        XCTAssertTrue(msg.replyRequested!)
        XCTAssertEqual(0x00000400, msg.iconIndex!)
        XCTAssertEqual(1594684800.0, msg.clipStart!.timeIntervalSince1970)
        XCTAssertEqual(0x02, msg.appointmentTimeZoneDefinitionStartDisplay!.majorVersion)
        XCTAssertEqual(0x01, msg.appointmentTimeZoneDefinitionStartDisplay!.minorVersion)
        XCTAssertEqual(0x000C, msg.appointmentTimeZoneDefinitionStartDisplay!.cbHeader)
        XCTAssertEqual(0x0002, msg.appointmentTimeZoneDefinitionStartDisplay!.reserved)
        XCTAssertEqual(0x0003, msg.appointmentTimeZoneDefinitionStartDisplay!.cchKeyName)
        XCTAssertEqual("UTC", msg.appointmentTimeZoneDefinitionStartDisplay!.keyName)
        XCTAssertEqual(1, msg.appointmentTimeZoneDefinitionStartDisplay!.cRules)
        XCTAssertEqual(0x02, msg.appointmentTimeZoneDefinitionStartDisplay!.rules[0].majorVersion)
        XCTAssertEqual(0x01, msg.appointmentTimeZoneDefinitionStartDisplay!.rules[0].minorVersion)
        XCTAssertEqual(0x003E, msg.appointmentTimeZoneDefinitionStartDisplay!.rules[0].reserved)
        XCTAssertEqual([.effectiveTzReg], msg.appointmentTimeZoneDefinitionStartDisplay!.rules[0].flags)
        XCTAssertEqual(1601, msg.appointmentTimeZoneDefinitionStartDisplay!.rules[0].wYear)
        XCTAssertEqual([0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], msg.appointmentTimeZoneDefinitionStartDisplay!.rules[0].x)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionStartDisplay!.rules[0].lBias)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionStartDisplay!.rules[0].lStandardBias)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionStartDisplay!.rules[0].lDaylightBias)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionStartDisplay!.rules[0].stStandardDate.wYear)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionStartDisplay!.rules[0].stStandardDate.wMonth)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionStartDisplay!.rules[0].stStandardDate.wDayOfWeek)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionStartDisplay!.rules[0].stStandardDate.wDay)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionStartDisplay!.rules[0].stStandardDate.wHour)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionStartDisplay!.rules[0].stStandardDate.wMinute)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionStartDisplay!.rules[0].stStandardDate.wSecond)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionStartDisplay!.rules[0].stStandardDate.wMilliseconds)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionStartDisplay!.rules[0].stDaylightDate.wYear)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionStartDisplay!.rules[0].stDaylightDate.wMonth)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionStartDisplay!.rules[0].stDaylightDate.wDayOfWeek)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionStartDisplay!.rules[0].stDaylightDate.wDay)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionStartDisplay!.rules[0].stDaylightDate.wHour)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionStartDisplay!.rules[0].stDaylightDate.wMinute)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionStartDisplay!.rules[0].stDaylightDate.wSecond)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionStartDisplay!.rules[0].stDaylightDate.wMilliseconds)
        XCTAssertEqual(1594684800.0, msg.startDate!.timeIntervalSince1970)
        XCTAssertEqual(1594684800.0, msg.appointmentStartWhole!.timeIntervalSince1970)
        XCTAssertEqual("hughbellars@gmail.com", (msg.getProperty(id: .tagSenderName) as String?)!)
        XCTAssertFalse(msg.originatorDeliveryReportRequested!)
        XCTAssertEqual([.openToDelete, .coerceToInbox, .openToCopy, .openToMove, .openForContextMenu], msg.sideEffects)
        XCTAssertEqual([0x01, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x89, 0xB9, 0xA7, 0x45, 0xA0, 0xE1, 0x2A, 0x44, 0x99, 0x8D, 0x19, 0xF9, 0x1E, 0xC4, 0xEC, 0x78], [UInt8](msg.contactLinkSearchKey!))
        XCTAssertEqual("", msg.directory!)
        XCTAssertEqual(1, msg.contactLinkEntry!.addrBookEntryIdCount)
        XCTAssertEqual(0x00000074, msg.contactLinkEntry!.fieldSize)
        XCTAssertEqual(1, msg.contactLinkEntry!.addrBookEntryIdData.count)
        XCTAssertEqual(0x0000006D, (msg.contactLinkEntry!.addrBookEntryIdData[0] as? GeneralEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "00000000-FE42-AA0A-18C7-1A10E8850B65"), (msg.contactLinkEntry!.addrBookEntryIdData[0] as? GeneralEntryID)!.providerUid)
        XCTAssertEqual([0x1C, 0x24, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xDA, 0x07, 0x29, 0x9D, 0xAF, 0x5C, 0x4A, 0xB2, 0x0C, 0x8B, 0x81, 0xA7, 0x8C, 0x96, 0xC0, 0x07, 0x00, 0xB2, 0xA9, 0x7E, 0x6D, 0x73, 0xAB, 0x95, 0x4D, 0xBB, 0x15, 0x55, 0xC1, 0x54, 0x72, 0xFC, 0xB1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xB2, 0xA9, 0x7E, 0x6D, 0x73, 0xAB, 0x95, 0x4D, 0xBB, 0x15, 0x55, 0xC1, 0x54, 0x72, 0xFC, 0xB1, 0x00, 0x00, 0x00, 0x00, 0x38, 0x02, 0x00, 0x00, 0x61, 0x00, 0x73, 0x32, 0x00, 0x2E], (msg.contactLinkEntry!.addrBookEntryIdData[0] as? GeneralEntryID)!.providerData)
        XCTAssertEqual(.normal, msg.sensitivity!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x48, 0x55, 0x47, 0x48, 0x42, 0x45, 0x4C, 0x4C, 0x41, 0x52, 0x53, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.sentRepresentingSearchKey!))
        XCTAssertEqual("", msg.subjectPrefix!)
        XCTAssertEqual(1033, msg.messageLocaleId!)
        XCTAssertFalse(msg.fInvited!)
        XCTAssertEqual("", msg.eventLocation!)
        XCTAssertEqual("hughbellars@gmail.com\u{00}", msg.displayTo!)
        XCTAssertEqual(.none, msg.appointmentColor!)
        XCTAssertEqual(0x02, msg.appointmentTimeZoneDefinitionRecur!.majorVersion)
        XCTAssertEqual(0x01, msg.appointmentTimeZoneDefinitionRecur!.minorVersion)
        XCTAssertEqual(0x000C, msg.appointmentTimeZoneDefinitionRecur!.cbHeader)
        XCTAssertEqual(0x0002, msg.appointmentTimeZoneDefinitionRecur!.reserved)
        XCTAssertEqual(0x0003, msg.appointmentTimeZoneDefinitionRecur!.cchKeyName)
        XCTAssertEqual("UTC", msg.appointmentTimeZoneDefinitionRecur!.keyName)
        XCTAssertEqual(1, msg.appointmentTimeZoneDefinitionRecur!.cRules)
        XCTAssertEqual(0x02, msg.appointmentTimeZoneDefinitionRecur!.rules[0].majorVersion)
        XCTAssertEqual(0x01, msg.appointmentTimeZoneDefinitionRecur!.rules[0].minorVersion)
        XCTAssertEqual(0x003E, msg.appointmentTimeZoneDefinitionRecur!.rules[0].reserved)
        XCTAssertEqual([.recurCurrentTzReg, .effectiveTzReg], msg.appointmentTimeZoneDefinitionRecur!.rules[0].flags)
        XCTAssertEqual(1601, msg.appointmentTimeZoneDefinitionRecur!.rules[0].wYear)
        XCTAssertEqual([0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], msg.appointmentTimeZoneDefinitionRecur!.rules[0].x)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionRecur!.rules[0].lBias)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionRecur!.rules[0].lStandardBias)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionRecur!.rules[0].lDaylightBias)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionRecur!.rules[0].stStandardDate.wYear)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionRecur!.rules[0].stStandardDate.wMonth)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionRecur!.rules[0].stStandardDate.wDayOfWeek)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionRecur!.rules[0].stStandardDate.wDay)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionRecur!.rules[0].stStandardDate.wHour)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionRecur!.rules[0].stStandardDate.wMinute)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionRecur!.rules[0].stStandardDate.wSecond)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionRecur!.rules[0].stStandardDate.wMilliseconds)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionRecur!.rules[0].stDaylightDate.wYear)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionRecur!.rules[0].stDaylightDate.wMonth)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionRecur!.rules[0].stDaylightDate.wDayOfWeek)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionRecur!.rules[0].stDaylightDate.wDay)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionRecur!.rules[0].stDaylightDate.wHour)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionRecur!.rules[0].stDaylightDate.wMinute)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionRecur!.rules[0].stDaylightDate.wSecond)
        XCTAssertEqual(0, msg.appointmentTimeZoneDefinitionRecur!.rules[0].stDaylightDate.wMilliseconds)
        XCTAssertEqual(.undefined, msg.nativeBody!)
        XCTAssertEqual("IPM.Appointment", msg.messageClass!)
        XCTAssertEqual([], msg.appointmentAuxiliaryFlags)
        XCTAssertEqual(.normal, msg.importance!)
        XCTAssertEqual(0x00000000, (msg.senderEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.senderEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.senderEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.unicode], (msg.senderEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars@gmail.com", (msg.senderEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.senderEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.senderEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual(1, msg.predecessorChangeList!.values.count)
        XCTAssertEqual(UUID(uuidString: "504346B0-3346-4246-AC66-333EA06D2732"), msg.predecessorChangeList!.values[0].namespaceGuid)
        XCTAssertEqual([0x00, 0x00, 0x18, 0x65], msg.predecessorChangeList!.values[0].localId)
        XCTAssertEqual("First Name Middle Name Last Name Suffix's Anniversary", msg.normalizedSubject!)
        XCTAssertFalse(msg.recurring!)
        XCTAssertEqual(.windowsNetmeeting, msg.conferencingType!)
        XCTAssertEqual(1594771200.0, msg.commonEnd!.timeIntervalSince1970)
        XCTAssertEqual(1613001, msg.currentVersion!)
        XCTAssertEqual(0, msg.appointmentProposalNumber!)
        XCTAssertTrue(msg.appointmentSubType!)
        XCTAssertEqual("", msg.onlinePassword!)
        XCTAssertEqual([0x1A, 0xCA, 0x7E, 0x03, 0x0C, 0xCD, 0x8F, 0x47, 0xA1, 0xE0, 0xE8, 0xE7, 0xDB, 0xE7, 0x94, 0xA1], [UInt8]((msg.getProperty(set: .common, name: "InTransitMessageCorrelator") as Data?)!))
        XCTAssertEqual(0, (msg.getProperty(set: .appointment, lid: 0x00008245) as UInt32?)!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x48, 0x55, 0x47, 0x48, 0x42, 0x45, 0x4C, 0x4C, 0x41, 0x52, 0x53, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.senderSearchKey!))
        XCTAssertNil(msg.intendedBusyStatus)
        XCTAssertFalse(msg.recipientReassignmentProhibited!)
        XCTAssertEqual(0, msg.appointmentProposedDuration!)
        XCTAssertEqual(1594684800.0, msg.commonStart!.timeIntervalSince1970)
        XCTAssertNotNil(msg.rtfCompressed)
        XCTAssertTrue((msg.getProperty(set: .appointment, lid: 0x00008200) as Bool?)!)
        XCTAssertEqual(.normal, msg.priority!)
        XCTAssertFalse(msg.appointmentNotAllowPropose!)
        XCTAssertTrue(msg.fExceptionalBody!)
        XCTAssertEqual("", msg.netShowUrl!)
        XCTAssertEqual("First Name Middle Name Last Name Suffix's Anniversary", msg.conversationTopic!)
        XCTAssertEqual(0x01, msg.conversationIndex!.header.reserved)
        XCTAssertEqual(0xD6, msg.conversationIndex!.header.currentFileTime.0)
        XCTAssertEqual(0x63, msg.conversationIndex!.header.currentFileTime.1)
        XCTAssertEqual(0xF4, msg.conversationIndex!.header.currentFileTime.2)
        XCTAssertEqual(0x78, msg.conversationIndex!.header.currentFileTime.3)
        XCTAssertEqual(0x9A, msg.conversationIndex!.header.currentFileTime.4)
        XCTAssertEqual(UUID(uuidString: "5D4AFFBB-7975-412A-A5DD-6F93F9C0FF85"), msg.conversationIndex!.header.guid)
        XCTAssertEqual(0, msg.conversationIndex!.responseLevels.count)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.storeSupportMask)
        XCTAssertEqual("SMTP", (msg.getProperty(id: .tagSenderAddressType) as String?)!)
        XCTAssertEqual("", msg.organizerAlias!)
        XCTAssertEqual(1594771200.0, msg.endDate!.timeIntervalSince1970)
        XCTAssertEqual(1440, msg.appointmentDuration!)
        XCTAssertFalse(msg.readReceiptRequested!)
        XCTAssertFalse(msg.reminderSet!)
        XCTAssertEqual(1594771200.0, msg.appointmentEndWhole!.timeIntervalSince1970)
        XCTAssertEqual([.read], msg.messageFlags)
        XCTAssertEqual("hughbellars@gmail.com", msg.sentRepresentingEmailAddress!)
        XCTAssertEqual("", msg.displayBcc!)
        XCTAssertEqual(1594771200.0, msg.clipEnd!.timeIntervalSince1970)
        XCTAssertEqual(.none, msg.responseStatus!)
        XCTAssertEqual(["First Name Middle Name Last Name Suffix"], msg.contacts!)

        XCTAssertEqual(1, msg.recipients.count)
        XCTAssertEqual(0, (msg.recipients[0].getProperty(id: .tagRecipientResourceState) as UInt32?)!)
        XCTAssertEqual(.none, msg.recipients[0].recipientTrackStatus!)
        XCTAssertEqual(.mailUser, msg.recipients[0].displayType!)
        XCTAssertEqual("hughbellars@gmail.com", msg.recipients[0].recipientDisplayName!)
        XCTAssertEqual(0x00000000, (msg.recipients[0].entryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.recipients[0].entryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.recipients[0].entryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.unicode], (msg.recipients[0].entryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars@gmail.com", (msg.recipients[0].entryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.recipients[0].entryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.recipients[0].entryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual(0x00000000, (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.unicode], (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars@gmail.com", (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual(0, msg.recipients[0].rowid!)
        XCTAssertEqual([.sendable, .organizer], msg.recipients[0].recipientFlags!)
        XCTAssertEqual(.primaryRecipient, msg.recipients[0].recipientType!)
        XCTAssertEqual("SMTP", msg.recipients[0].addressType!)
        XCTAssertEqual(0, msg.recipients[0].recipientOrder!)
        XCTAssertEqual(.mailUser, msg.recipients[0].objectType!)
        XCTAssertEqual("hughbellars@gmail.com", msg.recipients[0].displayName!)
        XCTAssertEqual("hughbellars@gmail.com", msg.recipients[0].emailAddress!)

        XCTAssertEqual(0, msg.attachments.count)
    }

    func testReadMine7() throws {
        let data = try getData(name: "hughbe/discussion")
        let msg = try MsgFile(data: data)
        
        XCTAssertEqual(20127, msg.internetCodepage!)
        XCTAssertTrue(msg.rtfInSync!)
        XCTAssertFalse(msg.readReceiptRequested!)
        XCTAssertFalse(msg.originatorDeliveryReportRequested!)
        XCTAssertEqual("", msg.displayCc!)
        XCTAssertEqual(1033, msg.messageLocaleId!)
        XCTAssertEqual(1613001, msg.currentVersion!)
        XCTAssertNotNil(msg.rtfCompressed)
        XCTAssertEqual(1595842696.0, msg.messageDeliveryTime!.timeIntervalSince1970)
        XCTAssertEqual("Discussion", msg.subject!)
        XCTAssertEqual(.normal, msg.importance!)
        XCTAssertEqual("SMTP", msg.sentRepresentingAddressType!)
        XCTAssertEqual("Hi\r\n", msg.body!)
        XCTAssertFalse(msg.`private`!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.storeSupportMask)
        XCTAssertEqual([.read], msg.messageFlags)
        XCTAssertFalse(msg.agingDontAgeMe!)
        XCTAssertEqual(.notAssigned, msg.taskMode!)
        XCTAssertEqual("hughbellars@gmail.com", msg.internetAccountName!)
        XCTAssertEqual("SMTP", (msg.getProperty(id: .tagSenderAddressType) as String?)!)
        XCTAssertEqual("", msg.displayBcc!)
        XCTAssertEqual(.undefined, msg.nativeBody!)
        XCTAssertEqual([], msg.sideEffects)
        XCTAssertEqual(1595842696.0, msg.clientSubmitTime!.timeIntervalSince1970)
        XCTAssertTrue(msg.alternateRecipientAllowed!)
        XCTAssertEqual("hughbellars@gmail.com", (msg.getProperty(id: .tagSenderName) as String?)!)
        XCTAssertEqual(1033, (msg.getProperty(set: .common, lid: 0x000085EB) as UInt32?)!)
        XCTAssertEqual(0x01, msg.conversationIndex!.header.reserved)
        XCTAssertEqual(0xD6, msg.conversationIndex!.header.currentFileTime.0)
        XCTAssertEqual(0x63, msg.conversationIndex!.header.currentFileTime.1)
        XCTAssertEqual(0xF9, msg.conversationIndex!.header.currentFileTime.2)
        XCTAssertEqual(0xA1, msg.conversationIndex!.header.currentFileTime.3)
        XCTAssertEqual(0xD3, msg.conversationIndex!.header.currentFileTime.4)
        XCTAssertEqual(UUID(uuidString: "2AA88820-7014-4990-A064-4C9A2E6CC0EF"), msg.conversationIndex!.header.guid)
        XCTAssertEqual(0, msg.conversationIndex!.responseLevels.count)
        XCTAssertEqual("00000002\u{01}hughbellars@gmail.com", msg.internetAccountStamp!)
        XCTAssertEqual(1595842696.0, msg.creationTime!.timeIntervalSince1970)
        XCTAssertEqual("hughbellars@gmail.com", msg.sentRepresentingEmailAddress!)
        XCTAssertEqual(0, msg.reminderDelta!)
        XCTAssertEqual("hughbellars@gmail.com", msg.lastModifierName!)
        XCTAssertEqual("hughbellars@gmail.com", msg.senderEmailAddress!)
        XCTAssertEqual(0x00000001, msg.iconIndex!)
        XCTAssertEqual("Discussion", msg.normalizedSubject!)
        XCTAssertEqual(0x00000000, (msg.senderEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.senderEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.senderEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.unicode], (msg.senderEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars@gmail.com", (msg.senderEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.senderEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.senderEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual("", msg.subjectPrefix!)
        XCTAssertEqual([0x70, 0xDF, 0x21, 0x04, 0x80, 0x82, 0x64, 0x41, 0x9F, 0x91, 0xF9, 0xF3, 0x82, 0xB3, 0x99, 0x0D], [UInt8](msg.searchKey!))
        XCTAssertEqual(1595842696.0, msg.lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x48, 0x55, 0x47, 0x48, 0x42, 0x45, 0x4C, 0x4C, 0x41, 0x52, 0x53, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.sentRepresentingSearchKey!))
        XCTAssertEqual("", msg.displayTo!)
        XCTAssertEqual(.normal, msg.priority!)
        XCTAssertEqual("16.0", msg.currentVersionName!)
        XCTAssertEqual("IPM.Post", msg.messageClass!)
        XCTAssertEqual([.read], msg.access)
        XCTAssertEqual([0x91, 0x7A, 0x69, 0xFA, 0x48, 0x36, 0x29, 0x4B, 0xBA, 0x0A, 0xA9, 0x58, 0xDA, 0x29, 0x09, 0x8B], [UInt8]((msg.getProperty(set: .common, name: "InTransitMessageCorrelator") as Data?)!))
        XCTAssertEqual(.readOnly, msg.accessLevel!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x48, 0x55, 0x47, 0x48, 0x42, 0x45, 0x4C, 0x4C, 0x41, 0x52, 0x53, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.senderSearchKey!))
        XCTAssertEqual(0x00000000, (msg.sentRepresentingEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.sentRepresentingEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.sentRepresentingEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.unicode], (msg.sentRepresentingEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars@gmail.com", (msg.sentRepresentingEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.sentRepresentingEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.sentRepresentingEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual("hughbellars@gmail.com", msg.sentRepresentingName!)
        XCTAssertEqual(.normal, msg.sensitivity!)
        XCTAssertFalse(msg.deleteAfterSubmit!)
        XCTAssertEqual("Discussion", msg.conversationTopic!)

        XCTAssertEqual(0, msg.recipients.count)
        XCTAssertEqual(0, msg.attachments.count)
    }

    func testReadMine8() throws {
        let data = try getData(name: "hughbe/multiple")
        let msg = try MsgFile(data: data)
        
        XCTAssertEqual(0x00000000, (msg.sentRepresentingEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.sentRepresentingEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.sentRepresentingEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.sentRepresentingEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("Igor Velikorossov", (msg.sentRepresentingEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.sentRepresentingEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("Igor.Velikorossov@microsoft.com", (msg.sentRepresentingEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual("Igor.Velikorossov@microsoft.com", msg.sentRepresentingEmailAddress!)
        XCTAssertEqual("SMTP", msg.sentRepresentingAddressType!)
        XCTAssertEqual(1595812235.0, msg.clientSubmitTime!.timeIntervalSince1970)
        XCTAssertEqual(1595842710.0, msg.lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x49, 0x47, 0x4F, 0x52, 0x2E, 0x56, 0x45, 0x4C, 0x49, 0x4B, 0x4F, 0x52, 0x4F, 0x53, 0x53, 0x4F, 0x56, 0x40, 0x4D, 0x49, 0x43, 0x52, 0x4F, 0x53, 0x4F, 0x46, 0x54, 0x2E, 0x43, 0x4F, 0x4D], [UInt8](msg.senderSearchKey!))
        XCTAssertEqual("SMTP", (msg.getProperty(id: .tagSenderAddressType) as String?)!)
        XCTAssertEqual("hughbellars@gmail.com", msg.receivedRepresentingName!)
        XCTAssertEqual("SMTP", msg.receivedRepresentingAddressType!)
        XCTAssertEqual("Igor Velikorossov", msg.sentRepresentingName!)
        XCTAssertNotNil(msg.body)
        XCTAssertEqual(0x00000000, (msg.receivedByEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.receivedByEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.receivedByEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.unicode], (msg.receivedByEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars@gmail.com", (msg.receivedByEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.receivedByEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.receivedByEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertNotNil(msg.rtfCompressed)
        XCTAssertEqual("hughbellars@gmail.com", (msg.getProperty(id: .unknown0x680D) as String?)!)
        XCTAssertEqual(.readOnly, msg.accessLevel!)
        XCTAssertEqual(1, msg.predecessorChangeList!.values.count)
        XCTAssertEqual(UUID(uuidString: "75EB2FE9-5096-8644-83B8-7DE522AA4948"), msg.predecessorChangeList!.values[0].namespaceGuid)
        XCTAssertEqual([0x00], msg.predecessorChangeList!.values[0].localId)
        XCTAssertEqual("hughbellars@gmail.com", msg.receivedByEmailAddress!)
        XCTAssertEqual("00000002\u{01}hughbellars", (msg.getProperty(id: .unknown0x680E) as String?)!)
        XCTAssertEqual(0x00000000, (msg.receivedRepresentingEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.receivedRepresentingEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.receivedRepresentingEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.unicode], (msg.receivedRepresentingEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars@gmail.com", (msg.receivedRepresentingEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.receivedRepresentingEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.receivedRepresentingEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual(.normal, msg.importance!)
        XCTAssertEqual("An invitation to Desktop Community Standup", msg.normalizedSubject!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x49, 0x47, 0x4F, 0x52, 0x2E, 0x56, 0x45, 0x4C, 0x49, 0x4B, 0x4F, 0x52, 0x4F, 0x53, 0x53, 0x4F, 0x56, 0x40, 0x4D, 0x49, 0x43, 0x52, 0x4F, 0x53, 0x4F, 0x46, 0x54, 0x2E, 0x43, 0x4F, 0x4D], [UInt8](msg.sentRepresentingSearchKey!))
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x48, 0x55, 0x47, 0x48, 0x42, 0x45, 0x4C, 0x4C, 0x41, 0x52, 0x53, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.receivedRepresentingSearchKey!))
        XCTAssertTrue(msg.rtfInSync!)
        XCTAssertEqual("An invitation to Desktop Community Standup", msg.subject!)
        XCTAssertNotNil(msg.transportMessageHeaders)
        XCTAssertEqual(UUID(uuidString: "75EB2FE9-5096-8644-83B8-7DE522AA4948"), msg.changeKey!.namespaceGuid)
        XCTAssertEqual([0x00], msg.changeKey!.localId)
        XCTAssertEqual([.read], msg.access)
        XCTAssertEqual("hughbellars\u{00}", msg.displayTo!)
        XCTAssertEqual(0x00000000, (msg.senderEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.senderEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.senderEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.senderEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("Igor Velikorossov", (msg.senderEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.senderEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("Igor.Velikorossov@microsoft.com", (msg.senderEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual("hughbellars@gmail.com", msg.receivedByName!)
        XCTAssertEqual("IPM.Note", msg.messageClass!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x48, 0x55, 0x47, 0x48, 0x42, 0x45, 0x4C, 0x4C, 0x41, 0x52, 0x53, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.receivedBySearchKey!))
        XCTAssertEqual(1595842710.0, msg.creationTime!.timeIntervalSince1970)
        XCTAssertEqual(1595812239.0, msg.messageDeliveryTime!.timeIntervalSince1970)
        XCTAssertEqual("", msg.subjectPrefix!)
        XCTAssertEqual("", msg.displayBcc!)
        XCTAssertEqual("Igor Velikorossov", (msg.getProperty(id: .tagSenderName) as String?)!)
        XCTAssertEqual("Olia Gavrysh\u{00}", msg.displayCc!)
        XCTAssertEqual(65001, msg.internetCodepage!)
        XCTAssertEqual([.read, MessageFlags(rawValue: 0x00030000)], msg.messageFlags)
        XCTAssertEqual(.undefined, msg.nativeBody!)
        XCTAssertEqual("hughbellars@gmail.com", msg.receivedRepresentingEmailAddress!)
        XCTAssertEqual(0x01, msg.conversationIndex!.header.reserved)
        XCTAssertEqual(0x02, msg.conversationIndex!.header.currentFileTime.0)
        XCTAssertEqual(0xD0, msg.conversationIndex!.header.currentFileTime.1)
        XCTAssertEqual(0x17, msg.conversationIndex!.header.currentFileTime.2)
        XCTAssertEqual(0x50, msg.conversationIndex!.header.currentFileTime.3)
        XCTAssertEqual(0xA2, msg.conversationIndex!.header.currentFileTime.4)
        XCTAssertEqual(UUID(uuidString: "9259737E-219E-AC97-AAC0-B096DCFA75FA"), msg.conversationIndex!.header.guid)
        XCTAssertEqual(0, msg.conversationIndex!.responseLevels.count)
        XCTAssertEqual([0x88, 0x9E, 0x00, 0x00], [UInt8](msg.searchKey!))
        XCTAssertEqual([0xE0, 0x8A, 0x7F, 0xD1, 0xE4, 0x62, 0x97, 0x49, 0x92, 0xD3, 0x9F, 0x49, 0xF5, 0x45, 0xF5, 0x20], [UInt8]((msg.getProperty(set: .common, name: "InTransitMessageCorrelator") as Data?)!))
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.storeSupportMask)
        XCTAssertEqual("hughbellars@gmail.com", msg.lastModifierName!)
        XCTAssertEqual("An invitation to Desktop Community Standup", msg.conversationTopic!)
        XCTAssertEqual("<SG2P153MB02292F0083834E5391CACAE2EA720@SG2P153MB0229.APCP153.PROD.OUTLOOK.COM>", (msg.getProperty(id: .tagInternetMessageId) as String?)!)
        XCTAssertTrue(msg.conversationIndexTracking!)
        XCTAssertEqual("00000002\u{01}hughbellars", msg.internetAccountStamp!)
        XCTAssertEqual("multipart/alternative; boundary=\"_000_SG2P153MB02292F0083834E5391CACAE2EA720SG2P153MB0229APCP_\"; charset=\"utf-8\"", (msg.getProperty(set: .internetHeaders, name: "content-type") as String?)!)
        XCTAssertEqual("Igor.Velikorossov@microsoft.com", msg.senderEmailAddress!)
        XCTAssertEqual(1, (msg.getProperty(set: .common, lid: 0x000085D7) as UInt32?)!)
        XCTAssertEqual("SMTP", msg.receivedByAddressType!)
        XCTAssertEqual(1033, msg.messageLocaleId!)
        XCTAssertEqual("hughbellars@gmail.com", msg.internetAccountName!)

        XCTAssertEqual(2, msg.recipients.count)
        XCTAssertEqual("hughbellars", msg.recipients[0].displayName!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x48, 0x55, 0x47, 0x48, 0x42, 0x45, 0x4C, 0x4C, 0x41, 0x52, 0x53, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D], [UInt8](msg.recipients[0].searchKey!))
        XCTAssertEqual("hughbellars@gmail.com", msg.recipients[0].emailAddress!)
        XCTAssertEqual([0x00, 0x00, 0xA2, 0xF0], [UInt8](msg.recipients[0].instanceKey!))
        XCTAssertEqual(.primaryRecipient, msg.recipients[0].recipientType!)
        XCTAssertEqual("SMTP", msg.recipients[0].addressType!)
        XCTAssertEqual(0x00000000, (msg.recipients[0].entryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.recipients[0].entryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.recipients[0].entryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.recipients[0].entryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars", (msg.recipients[0].entryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.recipients[0].entryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.recipients[0].entryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual(0, msg.recipients[0].rowid!)

        XCTAssertEqual(.ccRecipient, msg.recipients[1].recipientType!)
        XCTAssertEqual(0x00000000, (msg.recipients[1].entryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.recipients[1].entryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.recipients[1].entryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.recipients[1].entryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("Olia Gavrysh", (msg.recipients[1].entryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.recipients[1].entryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("Olia.Gavrysh@microsoft.com", (msg.recipients[1].entryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual([0x00, 0x00, 0xA2, 0xF3], [UInt8](msg.recipients[1].instanceKey!))
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x4F, 0x4C, 0x49, 0x41, 0x2E, 0x47, 0x41, 0x56, 0x52, 0x59, 0x53, 0x48, 0x40, 0x4D, 0x49, 0x43, 0x52, 0x4F, 0x53, 0x4F, 0x46, 0x54, 0x2E, 0x43, 0x4F, 0x4D], [UInt8](msg.recipients[1].searchKey!))
        XCTAssertEqual(1, msg.recipients[1].rowid!)
        XCTAssertEqual("Olia Gavrysh", msg.recipients[1].displayName!)
        XCTAssertEqual("SMTP", msg.recipients[1].addressType!)
        XCTAssertEqual("Olia.Gavrysh@microsoft.com", msg.recipients[1].emailAddress!)

        XCTAssertEqual(0, msg.attachments.count)
    }

    func testReadMine9() throws {
        let data = try getData(name: "hughbe/task")
        let msg = try MsgFile(data: data)
        
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x48, 0x55, 0x47, 0x48, 0x42, 0x45, 0x4C, 0x4C, 0x41, 0x52, 0x53, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.sentRepresentingSearchKey!))
        XCTAssertEqual(1613001, msg.currentVersion!)
        XCTAssertEqual(.notAssigned, msg.taskAcceptanceState!)
        XCTAssertEqual("hughbellars@gmail.com", (msg.getProperty(id: .tagSenderName) as String?)!)
        XCTAssertFalse(msg.readReceiptRequested!)
        XCTAssertEqual("IPM.Task", msg.messageClass!)
        XCTAssertEqual("bellamy.hughd@gmail.com\u{00}", msg.displayTo!)
        XCTAssertEqual("Task", msg.subject!)
        XCTAssertFalse(msg.deleteAfterSubmit!)
        XCTAssertFalse(msg.taskFRecurring!)
        XCTAssertTrue(msg.recipientReassignmentProhibited!)
        XCTAssertEqual(0x00000500, msg.iconIndex!)
        XCTAssertEqual(1595843021.0, msg.toDoOrdinalDate!.timeIntervalSince1970)
        XCTAssertEqual(UUID(uuidString: "504346B0-3346-4246-AC66-333EA06D2732"), msg.changeKey!.namespaceGuid)
        XCTAssertEqual([0x00, 0x00, 0x18, 0x6D], msg.changeKey!.localId)
        XCTAssertFalse(msg.teamTask!)
        XCTAssertEqual(4294966296, msg.taskOrdinal!)
        XCTAssertEqual(0, msg.taskCustomFlags!)
        XCTAssertEqual("Milleage", (msg.getProperty(set: .common, lid: 0x00008534) as String?)!)
        XCTAssertEqual(60, msg.taskEstimatedEffort!)
        XCTAssertEqual("Notes\r\n", msg.body!)
        XCTAssertEqual("SMTP", (msg.getProperty(id: .tagSenderAddressType) as String?)!)
        XCTAssertEqual(1595843021.0, msg.messageDeliveryTime!.timeIntervalSince1970)
        XCTAssertEqual(0, msg.reminderDelta!)
        XCTAssertEqual(1594166400.0, msg.taskDueDate!.timeIntervalSince1970)
        XCTAssertEqual("SMTP", msg.sentRepresentingAddressType!)
        XCTAssertEqual(1595843033.0, msg.lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual(1, msg.predecessorChangeList!.values.count)
        XCTAssertEqual(UUID(uuidString: "504346B0-3346-4246-AC66-333EA06D2732"), msg.predecessorChangeList!.values[0].namespaceGuid)
        XCTAssertEqual([0x00, 0x00, 0x18, 0x6D], msg.predecessorChangeList!.values[0].localId)
        XCTAssertEqual(120, msg.taskActualEffort!)
        XCTAssertEqual(0x00000000, (msg.sentRepresentingEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.sentRepresentingEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.sentRepresentingEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.unicode], (msg.sentRepresentingEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars@gmail.com", (msg.sentRepresentingEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.sentRepresentingEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.sentRepresentingEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual([0x08, 0x6B, 0x82, 0x61, 0x68, 0x71, 0x96, 0x46, 0x9F, 0x09, 0x96, 0xE0, 0x81, 0xEE, 0x35, 0x5E], [UInt8](msg.searchKey!))
        XCTAssertEqual(.complete, msg.taskStatus!)
        XCTAssertEqual(1595843021.0, msg.validFlagStringProof!.timeIntervalSince1970)
        XCTAssertEqual("16.0", msg.currentVersionName!)
        XCTAssertEqual("", msg.taskAssigner!)
        XCTAssertFalse(msg.taskFFixOffline!)
        XCTAssertEqual([.read], msg.messageFlags)
        XCTAssertEqual(1595843033.0, msg.creationTime!.timeIntervalSince1970)
        XCTAssertEqual(.notAssigned, msg.taskOwnership!)
        XCTAssertEqual(1594166400.0, msg.taskDateCompleted!.timeIntervalSince1970)
        XCTAssertEqual("hughbellars@gmail.com", msg.taskOwner!)
        XCTAssertEqual(1595836800.0, msg.reminderSignalTime!.timeIntervalSince1970)
        XCTAssertEqual(.`private`, msg.sensitivity!)
        XCTAssertEqual(1033, (msg.getProperty(set: .common, lid: 0x000085EB) as UInt32?)!)
        XCTAssertEqual("hughbellars@gmail.com", msg.internetAccountName!)
        XCTAssertEqual(.normal, msg.priority!)
        XCTAssertEqual(28591, msg.internetCodepage!)
        XCTAssertEqual("hughbellars@gmail.com", msg.sentRepresentingEmailAddress!)
        XCTAssertTrue(msg.taskComplete!)
        XCTAssertTrue(msg.taskStatusOnComplete!)
        XCTAssertEqual([.read], msg.access)
        XCTAssertEqual(["COmpany"], msg.companies!)
        XCTAssertEqual([0x61, 0xAB, 0xE9, 0xDB, 0xBA, 0xD9, 0xAF, 0x49, 0xA4, 0x10, 0x1A, 0x33, 0x1E, 0x3F, 0x2C, 0xD8], [UInt8]((msg.getProperty(set: .common, name: "InTransitMessageCorrelator") as Data?)!))
        XCTAssertFalse(msg.agingDontAgeMe!)
        XCTAssertEqual(1594166400.0, msg.taskStartDate!.timeIntervalSince1970)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.storeSupportMask)
        XCTAssertEqual("Task", msg.conversationTopic!)
        XCTAssertFalse(msg.originatorDeliveryReportRequested!)
        XCTAssertEqual("5555555", msg.toDoSubOrdinal!)
        XCTAssertEqual(0x01, msg.conversationIndex!.header.reserved)
        XCTAssertEqual(0xD6, msg.conversationIndex!.header.currentFileTime.0)
        XCTAssertEqual(0x63, msg.conversationIndex!.header.currentFileTime.1)
        XCTAssertEqual(0xFA, msg.conversationIndex!.header.currentFileTime.2)
        XCTAssertEqual(0x44, msg.conversationIndex!.header.currentFileTime.3)
        XCTAssertEqual(0xF5, msg.conversationIndex!.header.currentFileTime.4)
        XCTAssertEqual(UUID(uuidString: "DD903BC8-CEEC-4E5A-8834-D53C835F6961"), msg.conversationIndex!.header.guid)
        XCTAssertEqual(0, msg.conversationIndex!.responseLevels.count)
        XCTAssertEqual(1594166400.0, msg.commonStart!.timeIntervalSince1970)
        XCTAssertTrue(msg.`private`!)
        XCTAssertFalse(msg.alternateRecipientAllowed!)
        XCTAssertEqual(.undefined, msg.nativeBody!)
        XCTAssertEqual([.coerceToInbox, .openForContextMenu], msg.sideEffects)
        XCTAssertEqual(1.0, msg.percentComplete!)
        XCTAssertEqual(2, msg.taskVersion!)
        XCTAssertEqual("Task", msg.normalizedSubject!)
        XCTAssertNotNil(msg.rtfCompressed)
        XCTAssertEqual(.readOnly, msg.accessLevel!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x48, 0x55, 0x47, 0x48, 0x42, 0x45, 0x4C, 0x4C, 0x41, 0x52, 0x53, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.senderSearchKey!))
        XCTAssertTrue(msg.taskUpdates!)
        XCTAssertEqual("00000002\u{01}hughbellars@gmail.com", msg.internetAccountStamp!)
        XCTAssertEqual(1033, msg.messageLocaleId!)
        XCTAssertEqual("hughbellars@gmail.com", msg.lastModifierName!)
        XCTAssertEqual(1595843021.0, msg.clientSubmitTime!.timeIntervalSince1970)
        XCTAssertEqual("hughbellars@gmail.com", msg.sentRepresentingName!)
        XCTAssertEqual("", msg.displayCc!)
        XCTAssertEqual("", msg.displayBcc!)
        XCTAssertTrue(msg.rtfInSync!)
        XCTAssertEqual(.embeddedInTaskRequest, msg.taskMode!)
        XCTAssertEqual("Billing", msg.billing!)
        XCTAssertEqual("", msg.taskRole!)
        XCTAssertEqual(1594166400.0, msg.commonEnd!.timeIntervalSince1970)
        XCTAssertEqual("", msg.subjectPrefix!)
        XCTAssertEqual(1595836800.0, msg.reminderTime!.timeIntervalSince1970)
        XCTAssertEqual(.normal, msg.importance!)
        XCTAssertEqual(.notAssigned, msg.taskState!)
        XCTAssertFalse(msg.taskNoCompute!)
        XCTAssertEqual(0x00000000, (msg.senderEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.senderEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.senderEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.unicode], (msg.senderEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars@gmail.com", (msg.senderEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.senderEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.senderEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual("hughbellars@gmail.com", msg.senderEmailAddress!)

        XCTAssertEqual(1, msg.recipients.count)
        XCTAssertEqual(.mailUser, msg.recipients[0].objectType!)
        XCTAssertEqual(.primaryRecipient, msg.recipients[0].recipientType!)
        XCTAssertEqual(.sendable, msg.recipients[0].recipientFlags!)
        XCTAssertFalse(msg.recipients[0].sendRichInfo!)
        XCTAssertEqual([0x00, 0x00, 0xA7, 0x66], [UInt8](msg.recipients[0].instanceKey!))
        XCTAssertEqual(0, (msg.recipients[0].getProperty(id: .tagRecipientResourceState) as UInt32?)!)
        XCTAssertEqual(0, msg.recipients[0].rowid!)
        XCTAssertEqual(0, msg.recipients[0].recipientOrder!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x42, 0x45, 0x4C, 0x4C, 0x41, 0x4D, 0x59, 0x2E, 0x48, 0x55, 0x47, 0x48, 0x44, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.recipients[0].searchKey!))
        XCTAssertEqual("bellamy.hughd@gmail.com", msg.recipients[0].recipientDisplayName!)
        XCTAssertEqual(0x00000000, (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("bellamy.hughd@gmail.com", (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("bellamy.hughd@gmail.com", (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual(0x00000000, (msg.recipients[0].entryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.recipients[0].entryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.recipients[0].entryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.recipients[0].entryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("bellamy.hughd@gmail.com", (msg.recipients[0].entryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.recipients[0].entryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("bellamy.hughd@gmail.com", (msg.recipients[0].entryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual("bellamy.hughd@gmail.com", (msg.recipients[0].getProperty(id: .dotstuffState) as String?)!)
        XCTAssertEqual("SMTP", msg.recipients[0].addressType!)
        XCTAssertEqual([0x00, 0x00, 0x00, 0x00, 0x81, 0x2B, 0x1F, 0xA4, 0xBE, 0xA3, 0x10, 0x19, 0x9D, 0x6E, 0x00, 0xDD, 0x01, 0x0F, 0x54, 0x02, 0x00, 0x00, 0x01, 0x90, 0x62, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x79, 0x00, 0x2E, 0x00, 0x68, 0x00, 0x75, 0x00, 0x67, 0x00, 0x68, 0x00, 0x64, 0x00, 0x40, 0x00, 0x67, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x2E, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x00, 0x00, 0x53, 0x00, 0x4D, 0x00, 0x54, 0x00, 0x50, 0x00, 0x00, 0x00, 0x62, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x79, 0x00, 0x2E, 0x00, 0x68, 0x00, 0x75, 0x00, 0x67, 0x00, 0x68, 0x00, 0x64, 0x00, 0x40, 0x00, 0x67, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x2E, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x00, 0x00], [UInt8](msg.recipients[0].recordKey!))
        XCTAssertEqual("bellamy.hughd@gmail.com", msg.recipients[0].displayName!)
        XCTAssertEqual(0, msg.recipients[0].sendInternetEncoding!)
        XCTAssertEqual("bellamy.hughd@gmail.com", msg.recipients[0].emailAddress!)
        XCTAssertEqual(.none, msg.recipients[0].recipientTrackStatus!)
        XCTAssertEqual(.mailUser, msg.recipients[0].displayType!)

        XCTAssertEqual(0, msg.attachments.count)
    }

    func testReadMine10() throws {
        let data = try getData(name: "hughbe/SimpleMessage")
        let msg = try MsgFile(data: data)

        XCTAssertEqual("Subject", msg.conversationTopic!)
        XCTAssertEqual(2, msg.predecessorChangeList!.values.count)
        XCTAssertEqual(UUID(uuidString: "504346B0-3346-4246-AC66-333EA06D2732"), msg.predecessorChangeList!.values[0].namespaceGuid)
        XCTAssertEqual([0x00, 0x00, 0x90, 0x5F], msg.predecessorChangeList!.values[0].localId)
        XCTAssertEqual(UUID(uuidString: "75EB2FE9-5096-8644-83B8-7DE522AA4948"), msg.predecessorChangeList!.values[1].namespaceGuid)
        XCTAssertEqual([0x00], msg.predecessorChangeList!.values[1].localId)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x48, 0x55, 0x47, 0x48, 0x42, 0x45, 0x4C, 0x4C, 0x41, 0x52, 0x53, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D], [UInt8](msg.senderSearchKey!))
        XCTAssertEqual(1033, msg.messageLocaleId!)
        XCTAssertEqual("<004601d67700$69213e60$3b63bb20$@gmail.com>", (msg.getProperty(id: .tagInternetMessageId) as String?)!)
        XCTAssertEqual("SMTP", msg.sentRepresentingAddressType!)
        XCTAssertEqual([0x42, 0x6F, 0x64, 0x79, 0x0D, 0x0A, 0x0D, 0x0A], [UInt8]((msg.getProperty(guid: UUID(uuidString: "4E3A7680-B77A-11D0-9DA5-00C04FD65685")!, name: "Internet Charset Body") as Data?)!))
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x48, 0x55, 0x47, 0x48, 0x42, 0x45, 0x4C, 0x4C, 0x41, 0x52, 0x53, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.receivedRepresentingSearchKey!))
        XCTAssertEqual("", msg.subjectPrefix!)
        XCTAssertEqual(.normal, msg.importance!)
        XCTAssertEqual("00000002\u{01}hughbellars", msg.internetAccountStamp!)
        XCTAssertEqual(0x00000000, (msg.senderEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.senderEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.senderEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.senderEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars@gmail.com", (msg.senderEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.senderEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.senderEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertNotNil(msg.rtfCompressed)
        XCTAssertEqual("IPM.Note", msg.messageClass!)
        XCTAssertEqual("hughbellars@gmail.com", (msg.getProperty(id: .unknown0x680D) as String?)!)
        XCTAssertEqual("hughbellars@gmail.com", msg.receivedRepresentingName!)
        XCTAssertEqual("hughbellars@gmail.com", msg.lastModifierName!)
        XCTAssertEqual(.undefined, msg.nativeBody!)
        XCTAssertEqual("hughbellars@gmail.com", msg.sentRepresentingEmailAddress!)
        XCTAssertEqual("hughbellars@gmail.com", msg.senderEmailAddress!)
        XCTAssertEqual("Subject", msg.normalizedSubject!)
        XCTAssertEqual("SMTP", (msg.getProperty(id: .tagSenderAddressType) as String?)!)
        XCTAssertEqual(1597934669.0, msg.clientSubmitTime!.timeIntervalSince1970)
        XCTAssertEqual("hughbellars@gmail.com", msg.internetAccountName!)
        XCTAssertEqual("hughbellars@gmail.com\u{00}", msg.displayTo!)
        XCTAssertEqual("hughbellars@gmail.com", msg.sentRepresentingName!)
        XCTAssertNotNil(msg.transportMessageHeaders)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.storeSupportMask)
        XCTAssertTrue(msg.rtfInSync!)
        XCTAssertEqual("", msg.displayCc!)
        XCTAssertEqual(0, (msg.getProperty(id: .unknown0x1092) as UInt32?)!)
        XCTAssertEqual([0xBB, 0xF6, 0x0B, 0xDE, 0x2D, 0xD4, 0xC4, 0x4C, 0xA5, 0x23, 0xD6, 0xBF, 0xC8, 0x5A, 0x16, 0xA7], [UInt8]((msg.getProperty(set: .common, name: "InTransitMessageCorrelator") as Data?)!))
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x48, 0x55, 0x47, 0x48, 0x42, 0x45, 0x4C, 0x4C, 0x41, 0x52, 0x53, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D], [UInt8](msg.sentRepresentingSearchKey!))
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x48, 0x55, 0x47, 0x48, 0x42, 0x45, 0x4C, 0x4C, 0x41, 0x52, 0x53, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.receivedBySearchKey!))
        XCTAssertEqual([.read, MessageFlags(rawValue: 0x00030000)], msg.messageFlags)
        XCTAssertEqual("", msg.displayBcc!)
        XCTAssertEqual("text/plain; charset=\"us-ascii\"", (msg.getProperty(set: .internetHeaders, name: "content-type") as String?)!)
        XCTAssertEqual(0x01, msg.conversationIndex!.header.reserved)
        XCTAssertEqual(0x01, msg.conversationIndex!.header.currentFileTime.0)
        XCTAssertEqual(0xDF, msg.conversationIndex!.header.currentFileTime.1)
        XCTAssertEqual(0x60, msg.conversationIndex!.header.currentFileTime.2)
        XCTAssertEqual(0xF8, msg.conversationIndex!.header.currentFileTime.3)
        XCTAssertEqual(0xE3, msg.conversationIndex!.header.currentFileTime.4)
        XCTAssertEqual(UUID(uuidString: "6D8CD5F8-E3D8-9537-4FD6-3D9DC4685E3F"), msg.conversationIndex!.header.guid)
        XCTAssertEqual(0, msg.conversationIndex!.responseLevels.count)
        XCTAssertEqual("Body\r\n\r\n", msg.body!)
        XCTAssertEqual(.readOnly, msg.accessLevel!)
        XCTAssertEqual(0x00000000, (msg.receivedByEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.receivedByEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.receivedByEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.unicode], (msg.receivedByEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars@gmail.com", (msg.receivedByEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.receivedByEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.receivedByEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual(1597934698.0, msg.lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual("00000002\u{01}hughbellars", (msg.getProperty(id: .unknown0x680E) as String?)!)
        XCTAssertEqual(1597934698.0, msg.creationTime!.timeIntervalSince1970)
        XCTAssertEqual(20127, msg.internetCodepage!)
        XCTAssertEqual(UUID(uuidString: "504346B0-3346-4246-AC66-333EA06D2732"), msg.changeKey!.namespaceGuid)
        XCTAssertEqual([0x00, 0x00, 0x90, 0x5F], msg.changeKey!.localId)
        XCTAssertEqual(1597934670.0, msg.messageDeliveryTime!.timeIntervalSince1970)
        XCTAssertEqual("7bit", (msg.getProperty(set: .internetHeaders, name: "content-transfer-encoding") as String?)!)
        XCTAssertEqual("hughbellars@gmail.com", msg.receivedByName!)
        XCTAssertEqual([.read], msg.access)
        XCTAssertEqual(0x00000000, (msg.sentRepresentingEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.sentRepresentingEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.sentRepresentingEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.sentRepresentingEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars@gmail.com", (msg.sentRepresentingEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.sentRepresentingEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.sentRepresentingEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual([0x76, 0x9F, 0x00, 0x00], [UInt8](msg.searchKey!))
        XCTAssertTrue(msg.conversationIndexTracking!)
        XCTAssertEqual("hughbellars@gmail.com", (msg.getProperty(id: .tagSenderName) as String?)!)
        XCTAssertEqual("hughbellars@gmail.com", msg.receivedByEmailAddress!)
        XCTAssertEqual("SMTP", msg.receivedByAddressType!)
        XCTAssertEqual("Subject", msg.subject!)
        XCTAssertEqual("SMTP", msg.receivedRepresentingAddressType!)
        XCTAssertEqual(0x00000000, (msg.receivedRepresentingEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.receivedRepresentingEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.receivedRepresentingEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.unicode], (msg.receivedRepresentingEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars@gmail.com", (msg.receivedRepresentingEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.receivedRepresentingEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.receivedRepresentingEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual(1, (msg.getProperty(set: .common, lid: 0x000085D7) as UInt32?)!)
        XCTAssertEqual("hughbellars@gmail.com", msg.receivedRepresentingEmailAddress!)

        XCTAssertEqual(1, msg.recipients.count)
        XCTAssertEqual("hughbellars@gmail.com", msg.recipients[0].displayName!)
        XCTAssertEqual("SMTP", msg.recipients[0].addressType!)
        XCTAssertEqual([0x00, 0x01, 0x74, 0x1A], [UInt8](msg.recipients[0].instanceKey!))
        XCTAssertEqual(0, msg.recipients[0].rowid!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x48, 0x55, 0x47, 0x48, 0x42, 0x45, 0x4C, 0x4C, 0x41, 0x52, 0x53, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D], [UInt8](msg.recipients[0].searchKey!))
        XCTAssertEqual(.primaryRecipient, msg.recipients[0].recipientType!)
        XCTAssertEqual(0x00000000, (msg.recipients[0].entryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.recipients[0].entryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.recipients[0].entryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.recipients[0].entryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars@gmail.com", (msg.recipients[0].entryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.recipients[0].entryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.recipients[0].entryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual("hughbellars@gmail.com", msg.recipients[0].emailAddress!)

        XCTAssertEqual(0, msg.attachments.count)
    }

    func testReadMine11() throws {
        let data = try getData(name: "hughbe/Sample")
        let msg = try MsgFile(data: data)

        XCTAssertEqual("Hugh Bellamy", msg.lastModifierName!)
        XCTAssertEqual("hughbellars@gmail.com", msg.sentRepresentingSmtpAddress!)
        XCTAssertEqual("hughbellars@gmail.com", (msg.getProperty(id: .tagSentRepresentingSimpleDisplayName) as String?)!)
        XCTAssertEqual(UUID(uuidString: "F711B14A-92C8-4094-9843-750BE6086BC4"), msg.changeKey!.namespaceGuid)
        XCTAssertEqual([0x00, 0x00, 0x12, 0x35, 0xCB, 0xA5], msg.changeKey!.localId)
        XCTAssertEqual("Fusce condimentum bibendum sollicitudin. Vestibulum pretium ipsum at sapien pharetra, ac tincidunt sem dictum. Integer a vehicula enim. Phasellus eget suscipit eros. Nulla et fringilla urna. Curabitur ac purus felis. Duis vel nisi risus. Nulla facilisi. Aliquam luctus laoreet luctus. Cras commodo diam a mi ornare, eu convallis enim auctor. Nulla mattis turpis id arcu vulputate, a commodo tellus tempor.\r\n\r\n \r\n\r\nFrom: Hugh Bellamy <pstreadertests@outlook.com> \r\nSent: Thursday, October 15, 2020 1:09 PM\r\nTo: hughbellars@gmail.com\r\nCc: bellamy.hughd@gmail.com\r\nSubject: Subject\r\nSensitivity: Personal\r\n\r\n \r\n\r\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum sed commodo metus. Phasellus varius dolor ex, eget volutpat tellus hendrerit hendrerit. Quisque hendrerit pharetra nunc, at rhoncus eros condimentum nec. Nulla finibus, quam a mollis maximus, nisl nisi fringilla purus, sit amet molestie sapien velit sed diam. Integer vulputate nibh ante, id malesuada dolor posuere quis. Aliquam erat volutpat. Quisque metus odio, posuere in ultricies quis, fringilla in enim. Nulla a iaculis metus, non iaculis dolor.\r\n\r\n \r\n\r\nCurabitur interdum lectus et enim venenatis, posuere vulputate lectus malesuada. Nam dictum, felis ac sodales accumsan, urna ex hendrerit dolor, ac varius tortor lorem at mi. Phasellus eleifend eros vel molestie hendrerit. Sed sit amet lobortis metus. Vivamus est elit, cursus eu feugiat in, sagittis eu felis. Maecenas ultricies convallis fermentum. Aliquam condimentum libero eget dolor finibus ornare. Quisque diam magna, dapibus sed tempor nec, egestas sed odio. Phasellus laoreet porttitor ex non euismod.\r\n\r\n \r\n\r\nGenerated 5 paragraphs, 463 words, 3157 bytes of Lorem Ipsum\r\n\r\n", msg.body!)
        XCTAssertEqual(1033, msg.messageLocaleId!)
        XCTAssertTrue(msg.messageRecipientMe!)
        XCTAssertEqual("[\r\n  {\r\n    \"@outputVersion\": \"2.0\",\r\n    \"@formatter\": \"TeeKpeBondCbpBase64\",\r\n    \"@schema\": \"Microsoft.Exchange.Relevance.TeeKpeBondResponse.TeeKpe.TeeKpeResponse\",\r\n    \"keyPhrases\": \"Q0IBAAA=\",\r\n    \"@type\": \"KeyPhraseExtraction\",\r\n    \"@context\": \"http://schema.microsoft.com\",\r\n    \"@EntityId\": \"7baf83e2-4247-4d21-9f90-c07090754752\",\r\n    \"@correlationTrail\": \"AssetId=42c90df8-35d0-4955-8195-dad42cc7da3f;ExtractionId=76a0fd93-7506-4075-b46c-f6d3af69db32;EntityId=7baf83e2-4247-4d21-9f90-c07090754752\",\r\n    \"@extractionTimeUtc\": \"2020-10-15T13:11:01.9803109Z\"\r\n  }\r\n]", (msg.getProperty(set: .common, name: "EntityExtraction/KeyPhraseExtraction2.0") as String?)!)
        XCTAssertNotNil(msg.getProperty(set: .xmlExtractedEntities, name: "GriffinTriageHeuristicsFeatureSet"))
        XCTAssertEqual([0xEF, 0xFE, 0x51, 0xD5, 0xAD, 0xC2, 0x0F, 0x47, 0xA7, 0x28, 0x94, 0x54, 0x24, 0xC8, 0xC8, 0xC7], [UInt8](msg.searchKey!))
        XCTAssertEqual(0, (msg.getProperty(set: .xmlExtractedEntities, name: "OriginalInferenceClassification") as UInt32?)!)
        XCTAssertEqual([0x01, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5A, 0x05, 0x00, 0x00, 0x97, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBE, 0x08, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00], [UInt8]((msg.getProperty(set: .messaging, name: "HeaderBodyFragmentList") as Data?)!))
        XCTAssertFalse(msg.smartNoAttach!)
        XCTAssertTrue(msg.hasAttachments!)
        XCTAssertEqual(7, (msg.getProperty(set: .common, name: "ItemCurrentFolderReason") as UInt16?)!)
        XCTAssertEqual("hughbellars@gmail.com", (msg.getProperty(id: .unknown0x5D0A) as String?)!)
        XCTAssertEqual(20127, msg.internetCodepage!)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x46, 0x49, 0x52, 0x53, 0x54, 0x20, 0x4F, 0x52, 0x47, 0x41, 0x4E, 0x49, 0x5A, 0x41, 0x54, 0x49, 0x4F, 0x4E, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x30, 0x30, 0x30, 0x33, 0x37, 0x46, 0x46, 0x45, 0x33, 0x34, 0x35, 0x33, 0x34, 0x43, 0x33, 0x30, 0x00], [UInt8](msg.receivedRepresentingSearchKey!))
        XCTAssertEqual("Vj0xLjE7dXM9MDtsPTA7YT0xO0Q9MTtHRD0xO1NDTD0tMQ==", (msg.getProperty(set: .common, name: "X-Message-Delivery") as String?)!)
        XCTAssertEqual("BCAT=NotBulkDueToReplyForward;DNRT=Microsoft.Exchange.FocusedInbox.Models.Heuristics.DoNotReplyFeaturizer+DoNotReplyTypes;SCAT=None;RFV=1032232302:-1=1^-1927059262:-1=0^1146315108:-1=0^1810071250:sender-7131b5b4-cae2-4ddf-b21b-b3f9a41e0fb4=0^1352796317:recipient-0b53c51b-5e16-4178-9b6e-5b1f7852d3d4=128^;SV=16.01.3272.001;SN=LNXP123MB3820;MV=5010;CT=10/15/2020 1:11:01 PM;ODF=Inbox;IFIC=<null>;HDTR=0;HDTF=PresetRule", (msg.getProperty(set: .xmlExtractedEntities, name: "InferenceClassificationTrackingEx") as String?)!)
        XCTAssertEqual("[\r\n  {\r\n    \"@outputVersion\": \"1.0\",\r\n    \"@source\": \"im-3\",\r\n    \"@emailRelevanceScore\": \"0.9808256452309\",\r\n    \"IsImportantByIRanker\": \"true\",\r\n    \"@EntityId\": \"0e0cca8b-775f-4610-a7b6-e5d343828fbb\"\r\n  }\r\n]", (msg.getProperty(set: .common, name: "EntityExtraction/IRankerScore1.0") as String?)!)
        XCTAssertEqual("Hugh Bellamy", (msg.getProperty(id: .unknown0x4034) as String?)!)
        XCTAssertTrue((msg.getProperty(set: .xmlExtractedEntities, name: "ConversationWasFocused") as Bool?)!)
        XCTAssertEqual("3D1CB0A4EBF5B14BB892766EB1258534@GBRP123.PROD.OUTLOOK.COM", msg.bodyContentId!)
        XCTAssertNotNil(msg.transportMessageHeaders)
        XCTAssertEqual("pstreadertests@outlook.com", msg.internetAccountName!)
        XCTAssertEqual("hughbellars@gmail.com", (msg.getProperty(id: .tagSenderSimpleDisplayName) as String?)!)
        XCTAssertEqual(1, (msg.getProperty(id: .unknown0x5037) as UInt32?)!)
        XCTAssertEqual("<LNXP123MB3820CD99E45451F765E2D646CB020@LNXP123MB3820.GBRP123.PROD.OUTLOOK.COM>", msg.internetReferences!)
        XCTAssertEqual(0, (msg.getProperty(id: .unknown0x1213) as UInt32?)!)
        XCTAssertEqual("EX", msg.receivedRepresentingAddressType!)
        XCTAssertEqual(1, (msg.getProperty(id: .unknown0x0086) as UInt16?)!)
        XCTAssertEqual(78, (msg.getProperty(id: .unknown0x0E2F) as UInt32?)!)
        XCTAssertTrue((msg.getProperty(set: .common, name: "EntityExtractionSuccess") as Bool?)!)
        XCTAssertEqual("DB5EUR03FT050.eop-EUR03.prod.protection.outlook.com", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-organization-authsource") as String?)!)
        XCTAssertNotNil(msg.rtfCompressed)
        XCTAssertEqual("00000005\u{01}/o=First Organization/ou=Exchange Administrative Group(FYDIBOHF23SPDLT)/cn=Recipients/cn=00037FFE34534C30", msg.internetAccountStamp!)
        XCTAssertEqual(0x00000000, (msg.senderEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.senderEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.senderEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.senderEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars@gmail.com", (msg.senderEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.senderEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.senderEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual("SMTP", msg.sentRepresentingAddressType!)
        XCTAssertFalse((msg.getProperty(set: .messaging, name: "IsQuotedTextChanged") as Bool?)!)
        XCTAssertEqual(0x00000000, (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=FIRST ORGANIZATION/OU=EXCHANGE ADMINISTRATIVE GROUP(FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=00037FFE34534C30\u{00}", (msg.receivedRepresentingEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual([0xEF, 0x00, 0x00, 0x00, 0x82, 0x4D, 0xB9, 0x3C, 0xFA, 0x46, 0x2B, 0x9E], [UInt8]((msg.getProperty(id: .unknown0x3014) as Data?)!))
        XCTAssertEqual("[\"ExtractionId\",\"a940acef-c8c6-428f-a564-b301f8896c9f\",\"TeeEngineVersion\",\"52.0.0\",\"BuildNumber\",\"20201005.21\",\"ChangesetNumber\",\"24747f22ecffc403784e3b2861b7224a18fe19c6\",\"Locale\",\"en-US\",\"MessageId\",\"\\u003c007c01d6a2f4$9c2c09a0$d4841ce0$@gmail.com\\u003e\",\"ReferenceTime\",\"2020-10-15T13:10:59.0000000Z\",\"Flights\",\"TEEReplyWithShipWW;TEEM2HPayloadEnabledFlight;TEEEntityDocumentFlightEnabled;TEE_Tasks_RequestsPeopleAssignmentRedesigned;CheckJunkMailHeadersFlight;TEEImportantContact;TEEInboxPlusFlight;TEEEnableTermFrequency;TEEEnableExperimentalTermFrequency;TEEFirstBodyFlight;TEEFilesProcessor;TEEExtractQuotedTextLanguagesFlight;TEERequestsForESFlightV2;TEESmartReplyForEnEnabled_WW;TEECouponRankerFlight;CommitmentsfpgahaasRealTrafficflight;KtgClassifierSentItemsFlight;TEECommitmentsForESFlight;TEEFollowUpForESFlightV2;QasTestKPEOffBoxB2;QasAcronymExtractorOffBoxB2;RawKPEScoresFlight;TEEAcronymsExtractorCancToken;TEEExtractedOnlineMeetingInfoFlight;TEEFlightReservationOptionalFieldsFlight\",\"StartTime\",\"2020-10-15T13:11:01.1947596Z\",\"EndTime\",\"2020-10-15T13:11:01.1967508Z\"]", (msg.getProperty(set: .common, name: "EntityExtractionServiceDiagnosticContext") as String?)!)
        XCTAssertEqual("Anonymous", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-organization-authas") as String?)!)
        XCTAssertEqual("hughbellars@gmail.com", msg.sentRepresentingEmailAddress!)
        XCTAssertEqual(.normal, msg.importance!)
        XCTAssertEqual("IPM.Note", msg.messageClass!)
        XCTAssertEqual(1, msg.predecessorChangeList!.values.count)
        XCTAssertEqual(UUID(uuidString: "F711B14A-92C8-4094-9843-750BE6086BC4"), msg.predecessorChangeList!.values[0].namespaceGuid)
        XCTAssertEqual([0x00, 0x00, 0x12, 0x35, 0xCB, 0xA5], msg.predecessorChangeList!.values[0].localId)
        XCTAssertEqual(60, (msg.getProperty(set: .xmlExtractedEntities, name: "LatestMessageWordCount") as UInt32?)!)
        XCTAssertEqual("Hugh Bellamy", msg.receivedByName!)
        XCTAssertEqual("Hugh Bellamy", (msg.getProperty(id: .unknown0x4035) as String?)!)
        XCTAssertFalse(msg.nonReceiptNotificationRequested!)
        XCTAssertFalse((msg.getProperty(id: .unknown0x0ECD) as Bool?)!)
        XCTAssertEqual("", msg.displayBcc!)
        XCTAssertEqual("EX", msg.receivedByAddressType!)
        XCTAssertEqual("/O=FIRST ORGANIZATION/OU=EXCHANGE ADMINISTRATIVE GROUP(FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=00037FFE34534C30", msg.receivedRepresentingEmailAddress!)
        XCTAssertEqual("[\r\n  {\r\n    \"@type\": \"ExtractQuotedTextLanguages\",\r\n    \"@context\": \"http://schema.microsoft.com\",\r\n    \"@source\": \"TEE\",\r\n    \"@outputVersion\": \"1.0\",\r\n    \"Languages\": \"[\\\"en\\\"]\",\r\n    \"@EntityId\": \"627d7946-1152-42bf-99d1-93b55a904719\",\r\n    \"@correlationTrail\": \"AssetId=42c90df8-35d0-4955-8195-dad42cc7da3f;ExtractionId=76a0fd93-7506-4075-b46c-f6d3af69db32;EntityId=627d7946-1152-42bf-99d1-93b55a904719\",\r\n    \"@extractionTimeUtc\": \"2020-10-15T13:11:01.9803109Z\"\r\n  }\r\n]", msg.addressBookObjectDistinguishedName!)
        XCTAssertEqual("Email", msg.addressBookExtensionAttribute3!)
        XCTAssertEqual([0xFE, 0x7F, 0x03, 0x00, 0x53, 0x34, 0x30, 0x4C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [UInt8]((msg.getProperty(id: .unknown0x0E4C) as Data?)!))
        XCTAssertTrue((msg.getProperty(id: .unknown0x36FA) as Bool?)!)
        XCTAssertFalse((msg.getProperty(set: .messaging, name: "IsSigned") as Bool?)!)
        XCTAssertEqual("hughbellars@gmail.com", (msg.getProperty(id: .tagCreatorSimpleDisplayName) as String?)!)
        XCTAssertEqual("Hugh Bellamy", (msg.getProperty(id: .tagLastModifierSimpleDisplayName) as String?)!)
        XCTAssertEqual("SMTP", (msg.getProperty(id: .tagSenderAddressType) as String?)!)
        XCTAssertEqual("RE: ", msg.subjectPrefix!)
        XCTAssertEqual([0x86, 0x7C, 0x1E, 0x16, 0x5E, 0x5C, 0x1F, 0x43, 0x8F, 0x84, 0x4A, 0xC0, 0x9E, 0xA4, 0x37, 0x42], [UInt8]((msg.getProperty(set: .common, name: "InTransitMessageCorrelator") as Data?)!))
        XCTAssertEqual(1, (msg.getProperty(set: .xmlExtractedEntities, name: "ConversationContributions") as UInt32?)!)
        XCTAssertTrue(msg.messageToMe!)
        XCTAssertEqual("Hugh Bellamy", msg.receivedRepresentingName!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.storeSupportMask)
        XCTAssertEqual(79, (msg.getProperty(id: .tagInternetArticleNumber) as UInt32?)!)
        XCTAssertEqual(1602767459.0, (msg.getProperty(id: .unknown0x0F0A) as Date?)!.timeIntervalSince1970)
        XCTAssertEqual("hughbellars@gmail.com", (msg.getProperty(id: .tagCreatorEmailAddress) as String?)!)
        XCTAssertEqual(UUID(uuidString: "38433B49-39D1-4EF7-D4EA-08D8710BC0F5"), (msg.getProperty(set: .common, name: "NetworkMessageId") as UUID?)!)
        XCTAssertEqual("[\r\n  {\r\n    \"@outputVersion\": \"1.0\",\r\n    \"@IRankerModelVersion\": \"ModelV4\",\r\n    \"@emailRelevanceScore\": \"0.9808256452309\",\r\n    \"IsImportantByIRanker\": \"True\",\r\n    \"FromIsTopCollab\": \"0.0\",\r\n    \"@EntityId\": \"534c3592-a964-4937-8450-e8c8225d9485\",\r\n    \"@correlationTrail\": \"AssetId=3ca1b246-4961-4b84-bad1-d2bce21c58f1;ExtractionId=a940acef-c8c6-428f-a564-b301f8896c9f;EntityId=534c3592-a964-4937-8450-e8c8225d9485\",\r\n    \"@extractionTimeUtc\": \"2020-10-15T13:11:01.1967508Z\"\r\n  }\r\n]", (msg.getProperty(set: .common, name: "EntityExtraction/IRankerScoreDev1.0") as String?)!)
        XCTAssertEqual("pstreadertests@outlook.com", msg.receivedRepresentingSmtpAddress!)
        XCTAssertEqual("hughbellars@gmail.com", (msg.getProperty(id: .tagSenderName) as String?)!)
        XCTAssertFalse((msg.getProperty(set: .messaging, name: "IsReadReceipt") as Bool?)!)
        XCTAssertEqual(0, (msg.getProperty(id: .PR_MODIFIER_FLAG) as UInt32?)!)
        XCTAssertEqual("'Hugh Bellamy'\u{00}", msg.displayTo!)
        XCTAssertEqual("EX", (msg.getProperty(id: .unknown0x4024) as String?)!)
        XCTAssertEqual(32, (msg.getProperty(set: .common, name: "ExchangeApplicationFlags") as UInt32?)!)
        XCTAssertEqual("209.85.128.48", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-organization-originalclientipaddress") as String?)!)
        XCTAssertTrue(msg.conversationIndexTracking!)
        XCTAssertEqual("Pass (protection.outlook.com: domain of gmail.com designates 209.85.128.48 as permitted sender) receiver=protection.outlook.com; client-ip=209.85.128.48; helo=mail-wm1-f48.google.com;", (msg.getProperty(set: .internetHeaders, name: "received-spf") as String?)!)
        XCTAssertEqual([.read], msg.access)
        XCTAssertEqual(1252, msg.messageCodepage!)
        XCTAssertEqual(.undefined, msg.nativeBody!)
        XCTAssertEqual([0x00000035], (msg.getProperty(set: .publicStrings, lid: 0x0000232A) as [UInt32]?)!)
        XCTAssertEqual("<LNXP123MB3820CD99E45451F765E2D646CB020@LNXP123MB3820.GBRP123.PROD.OUTLOOK.COM>", msg.inReplyToId!)
        XCTAssertEqual([0x14, 0x80, 0x77, 0xBB, 0xAB, 0x4D, 0xFD, 0x4B, 0xB3, 0x4F, 0xCC, 0xCD, 0x5E, 0x5A, 0x4E, 0x21], [UInt8]((msg.getProperty(id: .unknown0x0F03) as Data?)!))
        XCTAssertEqual(UUID(uuidString: "7F8587FE-323C-4220-9C5F-2907EB106A78"), (msg.getProperty(guid: UUID(uuidString: "0B63E350-9CCC-11D0-BCDB-00805FCCCE04")!, name: "BigFunnelCorrelationId") as UUID?)!)
        XCTAssertEqual("FLYJMNezNYXbzSdd7ARc7He6lVcZhJlrU6KVcaYMZ7soWZneUQ3diXRtqB0x1mnTcgUKefOq7oMk4l62xnwF/UhE10J5AQRvHTV6uX4Y2UAHGwBBm1RKiwYz957UqqZ3KTlKW7tG+7L4DzhQuJWmyw+K4D5lA5MW7DS7/dhA+thKoRKT6CJ/2gl4qJYXjeYt9N8KX8fmd1+7JQpBc+7hrB5O0sJrX9rR9euSjR1fGdjicuI/sbz8WWr4yCUKD2ndarO9Iif/hjlbP3ryEodGCt0hiEJzKnwqkjrB+gMmuklr1A3iZd1Z1Yy7ab4gY5w/PXNe+42QtTZxwAKK3LSitw5UKTSjD2j/c6HBtta7pUwK2HG47xzv+BZ7W9Nu4Y7K/coruB1YWweSBcpyhp77OJ9aldHAOzyzW53GGOCOHoKmOFHQb318nfx2bKkCjdPYfMChsDmWbTJkegoi0hKZTby+5rTW8FmWvTDagaKgb3/AeAawMXcEkUoaKjoCnjF6k3j+FD4vgmpp4MUbMMeXJ+RFtRNsiaTcAvGq01sVKdT+SppgllDVhLh135MvXzxNLWFCzCIjHSUonbTP/mMMXl0ZPshH2XYUDsL5Kb5aQgNqiKIiPnawV1lnuWekf14sPMEV/ciVEY8QTCc/6ZOlUX+gT0d9A3uiYtMf6D7vubfeHfT08zrgfndahA2aAgGQRfR0+68pt5VwfVoWtv2kcyeTRm62krH1hJg3w+BElTNH9HL/gBMSueaIpEW7PbNmvskaE3B9EmoV4at/XNxwFbUiuBhgcI8dfhqeM5TT4H7uFaip6BmMO83WqcLTYhKShzsML5YS5tkaucWZa4lyyeq9xtwrrK0rE/S7MIxclebTaHEAs2IevfG9EWcENYq0ebhUdKRCayBCD77AeCQfm52gJnkZq5l0duNcdyA3iGy+TQp70HtMnLLEg/Z7f9NyIErH6zMFaS597H5GU9iOhxSAzCHn5tO/7gkgiFhw2tKOCTHa6S4/YwgYStbkQ2BmAw38ZvKu89uzQ3EW+DiTtWcvt/lHY63PCHZ8mpkaPBK6X5gwVu8L1Aadtv2ooJVi0RISWKr4x1HTPWgFjtTOs0CX8/onTisYCOjkWmn/nI1gYOUFB1FyVIBPXVesYzIB", (msg.getProperty(set: .common, name: "X-Microsoft-Antispam-Message-Info") as String?)!)
        XCTAssertTrue((msg.getProperty(set: .messaging, name: "HasQuotedText") as Bool?)!)
        XCTAssertFalse((msg.getProperty(guid: UUID(uuidString: "0B63E350-9CCC-11D0-BCDB-00805FCCCE04")!, name: "IsPartiallyIndexed") as Bool?)!)
        XCTAssertEqual([0x01, 0x00, 0x00, 0x00, 0x01, 0x36, 0xB4, 0xCA, 0x34], [UInt8]((msg.getProperty(id: .unknown0x120B) as Data?)!))
        XCTAssertEqual("Subject", msg.conversationTopic!)
        XCTAssertEqual("abwl:0;wl:0;pcwl:0;kl:0;iwl:0;dwl:0;dkl:0;rwl:0;ucf:0;jmr:0;ex:0;auth:1;dest:I;OFR:SpamFilterPass;ENG:(5062000282)(90000117)(90005022)(91005020)(90014020)(91030020)(91040095)(9000001)(9010001)(9050020)(9100082)(5061607266)(5061608174)(1005109)(4900115)(98392012)(98393011)(4920090)(6225004)(4950131)(4990090)(9110004);", (msg.getProperty(set: .common, name: "X-Microsoft-Antispam-Mailbox-Delivery") as String?)!)
        XCTAssertEqual(0x01, msg.conversationIndex!.header.reserved)
        XCTAssertEqual(0xD6, msg.conversationIndex!.header.currentFileTime.0)
        XCTAssertEqual(0xA2, msg.conversationIndex!.header.currentFileTime.1)
        XCTAssertEqual(0xF4, msg.conversationIndex!.header.currentFileTime.2)
        XCTAssertEqual(0x1E, msg.conversationIndex!.header.currentFileTime.3)
        XCTAssertEqual(0xA7, msg.conversationIndex!.header.currentFileTime.4)
        XCTAssertEqual(UUID(uuidString: "B750617C-2704-466F-8F8D-7F1A9CB5DEC6"), msg.conversationIndex!.header.guid)
        XCTAssertEqual(1, msg.conversationIndex!.responseLevels.count)
        XCTAssertEqual(0x3B1F0000, msg.conversationIndex!.responseLevels[0].dcAndDeltaTime)
        XCTAssertEqual(0x00, msg.conversationIndex!.responseLevels[0].random)
        XCTAssertEqual("hughbellars@gmail.com", msg.sentRepresentingName!)
        XCTAssertEqual(11, (msg.getProperty(id: .unknown0x3666) as UInt32?)!)
        XCTAssertEqual("[\"ExtractionId\",\"76a0fd93-7506-4075-b46c-f6d3af69db32\",\"TeeEngineVersion\",\"52.0.0\",\"BuildNumber\",\"20201005.21\",\"ChangesetNumber\",\"24747f22ecffc403784e3b2861b7224a18fe19c6\",\"Locale\",\"en-US\",\"MessageId\",\"\\u003c007c01d6a2f4$9c2c09a0$d4841ce0$@gmail.com\\u003e\",\"ReferenceTime\",\"2020-10-15T13:11:01.0000000Z\",\"Flights\",\"TEEReplyWithShipWW;TEEM2HPayloadEnabledFlight;TEEEntityDocumentFlightEnabled;TEE_Tasks_RequestsPeopleAssignmentRedesigned;CheckJunkMailHeadersFlight;TEEImportantContact;TEEInboxPlusFlight;TEEEnableTermFrequency;TEEEnableExperimentalTermFrequency;TEEFirstBodyFlight;TEEFilesProcessor;TEEExtractQuotedTextLanguagesFlight;TEERequestsForESFlightV2;TEESmartReplyForEnEnabled_WW;TEECouponRankerFlight;CommitmentsfpgahaasRealTrafficflight;KtgClassifierSentItemsFlight;TEECommitmentsForESFlight;TEEFollowUpForESFlightV2;QasTestKPEOffBoxB2;QasAcronymExtractorOffBoxB2;RawKPEScoresFlight;TEEAcronymsExtractorCancToken;TEEExtractedOnlineMeetingInfoFlight;TEEFlightReservationOptionalFieldsFlight\",\"StartTime\",\"2020-10-15T13:11:01.9693580Z\",\"EndTime\",\"2020-10-15T13:11:01.9803109Z\"]", (msg.getProperty(set: .common, name: "EntityExtractionServiceDiagnosticContextDelayed") as String?)!)
        XCTAssertEqual("False", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-organization-submissionquotaskipped") as String?)!)
        XCTAssertEqual(1602767570.0, msg.lastModificationTime!.timeIntervalSince1970)
        XCTAssertEqual(67108864, (msg.getProperty(set: .xmlExtractedEntities, name: "InferenceClassificationResult") as UInt32?)!)
        XCTAssertEqual("", (msg.getProperty(set: .common, name: "TeeNextScenario") as String?)!)
        XCTAssertEqual(0x00000000, (msg.lastModifierEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.lastModifierEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.lastModifierEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.lastModifierEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=FIRST ORGANIZATION/OU=EXCHANGE ADMINISTRATIVE GROUP(FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=00037FFE34534C30\u{00}", (msg.lastModifierEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual([0x45, 0x58, 0x3A, 0x2F, 0x4F, 0x3D, 0x46, 0x49, 0x52, 0x53, 0x54, 0x20, 0x4F, 0x52, 0x47, 0x41, 0x4E, 0x49, 0x5A, 0x41, 0x54, 0x49, 0x4F, 0x4E, 0x2F, 0x4F, 0x55, 0x3D, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x41, 0x44, 0x4D, 0x49, 0x4E, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x20, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x28, 0x46, 0x59, 0x44, 0x49, 0x42, 0x4F, 0x48, 0x46, 0x32, 0x33, 0x53, 0x50, 0x44, 0x4C, 0x54, 0x29, 0x2F, 0x43, 0x4E, 0x3D, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4E, 0x54, 0x53, 0x2F, 0x43, 0x4E, 0x3D, 0x30, 0x30, 0x30, 0x33, 0x37, 0x46, 0x46, 0x45, 0x33, 0x34, 0x35, 0x33, 0x34, 0x43, 0x33, 0x30, 0x00], [UInt8](msg.receivedBySearchKey!))
        XCTAssertFalse(msg.readReceiptRequested!)
        XCTAssertEqual(1602767452.0, msg.clientSubmitTime!.timeIntervalSince1970)
        XCTAssertFalse(msg.`private`!)
        XCTAssertEqual("/O=FIRST ORGANIZATION/OU=EXCHANGE ADMINISTRATIVE GROUP(FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=00037FFE34534C30", (msg.getProperty(id: .unknown0x4025) as String?)!)
        XCTAssertEqual([0x00, 0x00, 0x00, 0x00, 0xCB, 0xB8, 0x94, 0x67, 0xE6, 0x06, 0x42, 0x48, 0xA8, 0x20, 0x9C, 0xC1, 0xE3, 0xB9, 0xA1, 0x28, 0x01, 0x00, 0x4A, 0xB1, 0x11, 0xF7, 0xC8, 0x92, 0x94, 0x40, 0x98, 0x43, 0x75, 0x0B, 0xE6, 0x08, 0x6B, 0xC4, 0x00, 0x00, 0x00, 0x00, 0x23, 0xB4, 0x00, 0x00], [UInt8]((msg.getProperty(set: .messaging, name: "ConversationTreeParentRecordKey") as Data?)!))
        XCTAssertNotNil(msg.getProperty(set: .xmlExtractedEntities, name: "TriageHeuristicsFeatureSet"))
        XCTAssertEqual(67108864, (msg.getProperty(set: .xmlExtractedEntities, name: "GriffinInferenceClassificationResult") as UInt32?)!)
        XCTAssertTrue(msg.rtfInSync!)
        XCTAssertEqual("RE: Subject", msg.subject!)
        XCTAssertEqual("<007c01d6a2f4$9c2c09a0$d4841ce0$@gmail.com>", (msg.getProperty(id: .tagInternetMessageId) as String?)!)
        XCTAssertEqual("SMTP", (msg.getProperty(id: .tagCreatorAddressType) as String?)!)
        XCTAssertEqual([0x00, 0x0A, 0x09, 0x0B, 0x0D, 0x15, 0x23, 0x2B, 0x55, 0x57, 0x59, 0x6D, 0x12, 0x1A, 0x03, 0x05, 0x07, 0x09, 0x13, 0x17, 0x19, 0x1B, 0x1D, 0x1F, 0x21, 0x31, 0x33, 0x35, 0x37, 0x39, 0x3B, 0x3D, 0x47, 0x49, 0x4B, 0x4D, 0x4F, 0x51, 0x53, 0x5D, 0x1A, 0x03, 0x01, 0x27, 0x65, 0x22, 0x0C, 0x00, 0x00, 0xCA, 0x42, 0x00, 0x00, 0x80, 0x3F, 0x4D, 0x52, 0x7E, 0x3F, 0x2A, 0x09, 0x0F, 0x11, 0x25, 0x29, 0x2D, 0x3F, 0x41, 0x43, 0x45, 0x32, 0x01, 0x2F, 0x3A, 0x01, 0x01, 0x42, 0x01, 0x5B], [UInt8]((msg.getProperty(id: .unknown0x3677) as Data?)!))
        XCTAssertEqual("[\r\n  {\r\n    \"@type\": \"ExtractLanguage\",\r\n    \"@context\": \"http://schema.microsoft.com\",\r\n    \"@outputVersion\": \"1.0\",\r\n    \"Language\": {\r\n      \"@type\": \"Language\",\r\n      \"Locale\": \"hu-HU\",\r\n      \"name\": \"Hungarian (Hungary)\",\r\n      \"BestGuessLanguage\": \"en\"\r\n    },\r\n    \"@source\": \"Bling\",\r\n    \"LanguageScores\": {\r\n      \"Hungarian\": 81.6666641\r\n    },\r\n    \"@EntityId\": \"f96af88c-a378-4bbf-a7f1-e40fd32b2854\",\r\n    \"@correlationTrail\": \"AssetId=42c90df8-35d0-4955-8195-dad42cc7da3f;ExtractionId=76a0fd93-7506-4075-b46c-f6d3af69db32;EntityId=f96af88c-a378-4bbf-a7f1-e40fd32b2854\",\r\n    \"@extractionTimeUtc\": \"2020-10-15T13:11:01.9803109Z\"\r\n  }\r\n]", (msg.getProperty(set: .common, name: "EntityExtraction/ExtractLanguage1.0") as String?)!)
        XCTAssertEqual(1602767461.0, msg.messageDeliveryTime!.timeIntervalSince1970)
        XCTAssertEqual([.read, .unmodified, .hasAttachment], msg.messageFlags)
        XCTAssertEqual(1602767461.0, (msg.getProperty(id: .unknown0x0F02) as Date?)!.timeIntervalSince1970)
        XCTAssertEqual("{\"diagnosticsCodes\":[\"DomainNotAllowed\"]}", (msg.getProperty(set: .common, name: "MessageCardExtractionDiagnosticContext") as String?)!)
        XCTAssertEqual(.personal, msg.sensitivity!)
        XCTAssertEqual(["ExtractLanguage", "KeyPhraseExtraction", "ExtractQuotedTextLanguages", "ExtractLanguage1.0", "KeyPhraseExtraction2.0", "ExtractQuotedTextLanguages1.0"], (msg.getProperty(set: .common, name: "EntityNamesDelayed") as [String]?)!)
        XCTAssertEqual(0x00000000, (msg.sentRepresentingEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.sentRepresentingEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.sentRepresentingEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.sentRepresentingEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("hughbellars@gmail.com", (msg.sentRepresentingEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.sentRepresentingEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("hughbellars@gmail.com", (msg.sentRepresentingEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x48, 0x55, 0x47, 0x48, 0x42, 0x45, 0x4C, 0x4C, 0x41, 0x52, 0x53, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.senderSearchKey!))
        XCTAssertEqual("", (msg.getProperty(set: .common, name: "TeeNextPayload") as String?)!)
        XCTAssertEqual("hughbellars@gmail.com", (msg.getProperty(id: .tagSenderSmtpAddress) as String?)!)
        XCTAssertEqual("5vMbyqxGkddbHVl68g2w37GKbXYzHnlHlMGpsZ8T8ztYIoCuBEHNT0F+4DaFtpR3yaqzuuKYjyqA11T0SLVAwgBa0T8I2Wus6/WuoCfcQv5FW9NWkn95Vo0PLQ0h81dth2dcAsn5t2bGM6M3ZhBa2Vm7Nf5WxEAceS4/Hkm4Mk1InUXJm94vnvI9jIW2EEzwI+AXmrpK+6GgoClc72kvOg==", (msg.getProperty(set: .common, name: "X-Message-Info") as String?)!)
        XCTAssertEqual(.normal, msg.priority!)
        XCTAssertEqual("la", (msg.getProperty(guid: UUID(uuidString: "0B63E350-9CCC-11D0-BCDB-00805FCCCE04")!, name: "DetectedLanguage") as String?)!)
        XCTAssertEqual(UUID(uuidString: "B71D3DDC-5B41-4C92-AEE2-C2FEF93AC9BC"), (msg.getProperty(set: .xmlExtractedEntities, name: "InferenceMessageIdentifier") as UUID?)!)
        XCTAssertEqual(1602767461.0, (msg.getProperty(guid: UUID(uuidString: "0B63E350-9CCC-11D0-BCDB-00805FCCCE04")!, name: "LastIndexingAttemptTime") as Date?)!.timeIntervalSince1970)
        XCTAssertEqual("[{\r\n  \"@context\": \"http://schema.org\",\r\n  \"type\": \"ExtractLanguage\",\r\n  \"entities\": [\r\n  {\r\n    \"@type\": \"ExtractLanguage\",\r\n    \"@context\": \"http://schema.microsoft.com\",\r\n    \"@outputVersion\": \"1.0\",\r\n    \"Language\": {\r\n      \"@type\": \"Language\",\r\n      \"Locale\": \"hu-HU\",\r\n      \"name\": \"Hungarian (Hungary)\",\r\n      \"BestGuessLanguage\": \"en\"\r\n    },\r\n    \"@source\": \"Bling\",\r\n    \"LanguageScores\": {\r\n      \"Hungarian\": 81.6666641\r\n    },\r\n    \"@EntityId\": \"2fd4f83a-111a-4f4a-9e6d-67c3a86463d2\",\r\n    \"@correlationTrail\": \"AssetId=3ca1b246-4961-4b84-bad1-d2bce21c58f1;ExtractionId=a940acef-c8c6-428f-a564-b301f8896c9f;EntityId=2fd4f83a-111a-4f4a-9e6d-67c3a86463d2\",\r\n    \"@extractionTimeUtc\": \"2020-10-15T13:11:01.1967508Z\"\r\n  }\r\n]\r\n}]", (msg.getProperty(set: .common, name: "EntityDocument") as String?)!)
        XCTAssertEqual(["IRankerScore", "IRankerScoreDev", "ExtractLanguage", "ExtractQuotedTextLanguages", "IRankerScore1.0", "IRankerScoreDev1.0", "ExtractLanguage1.0", "ExtractQuotedTextLanguages1.0"], (msg.getProperty(set: .common, name: "EntityNames") as [String]?)!)
        XCTAssertEqual(0x00000000, (msg.receivedByEntryId as? AddressBookEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "DCA740C8-C042-101A-B4B9-08002B2FE182"), (msg.receivedByEntryId as? AddressBookEntryID)!.providerUid)
        XCTAssertEqual(0x00000001, (msg.receivedByEntryId as? AddressBookEntryID)!.version)
        XCTAssertEqual(.localMailUser, (msg.receivedByEntryId as? AddressBookEntryID)!.type)
        XCTAssertEqual("/O=FIRST ORGANIZATION/OU=EXCHANGE ADMINISTRATIVE GROUP(FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=00037FFE34534C30\u{00}", (msg.receivedByEntryId as? AddressBookEntryID)!.x500DN)
        XCTAssertEqual(2, (msg.getProperty(id: .tagContentFilterPhishingConfidenceLevel) as UInt32?)!)
        XCTAssertFalse(msg.messageCcMe!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x48, 0x55, 0x47, 0x48, 0x42, 0x45, 0x4C, 0x4C, 0x41, 0x52, 0x53, 0x40, 0x47, 0x4D, 0x41, 0x49, 0x4C, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.sentRepresentingSearchKey!))
        XCTAssertEqual(.readOnly, msg.accessLevel!)
        XCTAssertEqual("Inbox", (msg.getProperty(id: .tagParentDisplay) as String?)!)
        XCTAssertEqual("Subject", msg.normalizedSubject!)
        XCTAssertEqual(2047, (msg.getProperty(id: .unknown0x3663) as UInt32?)!)
        XCTAssertEqual("20201005.21", (msg.getProperty(set: .common, name: "TeeVersion") as String?)!)
        XCTAssertEqual("BT=1;II=[CID=75fcfedf-c403-9a35-bb38-061777b6f11d;IDXHEAD=014A90EF6B;IDXCOUNT=2];SBMID=98;S1=<LNXP123MB3820CD99E45451F765E2D646CB020@LNXP123MB3820.GBRP123.PROD.OUTLOOK.COM>;RTP=DirectChild;TDN=Removed;TFR=ParticipantChanged;FIXUP=101.0661;Version=Version 15.20 (Build 3455.0), Stage=H2, TC;UP=50;DP=5;QT=1;CPBT=A0000000EC028C7BF0462B9E", (msg.getProperty(guid: UUID(uuidString: "33EBA41F-7AA8-422E-BE7B-79E1A98E54B3")!, name: "ConversationIndexTrackingEx") as String?)!)
        XCTAssertTrue((msg.getProperty(set: .common, name: "EntityExtractionSuccessDelayed") as Bool?)!)
        XCTAssertEqual(13, (msg.getProperty(id: .unknown0x3668) as UInt32?)!)
        XCTAssertEqual("pstreadertests@outlook.com", (msg.getProperty(id: .unknown0x5D0B) as String?)!)
        XCTAssertEqual(1602767570.0, msg.creationTime!.timeIntervalSince1970)
        XCTAssertEqual([0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x0B, 0xFE, 0x7F, 0x03, 0x00, 0x30, 0x4C, 0x53, 0x34], [UInt8]((msg.getProperty(id: .PR_LAST_MODIFIER_SID) as Data?)!))
        XCTAssertEqual("pstreadertests@outlook.com", msg.receivedBySmtpAddress!)
        XCTAssertEqual(0, (msg.getProperty(id: .unknown0x365A) as UInt32?)!)
        XCTAssertEqual("", msg.displayCc!)
        XCTAssertEqual("hughbellars@gmail.com", msg.senderEmailAddress!)
        XCTAssertEqual("10.152.21.128", (msg.getProperty(set: .internetHeaders, name: "x-ms-exchange-organization-originalserveripaddress") as String?)!)
        XCTAssertEqual("/O=FIRST ORGANIZATION/OU=EXCHANGE ADMINISTRATIVE GROUP(FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=00037FFE34534C30", msg.receivedByEmailAddress!)

        XCTAssertEqual(1, msg.recipients.count)
        XCTAssertEqual(0x00000000, (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("'Hugh Bellamy'", (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("pstreadertests@outlook.com", (msg.recipients[0].recipientEntryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual(.sendable, msg.recipients[0].recipientFlags!)
        XCTAssertEqual(.primaryRecipient, msg.recipients[0].recipientType!)
        XCTAssertEqual(0, msg.recipients[0].rowid!)
        XCTAssertEqual(.mailUser, msg.recipients[0].displayType!)
        XCTAssertEqual([0x53, 0x4D, 0x54, 0x50, 0x3A, 0x50, 0x53, 0x54, 0x52, 0x45, 0x41, 0x44, 0x45, 0x52, 0x54, 0x45, 0x53, 0x54, 0x53, 0x40, 0x4F, 0x55, 0x54, 0x4C, 0x4F, 0x4F, 0x4B, 0x2E, 0x43, 0x4F, 0x4D, 0x00], [UInt8](msg.recipients[0].searchKey!))
        XCTAssertEqual("'Hugh Bellamy'", msg.recipients[0].transmittableDisplayName!)
        XCTAssertEqual(.mailUser, msg.recipients[0].objectType!)
        XCTAssertTrue(msg.recipients[0].responsibility!)
        XCTAssertEqual(0x00000000, (msg.recipients[0].entryId as? OneOffEntryID)!.flags)
        XCTAssertEqual(UUID(uuidString: "812B1FA4-BEA3-1019-9D6E-00DD010F5402"), (msg.recipients[0].entryId as? OneOffEntryID)!.providerUid)
        XCTAssertEqual(0x0000, (msg.recipients[0].entryId as? OneOffEntryID)!.version)
        XCTAssertEqual([.noRichInfo, .unicode], (msg.recipients[0].entryId as? OneOffEntryID)!.entryFlags)
        XCTAssertEqual("'Hugh Bellamy'", (msg.recipients[0].entryId as? OneOffEntryID)!.displayName)
        XCTAssertEqual("SMTP", (msg.recipients[0].entryId as? OneOffEntryID)!.addressType)
        XCTAssertEqual("pstreadertests@outlook.com", (msg.recipients[0].entryId as? OneOffEntryID)!.emailAddress)
        XCTAssertEqual([0x00, 0x00, 0x00, 0x00, 0x81, 0x2B, 0x1F, 0xA4, 0xBE, 0xA3, 0x10, 0x19, 0x9D, 0x6E, 0x00, 0xDD, 0x01, 0x0F, 0x54, 0x02, 0x00, 0x00, 0x01, 0x80, 0x27, 0x00, 0x48, 0x00, 0x75, 0x00, 0x67, 0x00, 0x68, 0x00, 0x20, 0x00, 0x42, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x79, 0x00, 0x27, 0x00, 0x00, 0x00, 0x53, 0x00, 0x4D, 0x00, 0x54, 0x00, 0x50, 0x00, 0x00, 0x00, 0x70, 0x00, 0x73, 0x00, 0x74, 0x00, 0x72, 0x00, 0x65, 0x00, 0x61, 0x00, 0x64, 0x00, 0x65, 0x00, 0x72, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00, 0x73, 0x00, 0x40, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x74, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x6B, 0x00, 0x2E, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x00, 0x00], [UInt8](msg.recipients[0].recordKey!))
        XCTAssertEqual("pstreadertests@outlook.com", msg.recipients[0].smtpAddress!)
        XCTAssertFalse(msg.recipients[0].sendRichInfo!)
        XCTAssertEqual("'Hugh Bellamy'", msg.recipients[0].displayName!)
        XCTAssertEqual([0x00, 0x00, 0x2E, 0x0F], [UInt8](msg.recipients[0].instanceKey!))
        XCTAssertEqual("SMTP", msg.recipients[0].addressType!)
        XCTAssertEqual("pstreadertests@outlook.com", msg.recipients[0].emailAddress!)

        XCTAssertEqual(1, msg.attachments.count)
        XCTAssertEqual(1602767459.0, msg.attachments[0].creationTime!.timeIntervalSince1970)
        XCTAssertEqual(.byValue, msg.attachments[0].attachMethod!)
        XCTAssertEqual(.readOnly, msg.attachments[0].accessLevel!)
        XCTAssertNotNil(msg.attachments[0].getProperty(set: .attachment, name: "ImageSmallThumbnail"))
        XCTAssertEqual(1920, (msg.attachments[0].getProperty(set: .attachment, name: "ImageNaturalHeight") as UInt32?)!)
        XCTAssertEqual(250, (msg.attachments[0].getProperty(set: .attachment, name: "ImageSmallThumbnailHeight") as UInt32?)!)
        XCTAssertEqual(2880, (msg.attachments[0].getProperty(set: .attachment, name: "ImageNaturalWidth") as UInt32?)!)
        XCTAssertEqual("KbWaRt3570GG+a3bHo3DVw==", (msg.attachments[0].getProperty(set: .attachment, name: "DocumentProcessingCorrelationId") as String?)!)
        XCTAssertEqual("3AA22C65A5F1B4469113BC5D739478B8@GBRP123.PROD.OUTLOOK.COM", msg.attachments[0].attachContentId!)
        XCTAssertEqual("rover-~1.jpg", msg.attachments[0].attachFilename!)
        XCTAssertEqual([0x00, 0x00, 0x00, 0x00], [UInt8](msg.attachments[0].recordKey!))
        XCTAssertEqual(.attachment, msg.attachments[0].objectType!)
        XCTAssertEqual("image/jpeg", msg.attachments[0].attachMimeTag!)
        XCTAssertEqual([.unicodeOk, StoreSupportMask(rawValue: 0x00000E79)], msg.attachments[0].storeSupportMask)
        XCTAssertEqual(4294967295, msg.attachments[0].renderingPosition!)
        XCTAssertEqual("rover-and-landscape-scenery.jpg", msg.attachments[0].displayName!)
        XCTAssertEqual("rover-and-landscape-scenery.jpg", msg.attachments[0].attachLongFilename!)
        XCTAssertEqual([.read], msg.attachments[0].access)
        XCTAssertEqual([0xDA, 0xB8, 0xB6, 0x67, 0x00, 0xF4, 0x62, 0x43, 0x83, 0xF4, 0x6E, 0xF3, 0x53, 0xDC, 0x78, 0x91], [UInt8]((msg.attachments[0].getProperty(id: .unknown0x371D) as Data?)!))
        XCTAssertEqual(".jpg", msg.attachments[0].attachExtension!)
        XCTAssertEqual(0, msg.attachments[0].attachNumber!)
        XCTAssertEqual(375, (msg.attachments[0].getProperty(set: .attachment, name: "ImageSmallThumbnailWidth") as UInt32?)!)
        XCTAssertEqual("EnUs", msg.attachments[0].language!)
        XCTAssertNotNil(msg.attachments[0].attachDataBinary)
        XCTAssertEqual(1602767461.0, msg.attachments[0].lastModificationTime!.timeIntervalSince1970)
    }

    static var allTests = [
        ("testReadTeamMsgExtractor1", testReadTeamMsgExtractor1),
        ("testReadTeamMsgExtractor2", testReadTeamMsgExtractor2),
        ("testReadVikramarsid1", testReadVikramarsid1),
        ("testReadVikramarsid2", testReadVikramarsid2),
        ("testReadVikramarsid3", testReadVikramarsid3),
        ("testReadConfusedCat1", testReadConfusedCat1),
        ("testReadConfusedCat2", testReadConfusedCat2),
        ("testReadConfusedCat3", testReadConfusedCat3),
        ("testReadConfusedCat4", testReadConfusedCat4),
        ("testReadConfusedCat5", testReadConfusedCat5),
        ("testReadConfusedCat6", testReadConfusedCat6),
        ("testReadConfusedCat7", testReadConfusedCat7),
        ("testReadConfusedCat8", testReadConfusedCat8),
        ("testReadSicos19771", testReadSicos19771),
        ("testReadSicos19772", testReadSicos19772),
        ("testReadSicos19773", testReadSicos19773),
        ("testReadSicos19774", testReadSicos19774),
        ("testReadSicos19775", testReadSicos19775),
        ("testReadSicos19776", testReadSicos19776),
        ("testReadSicos19777", testReadSicos19777),
        ("testReadOnline1", testReadOnline1),
        ("testReadOnline2", testReadOnline2),
        ("testReadMine1", testReadMine1),
        ("testReadMine2", testReadMine2),
        ("testReadMine3", testReadMine3),
        ("testReadMine4", testReadMine4),
        ("testReadMine5", testReadMine5),
        ("testReadMine6", testReadMine6),
        ("testReadMine7", testReadMine7),
        ("testReadMine8", testReadMine8),
        ("testReadMine9", testReadMine9),
        ("testReadMine10", testReadMine10),
        ("testReadMine11", testReadMine11),
    ]
}
